// Code generated by wunderctl. DO NOT EDIT.

import type function_AbbreviationsSearchAbreviation from "../../../wundergraph/.wundergraph/operations/Abbreviations/searchAbreviation";
import type function_DrugsSearchDrugs from "../../../wundergraph/.wundergraph/operations/Drugs/searchDrugs";
import type function_ClinicalDiagnosticsSearchClinicalDiagnostics from "../../../wundergraph/.wundergraph/operations/clinicalDiagnostics/searchClinicalDiagnostics";
import type function_PatientsSearch_patients from "../../../wundergraph/.wundergraph/operations/patients/search_patients";
import type function_UsersGet from "../../../wundergraph/.wundergraph/operations/users/get";
import type function_UsersSubscribe from "../../../wundergraph/.wundergraph/operations/users/subscribe";
import type function_UsersUpdate from "../../../wundergraph/.wundergraph/operations/users/update";
import type { ExtractInput, ExtractResponse } from "@wundergraph/sdk/operations";
import type { OperationErrors } from "./ts-operation-errors";
import type { GraphQLError } from "@wundergraph/sdk/client";

export interface countries_CountryFilterInput {
	code?: countries_StringQueryOperatorInput;
	continent?: countries_StringQueryOperatorInput;
	currency?: countries_StringQueryOperatorInput;
	name?: countries_StringQueryOperatorInput;
}

export interface countries_StringQueryOperatorInput {
	eq?: string;
	in?: string[];
	ne?: string;
	nin?: string[];
	regex?: string;
}

export interface mainDb_StringFilter {
	contains?: string;
	endsWith?: string;
	equals?: string;
	gt?: string;
	gte?: string;
	in?: string[];
	lt?: string;
	lte?: string;
	mode?: mainDb_QueryModeValues;
	not?: mainDb_NestedStringFilter;
	notIn?: string[];
	startsWith?: string;
}

export interface mainDb_NestedStringFilter {
	contains?: string;
	endsWith?: string;
	equals?: string;
	gt?: string;
	gte?: string;
	in?: string[];
	lt?: string;
	lte?: string;
	not?: mainDb_NestedStringFilter;
	notIn?: string[];
	startsWith?: string;
}

export interface mainDb_UserCreateInput {
	ClinicalEvent?: mainDb_ClinicalEventCreateNestedManyWithoutUserInput;
	avatarUrl?: string;
	createdAt?: string;
	email: string;
	firstName?: string;
	fullName?: string;
	id?: string;
	lastConnection?: string;
	lastName?: string;
	phoneNumbers?: mainDb_UserCreatephoneNumbersInput;
	role?: mainDb_RoleValues;
	typesenseApiKey?: string;
	userId: string;
}

export interface mainDb_ClinicalEventCreateNestedManyWithoutUserInput {
	connect?: mainDb_ClinicalEventWhereUniqueInput[];
	connectOrCreate?: mainDb_ClinicalEventCreateOrConnectWithoutUserInput[];
	create?: mainDb_ClinicalEventCreateWithoutUserInput[];
	createMany?: mainDb_ClinicalEventCreateManyUserInputEnvelope;
}

export interface mainDb_ClinicalEventWhereUniqueInput {
	AND?: mainDb_ClinicalEventWhereInput[];
	NOT?: mainDb_ClinicalEventWhereInput[];
	OR?: mainDb_ClinicalEventWhereInput[];
	Prescription?: mainDb_PrescriptionNullableRelationFilter;
	clinicalDiagnosticId?: mainDb_StringNullableFilter;
	createdAt?: mainDb_DateTimeFilter;
	createdReport?: mainDb_BoolFilter;
	deleted?: mainDb_BoolFilter;
	dicom?: mainDb_BoolFilter;
	dicomId?: mainDb_StringNullableFilter;
	empty?: mainDb_BoolFilter;
	eventType?: mainDb_EnumEventTypesFilter;
	id?: string;
	onTrash?: mainDb_BoolFilter;
	patient?: mainDb_PatientRelationFilter;
	patientId?: mainDb_StringFilter;
	report?: mainDb_StringNullableFilter;
	updatedAt?: mainDb_DateTimeFilter;
	user?: mainDb_UserRelationFilter;
	userId?: mainDb_StringFilter;
}

export interface mainDb_ClinicalEventWhereInput {
	AND?: mainDb_ClinicalEventWhereInput[];
	NOT?: mainDb_ClinicalEventWhereInput[];
	OR?: mainDb_ClinicalEventWhereInput[];
	Prescription?: mainDb_PrescriptionNullableRelationFilter;
	clinicalDiagnosticId?: mainDb_StringNullableFilter;
	createdAt?: mainDb_DateTimeFilter;
	createdReport?: mainDb_BoolFilter;
	deleted?: mainDb_BoolFilter;
	dicom?: mainDb_BoolFilter;
	dicomId?: mainDb_StringNullableFilter;
	empty?: mainDb_BoolFilter;
	eventType?: mainDb_EnumEventTypesFilter;
	id?: mainDb_StringFilter;
	onTrash?: mainDb_BoolFilter;
	patient?: mainDb_PatientRelationFilter;
	patientId?: mainDb_StringFilter;
	report?: mainDb_StringNullableFilter;
	updatedAt?: mainDb_DateTimeFilter;
	user?: mainDb_UserRelationFilter;
	userId?: mainDb_StringFilter;
}

export interface mainDb_PrescriptionNullableRelationFilter {
	is?: mainDb_PrescriptionWhereInput;
	isNot?: mainDb_PrescriptionWhereInput;
}

export interface mainDb_PrescriptionWhereInput {
	AND?: mainDb_PrescriptionWhereInput[];
	NOT?: mainDb_PrescriptionWhereInput[];
	OR?: mainDb_PrescriptionWhereInput[];
	clinicalEvent?: mainDb_ClinicalEventRelationFilter;
	clinicalEventId?: mainDb_StringFilter;
	createdAt?: mainDb_DateTimeFilter;
	id?: mainDb_StringFilter;
	savedPrescription?: mainDb_JsonFilter;
	updatedAt?: mainDb_DateTimeFilter;
}

export interface mainDb_ClinicalEventRelationFilter {
	is?: mainDb_ClinicalEventWhereInput;
	isNot?: mainDb_ClinicalEventWhereInput;
}

export interface mainDb_DateTimeFilter {
	equals?: string;
	gt?: string;
	gte?: string;
	in?: string[];
	lt?: string;
	lte?: string;
	not?: mainDb_NestedDateTimeFilter;
	notIn?: string[];
}

export interface mainDb_NestedDateTimeFilter {
	equals?: string;
	gt?: string;
	gte?: string;
	in?: string[];
	lt?: string;
	lte?: string;
	not?: mainDb_NestedDateTimeFilter;
	notIn?: string[];
}

export interface mainDb_JsonFilter {
	array_contains?: JSONValue;
	array_ends_with?: JSONValue;
	array_starts_with?: JSONValue;
	equals?: JSONValue;
	gt?: JSONValue;
	gte?: JSONValue;
	lt?: JSONValue;
	lte?: JSONValue;
	not?: JSONValue;
	path?: string[];
	string_contains?: string;
	string_ends_with?: string;
	string_starts_with?: string;
}

export interface mainDb_StringNullableFilter {
	contains?: string;
	endsWith?: string;
	equals?: string;
	gt?: string;
	gte?: string;
	in?: string[];
	lt?: string;
	lte?: string;
	mode?: mainDb_QueryModeValues;
	not?: mainDb_NestedStringNullableFilter;
	notIn?: string[];
	startsWith?: string;
}

export interface mainDb_NestedStringNullableFilter {
	contains?: string;
	endsWith?: string;
	equals?: string;
	gt?: string;
	gte?: string;
	in?: string[];
	lt?: string;
	lte?: string;
	not?: mainDb_NestedStringNullableFilter;
	notIn?: string[];
	startsWith?: string;
}

export interface mainDb_BoolFilter {
	equals?: boolean;
	not?: mainDb_NestedBoolFilter;
}

export interface mainDb_NestedBoolFilter {
	equals?: boolean;
	not?: mainDb_NestedBoolFilter;
}

export interface mainDb_EnumEventTypesFilter {
	equals?: mainDb_EventTypesValues;
	in?: mainDb_EventTypesValues[];
	not?: mainDb_NestedEnumEventTypesFilter;
	notIn?: mainDb_EventTypesValues[];
}

export interface mainDb_NestedEnumEventTypesFilter {
	equals?: mainDb_EventTypesValues;
	in?: mainDb_EventTypesValues[];
	not?: mainDb_NestedEnumEventTypesFilter;
	notIn?: mainDb_EventTypesValues[];
}

export interface mainDb_PatientRelationFilter {
	is?: mainDb_PatientWhereInput;
	isNot?: mainDb_PatientWhereInput;
}

export interface mainDb_PatientWhereInput {
	AND?: mainDb_PatientWhereInput[];
	ClinicalEvent?: mainDb_ClinicalEventListRelationFilter;
	ConsultationList?: mainDb_ConsultationListListRelationFilter;
	NOT?: mainDb_PatientWhereInput[];
	OR?: mainDb_PatientWhereInput[];
	address?: mainDb_StringNullableFilter;
	createdAt?: mainDb_DateTimeFilter;
	ddn?: mainDb_DateTimeFilter;
	deleted?: mainDb_BoolFilter;
	firstName?: mainDb_StringFilter;
	id?: mainDb_StringFilter;
	informationsConfirmed?: mainDb_BoolFilter;
	lastName?: mainDb_StringFilter;
	nTel?: mainDb_StringNullableFilter;
	onTrash?: mainDb_BoolFilter;
	sexe?: mainDb_EnumSexeFilter;
	updated?: mainDb_DateTimeFilter;
}

export interface mainDb_ClinicalEventListRelationFilter {
	every?: mainDb_ClinicalEventWhereInput;
	none?: mainDb_ClinicalEventWhereInput;
	some?: mainDb_ClinicalEventWhereInput;
}

export interface mainDb_ConsultationListListRelationFilter {
	every?: mainDb_ConsultationListWhereInput;
	none?: mainDb_ConsultationListWhereInput;
	some?: mainDb_ConsultationListWhereInput;
}

export interface mainDb_ConsultationListWhereInput {
	AND?: mainDb_ConsultationListWhereInput[];
	NOT?: mainDb_ConsultationListWhereInput[];
	OR?: mainDb_ConsultationListWhereInput[];
	active?: mainDb_BoolFilter;
	consultation?: mainDb_ConsultationRelationFilter;
	consultationId?: mainDb_StringFilter;
	createdAt?: mainDb_DateTimeFilter;
	id?: mainDb_StringFilter;
	patient?: mainDb_PatientRelationFilter;
	patientId?: mainDb_StringFilter;
	updatedAt?: mainDb_DateTimeFilter;
}

export interface mainDb_ConsultationRelationFilter {
	is?: mainDb_ConsultationWhereInput;
	isNot?: mainDb_ConsultationWhereInput;
}

export interface mainDb_ConsultationWhereInput {
	AND?: mainDb_ConsultationWhereInput[];
	ConsultationList?: mainDb_ConsultationListListRelationFilter;
	NOT?: mainDb_ConsultationWhereInput[];
	OR?: mainDb_ConsultationWhereInput[];
	createdAt?: mainDb_DateTimeFilter;
	day?: mainDb_IntFilter;
	id?: mainDb_StringFilter;
	month?: mainDb_IntFilter;
	year?: mainDb_IntFilter;
}

export interface mainDb_IntFilter {
	equals?: number;
	gt?: number;
	gte?: number;
	in?: number[];
	lt?: number;
	lte?: number;
	not?: mainDb_NestedIntFilter;
	notIn?: number[];
}

export interface mainDb_NestedIntFilter {
	equals?: number;
	gt?: number;
	gte?: number;
	in?: number[];
	lt?: number;
	lte?: number;
	not?: mainDb_NestedIntFilter;
	notIn?: number[];
}

export interface mainDb_EnumSexeFilter {
	equals?: mainDb_SexeValues;
	in?: mainDb_SexeValues[];
	not?: mainDb_NestedEnumSexeFilter;
	notIn?: mainDb_SexeValues[];
}

export interface mainDb_NestedEnumSexeFilter {
	equals?: mainDb_SexeValues;
	in?: mainDb_SexeValues[];
	not?: mainDb_NestedEnumSexeFilter;
	notIn?: mainDb_SexeValues[];
}

export interface mainDb_UserRelationFilter {
	is?: mainDb_UserWhereInput;
	isNot?: mainDb_UserWhereInput;
}

export interface mainDb_UserWhereInput {
	AND?: mainDb_UserWhereInput[];
	ClinicalEvent?: mainDb_ClinicalEventListRelationFilter;
	NOT?: mainDb_UserWhereInput[];
	OR?: mainDb_UserWhereInput[];
	avatarUrl?: mainDb_StringNullableFilter;
	createdAt?: mainDb_DateTimeFilter;
	email?: mainDb_StringFilter;
	firstName?: mainDb_StringNullableFilter;
	fullName?: mainDb_StringNullableFilter;
	id?: mainDb_StringFilter;
	lastConnection?: mainDb_DateTimeFilter;
	lastName?: mainDb_StringNullableFilter;
	phoneNumbers?: mainDb_StringNullableListFilter;
	role?: mainDb_EnumRoleFilter;
	typesenseApiKey?: mainDb_StringNullableFilter;
	userId?: mainDb_StringFilter;
}

export interface mainDb_StringNullableListFilter {
	equals?: string[];
	has?: string;
	hasEvery?: string[];
	hasSome?: string[];
	isEmpty?: boolean;
}

export interface mainDb_EnumRoleFilter {
	equals?: mainDb_RoleValues;
	in?: mainDb_RoleValues[];
	not?: mainDb_NestedEnumRoleFilter;
	notIn?: mainDb_RoleValues[];
}

export interface mainDb_NestedEnumRoleFilter {
	equals?: mainDb_RoleValues;
	in?: mainDb_RoleValues[];
	not?: mainDb_NestedEnumRoleFilter;
	notIn?: mainDb_RoleValues[];
}

export interface mainDb_ClinicalEventCreateOrConnectWithoutUserInput {
	create: mainDb_ClinicalEventCreateWithoutUserInput;
	where: mainDb_ClinicalEventWhereUniqueInput;
}

export interface mainDb_ClinicalEventCreateWithoutUserInput {
	Prescription?: mainDb_PrescriptionCreateNestedOneWithoutClinicalEventInput;
	clinicalDiagnosticId?: string;
	createdAt?: string;
	createdReport?: boolean;
	deleted?: boolean;
	dicom?: boolean;
	dicomId?: string;
	empty?: boolean;
	eventType: mainDb_EventTypesValues;
	id?: string;
	onTrash?: boolean;
	patient: mainDb_PatientCreateNestedOneWithoutClinicalEventInput;
	report?: string;
	updatedAt?: string;
}

export interface mainDb_PrescriptionCreateNestedOneWithoutClinicalEventInput {
	connect?: mainDb_PrescriptionWhereUniqueInput;
	connectOrCreate?: mainDb_PrescriptionCreateOrConnectWithoutClinicalEventInput;
	create?: mainDb_PrescriptionCreateWithoutClinicalEventInput;
}

export interface mainDb_PrescriptionWhereUniqueInput {
	AND?: mainDb_PrescriptionWhereInput[];
	NOT?: mainDb_PrescriptionWhereInput[];
	OR?: mainDb_PrescriptionWhereInput[];
	clinicalEvent?: mainDb_ClinicalEventRelationFilter;
	clinicalEventId?: string;
	createdAt?: mainDb_DateTimeFilter;
	id?: string;
	savedPrescription?: mainDb_JsonFilter;
	updatedAt?: mainDb_DateTimeFilter;
}

export interface mainDb_PrescriptionCreateOrConnectWithoutClinicalEventInput {
	create?: mainDb_PrescriptionCreateWithoutClinicalEventInput;
	where?: mainDb_PrescriptionWhereUniqueInput;
}

export interface mainDb_PrescriptionCreateWithoutClinicalEventInput {
	createdAt?: string;
	id?: string;
	savedPrescription?: JSONValue;
	updatedAt?: string;
}

export interface mainDb_PatientCreateNestedOneWithoutClinicalEventInput {
	connect?: mainDb_PatientWhereUniqueInput;
	connectOrCreate?: mainDb_PatientCreateOrConnectWithoutClinicalEventInput;
	create?: mainDb_PatientCreateWithoutClinicalEventInput;
}

export interface mainDb_PatientWhereUniqueInput {
	AND?: mainDb_PatientWhereInput[];
	ClinicalEvent?: mainDb_ClinicalEventListRelationFilter;
	ConsultationList?: mainDb_ConsultationListListRelationFilter;
	NOT?: mainDb_PatientWhereInput[];
	OR?: mainDb_PatientWhereInput[];
	address?: mainDb_StringNullableFilter;
	createdAt?: mainDb_DateTimeFilter;
	ddn?: mainDb_DateTimeFilter;
	deleted?: mainDb_BoolFilter;
	firstName?: mainDb_StringFilter;
	id?: string;
	informationsConfirmed?: mainDb_BoolFilter;
	lastName?: mainDb_StringFilter;
	nTel?: mainDb_StringNullableFilter;
	onTrash?: mainDb_BoolFilter;
	sexe?: mainDb_EnumSexeFilter;
	updated?: mainDb_DateTimeFilter;
}

export interface mainDb_PatientCreateOrConnectWithoutClinicalEventInput {
	create?: mainDb_PatientCreateWithoutClinicalEventInput;
	where?: mainDb_PatientWhereUniqueInput;
}

export interface mainDb_PatientCreateWithoutClinicalEventInput {
	ConsultationList?: mainDb_ConsultationListCreateNestedManyWithoutPatientInput;
	address?: string;
	createdAt?: string;
	ddn: string;
	deleted?: boolean;
	firstName: string;
	id?: string;
	informationsConfirmed?: boolean;
	lastName: string;
	nTel?: string;
	onTrash?: boolean;
	sexe: mainDb_SexeValues;
	updated?: string;
}

export interface mainDb_ConsultationListCreateNestedManyWithoutPatientInput {
	connect?: mainDb_ConsultationListWhereUniqueInput[];
	connectOrCreate?: mainDb_ConsultationListCreateOrConnectWithoutPatientInput[];
	create?: mainDb_ConsultationListCreateWithoutPatientInput[];
	createMany?: mainDb_ConsultationListCreateManyPatientInputEnvelope;
}

export interface mainDb_ConsultationListWhereUniqueInput {
	AND?: mainDb_ConsultationListWhereInput[];
	NOT?: mainDb_ConsultationListWhereInput[];
	OR?: mainDb_ConsultationListWhereInput[];
	active?: mainDb_BoolFilter;
	consultation?: mainDb_ConsultationRelationFilter;
	consultationId?: mainDb_StringFilter;
	createdAt?: mainDb_DateTimeFilter;
	id?: string;
	patient?: mainDb_PatientRelationFilter;
	patientId?: mainDb_StringFilter;
	patientId_consultationId_active?: mainDb_ConsultationListPatientIdConsultationIdActiveCompoundUniqueInput;
	updatedAt?: mainDb_DateTimeFilter;
}

export interface mainDb_ConsultationListPatientIdConsultationIdActiveCompoundUniqueInput {
	active?: boolean;
	consultationId?: string;
	patientId?: string;
}

export interface mainDb_ConsultationListCreateOrConnectWithoutPatientInput {
	create: mainDb_ConsultationListCreateWithoutPatientInput;
	where: mainDb_ConsultationListWhereUniqueInput;
}

export interface mainDb_ConsultationListCreateWithoutPatientInput {
	active?: boolean;
	consultation: mainDb_ConsultationCreateNestedOneWithoutConsultationListInput;
	createdAt?: string;
	id?: string;
	updatedAt?: string;
}

export interface mainDb_ConsultationCreateNestedOneWithoutConsultationListInput {
	connect?: mainDb_ConsultationWhereUniqueInput;
	connectOrCreate?: mainDb_ConsultationCreateOrConnectWithoutConsultationListInput;
	create?: mainDb_ConsultationCreateWithoutConsultationListInput;
}

export interface mainDb_ConsultationWhereUniqueInput {
	AND?: mainDb_ConsultationWhereInput[];
	ConsultationList?: mainDb_ConsultationListListRelationFilter;
	NOT?: mainDb_ConsultationWhereInput[];
	OR?: mainDb_ConsultationWhereInput[];
	createdAt?: mainDb_DateTimeFilter;
	day?: mainDb_IntFilter;
	id?: string;
	month?: mainDb_IntFilter;
	year?: mainDb_IntFilter;
}

export interface mainDb_ConsultationCreateOrConnectWithoutConsultationListInput {
	create?: mainDb_ConsultationCreateWithoutConsultationListInput;
	where?: mainDb_ConsultationWhereUniqueInput;
}

export interface mainDb_ConsultationCreateWithoutConsultationListInput {
	createdAt?: string;
	day: number;
	id?: string;
	month: number;
	year: number;
}

export interface mainDb_ConsultationListCreateManyPatientInputEnvelope {
	data?: mainDb_ConsultationListCreateManyPatientInput[];
	skipDuplicates?: boolean;
}

export interface mainDb_ConsultationListCreateManyPatientInput {
	active?: boolean;
	consultationId: string;
	createdAt?: string;
	id?: string;
	updatedAt?: string;
}

export interface mainDb_ClinicalEventCreateManyUserInputEnvelope {
	data?: mainDb_ClinicalEventCreateManyUserInput[];
	skipDuplicates?: boolean;
}

export interface mainDb_ClinicalEventCreateManyUserInput {
	clinicalDiagnosticId?: string;
	createdAt?: string;
	createdReport?: boolean;
	deleted?: boolean;
	dicom?: boolean;
	dicomId?: string;
	empty?: boolean;
	eventType: mainDb_EventTypesValues;
	id?: string;
	onTrash?: boolean;
	patientId: string;
	report?: string;
	updatedAt?: string;
}

export interface mainDb_UserCreatephoneNumbersInput {
	set?: string[];
}

export interface mainDb_UserUpdateInput {
	ClinicalEvent?: mainDb_ClinicalEventUpdateManyWithoutUserNestedInput;
	avatarUrl?: mainDb_NullableStringFieldUpdateOperationsInput;
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	email?: mainDb_StringFieldUpdateOperationsInput;
	firstName?: mainDb_NullableStringFieldUpdateOperationsInput;
	fullName?: mainDb_NullableStringFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	lastConnection?: mainDb_DateTimeFieldUpdateOperationsInput;
	lastName?: mainDb_NullableStringFieldUpdateOperationsInput;
	phoneNumbers?: mainDb_UserUpdatephoneNumbersInput;
	role?: mainDb_EnumRoleFieldUpdateOperationsInput;
	typesenseApiKey?: mainDb_NullableStringFieldUpdateOperationsInput;
	userId?: mainDb_StringFieldUpdateOperationsInput;
}

export interface mainDb_ClinicalEventUpdateManyWithoutUserNestedInput {
	connect?: mainDb_ClinicalEventWhereUniqueInput[];
	connectOrCreate?: mainDb_ClinicalEventCreateOrConnectWithoutUserInput[];
	create?: mainDb_ClinicalEventCreateWithoutUserInput[];
	createMany?: mainDb_ClinicalEventCreateManyUserInputEnvelope;
	delete?: mainDb_ClinicalEventWhereUniqueInput[];
	deleteMany?: mainDb_ClinicalEventScalarWhereInput[];
	disconnect?: mainDb_ClinicalEventWhereUniqueInput[];
	set?: mainDb_ClinicalEventWhereUniqueInput[];
	update?: mainDb_ClinicalEventUpdateWithWhereUniqueWithoutUserInput[];
	updateMany?: mainDb_ClinicalEventUpdateManyWithWhereWithoutUserInput[];
	upsert?: mainDb_ClinicalEventUpsertWithWhereUniqueWithoutUserInput[];
}

export interface mainDb_ClinicalEventScalarWhereInput {
	AND?: mainDb_ClinicalEventScalarWhereInput[];
	NOT?: mainDb_ClinicalEventScalarWhereInput[];
	OR?: mainDb_ClinicalEventScalarWhereInput[];
	clinicalDiagnosticId?: mainDb_StringNullableFilter;
	createdAt?: mainDb_DateTimeFilter;
	createdReport?: mainDb_BoolFilter;
	deleted?: mainDb_BoolFilter;
	dicom?: mainDb_BoolFilter;
	dicomId?: mainDb_StringNullableFilter;
	empty?: mainDb_BoolFilter;
	eventType?: mainDb_EnumEventTypesFilter;
	id?: mainDb_StringFilter;
	onTrash?: mainDb_BoolFilter;
	patientId?: mainDb_StringFilter;
	report?: mainDb_StringNullableFilter;
	updatedAt?: mainDb_DateTimeFilter;
	userId?: mainDb_StringFilter;
}

export interface mainDb_ClinicalEventUpdateWithWhereUniqueWithoutUserInput {
	data: mainDb_ClinicalEventUpdateWithoutUserInput;
	where: mainDb_ClinicalEventWhereUniqueInput;
}

export interface mainDb_ClinicalEventUpdateWithoutUserInput {
	Prescription?: mainDb_PrescriptionUpdateOneWithoutClinicalEventNestedInput;
	clinicalDiagnosticId?: mainDb_NullableStringFieldUpdateOperationsInput;
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	createdReport?: mainDb_BoolFieldUpdateOperationsInput;
	deleted?: mainDb_BoolFieldUpdateOperationsInput;
	dicom?: mainDb_BoolFieldUpdateOperationsInput;
	dicomId?: mainDb_NullableStringFieldUpdateOperationsInput;
	empty?: mainDb_BoolFieldUpdateOperationsInput;
	eventType?: mainDb_EnumEventTypesFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	onTrash?: mainDb_BoolFieldUpdateOperationsInput;
	patient?: mainDb_PatientUpdateOneRequiredWithoutClinicalEventNestedInput;
	report?: mainDb_NullableStringFieldUpdateOperationsInput;
	updatedAt?: mainDb_DateTimeFieldUpdateOperationsInput;
}

export interface mainDb_PrescriptionUpdateOneWithoutClinicalEventNestedInput {
	connect?: mainDb_PrescriptionWhereUniqueInput;
	connectOrCreate?: mainDb_PrescriptionCreateOrConnectWithoutClinicalEventInput;
	create?: mainDb_PrescriptionCreateWithoutClinicalEventInput;
	delete?: mainDb_PrescriptionWhereInput;
	disconnect?: mainDb_PrescriptionWhereInput;
	update?: mainDb_PrescriptionUpdateToOneWithWhereWithoutClinicalEventInput;
	upsert?: mainDb_PrescriptionUpsertWithoutClinicalEventInput;
}

export interface mainDb_PrescriptionUpdateToOneWithWhereWithoutClinicalEventInput {
	data?: mainDb_PrescriptionUpdateWithoutClinicalEventInput;
	where?: mainDb_PrescriptionWhereInput;
}

export interface mainDb_PrescriptionUpdateWithoutClinicalEventInput {
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	savedPrescription?: JSONValue;
	updatedAt?: mainDb_DateTimeFieldUpdateOperationsInput;
}

export interface mainDb_DateTimeFieldUpdateOperationsInput {
	set?: string;
}

export interface mainDb_StringFieldUpdateOperationsInput {
	set?: string;
}

export interface mainDb_PrescriptionUpsertWithoutClinicalEventInput {
	create?: mainDb_PrescriptionCreateWithoutClinicalEventInput;
	update?: mainDb_PrescriptionUpdateWithoutClinicalEventInput;
	where?: mainDb_PrescriptionWhereInput;
}

export interface mainDb_NullableStringFieldUpdateOperationsInput {
	set?: string;
}

export interface mainDb_BoolFieldUpdateOperationsInput {
	set?: boolean;
}

export interface mainDb_EnumEventTypesFieldUpdateOperationsInput {
	set?: mainDb_EventTypesValues;
}

export interface mainDb_PatientUpdateOneRequiredWithoutClinicalEventNestedInput {
	connect?: mainDb_PatientWhereUniqueInput;
	connectOrCreate?: mainDb_PatientCreateOrConnectWithoutClinicalEventInput;
	create?: mainDb_PatientCreateWithoutClinicalEventInput;
	update?: mainDb_PatientUpdateToOneWithWhereWithoutClinicalEventInput;
	upsert?: mainDb_PatientUpsertWithoutClinicalEventInput;
}

export interface mainDb_PatientUpdateToOneWithWhereWithoutClinicalEventInput {
	data?: mainDb_PatientUpdateWithoutClinicalEventInput;
	where?: mainDb_PatientWhereInput;
}

export interface mainDb_PatientUpdateWithoutClinicalEventInput {
	ConsultationList?: mainDb_ConsultationListUpdateManyWithoutPatientNestedInput;
	address?: mainDb_NullableStringFieldUpdateOperationsInput;
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	ddn?: mainDb_DateTimeFieldUpdateOperationsInput;
	deleted?: mainDb_BoolFieldUpdateOperationsInput;
	firstName?: mainDb_StringFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	informationsConfirmed?: mainDb_BoolFieldUpdateOperationsInput;
	lastName?: mainDb_StringFieldUpdateOperationsInput;
	nTel?: mainDb_NullableStringFieldUpdateOperationsInput;
	onTrash?: mainDb_BoolFieldUpdateOperationsInput;
	sexe?: mainDb_EnumSexeFieldUpdateOperationsInput;
	updated?: mainDb_DateTimeFieldUpdateOperationsInput;
}

export interface mainDb_ConsultationListUpdateManyWithoutPatientNestedInput {
	connect?: mainDb_ConsultationListWhereUniqueInput[];
	connectOrCreate?: mainDb_ConsultationListCreateOrConnectWithoutPatientInput[];
	create?: mainDb_ConsultationListCreateWithoutPatientInput[];
	createMany?: mainDb_ConsultationListCreateManyPatientInputEnvelope;
	delete?: mainDb_ConsultationListWhereUniqueInput[];
	deleteMany?: mainDb_ConsultationListScalarWhereInput[];
	disconnect?: mainDb_ConsultationListWhereUniqueInput[];
	set?: mainDb_ConsultationListWhereUniqueInput[];
	update?: mainDb_ConsultationListUpdateWithWhereUniqueWithoutPatientInput[];
	updateMany?: mainDb_ConsultationListUpdateManyWithWhereWithoutPatientInput[];
	upsert?: mainDb_ConsultationListUpsertWithWhereUniqueWithoutPatientInput[];
}

export interface mainDb_ConsultationListScalarWhereInput {
	AND?: mainDb_ConsultationListScalarWhereInput[];
	NOT?: mainDb_ConsultationListScalarWhereInput[];
	OR?: mainDb_ConsultationListScalarWhereInput[];
	active?: mainDb_BoolFilter;
	consultationId?: mainDb_StringFilter;
	createdAt?: mainDb_DateTimeFilter;
	id?: mainDb_StringFilter;
	patientId?: mainDb_StringFilter;
	updatedAt?: mainDb_DateTimeFilter;
}

export interface mainDb_ConsultationListUpdateWithWhereUniqueWithoutPatientInput {
	data: mainDb_ConsultationListUpdateWithoutPatientInput;
	where: mainDb_ConsultationListWhereUniqueInput;
}

export interface mainDb_ConsultationListUpdateWithoutPatientInput {
	active?: mainDb_BoolFieldUpdateOperationsInput;
	consultation?: mainDb_ConsultationUpdateOneRequiredWithoutConsultationListNestedInput;
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	updatedAt?: mainDb_DateTimeFieldUpdateOperationsInput;
}

export interface mainDb_ConsultationUpdateOneRequiredWithoutConsultationListNestedInput {
	connect?: mainDb_ConsultationWhereUniqueInput;
	connectOrCreate?: mainDb_ConsultationCreateOrConnectWithoutConsultationListInput;
	create?: mainDb_ConsultationCreateWithoutConsultationListInput;
	update?: mainDb_ConsultationUpdateToOneWithWhereWithoutConsultationListInput;
	upsert?: mainDb_ConsultationUpsertWithoutConsultationListInput;
}

export interface mainDb_ConsultationUpdateToOneWithWhereWithoutConsultationListInput {
	data?: mainDb_ConsultationUpdateWithoutConsultationListInput;
	where?: mainDb_ConsultationWhereInput;
}

export interface mainDb_ConsultationUpdateWithoutConsultationListInput {
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	day?: mainDb_IntFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	month?: mainDb_IntFieldUpdateOperationsInput;
	year?: mainDb_IntFieldUpdateOperationsInput;
}

export interface mainDb_IntFieldUpdateOperationsInput {
	decrement?: number;
	divide?: number;
	increment?: number;
	multiply?: number;
	set?: number;
}

export interface mainDb_ConsultationUpsertWithoutConsultationListInput {
	create?: mainDb_ConsultationCreateWithoutConsultationListInput;
	update?: mainDb_ConsultationUpdateWithoutConsultationListInput;
	where?: mainDb_ConsultationWhereInput;
}

export interface mainDb_ConsultationListUpdateManyWithWhereWithoutPatientInput {
	data: mainDb_ConsultationListUpdateManyMutationInput;
	where: mainDb_ConsultationListScalarWhereInput;
}

export interface mainDb_ConsultationListUpdateManyMutationInput {
	active?: mainDb_BoolFieldUpdateOperationsInput;
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	updatedAt?: mainDb_DateTimeFieldUpdateOperationsInput;
}

export interface mainDb_ConsultationListUpsertWithWhereUniqueWithoutPatientInput {
	create: mainDb_ConsultationListCreateWithoutPatientInput;
	update: mainDb_ConsultationListUpdateWithoutPatientInput;
	where: mainDb_ConsultationListWhereUniqueInput;
}

export interface mainDb_EnumSexeFieldUpdateOperationsInput {
	set?: mainDb_SexeValues;
}

export interface mainDb_PatientUpsertWithoutClinicalEventInput {
	create?: mainDb_PatientCreateWithoutClinicalEventInput;
	update?: mainDb_PatientUpdateWithoutClinicalEventInput;
	where?: mainDb_PatientWhereInput;
}

export interface mainDb_ClinicalEventUpdateManyWithWhereWithoutUserInput {
	data: mainDb_ClinicalEventUpdateManyMutationInput;
	where: mainDb_ClinicalEventScalarWhereInput;
}

export interface mainDb_ClinicalEventUpdateManyMutationInput {
	clinicalDiagnosticId?: mainDb_NullableStringFieldUpdateOperationsInput;
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	createdReport?: mainDb_BoolFieldUpdateOperationsInput;
	deleted?: mainDb_BoolFieldUpdateOperationsInput;
	dicom?: mainDb_BoolFieldUpdateOperationsInput;
	dicomId?: mainDb_NullableStringFieldUpdateOperationsInput;
	empty?: mainDb_BoolFieldUpdateOperationsInput;
	eventType?: mainDb_EnumEventTypesFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	onTrash?: mainDb_BoolFieldUpdateOperationsInput;
	report?: mainDb_NullableStringFieldUpdateOperationsInput;
	updatedAt?: mainDb_DateTimeFieldUpdateOperationsInput;
}

export interface mainDb_ClinicalEventUpsertWithWhereUniqueWithoutUserInput {
	create: mainDb_ClinicalEventCreateWithoutUserInput;
	update: mainDb_ClinicalEventUpdateWithoutUserInput;
	where: mainDb_ClinicalEventWhereUniqueInput;
}

export interface mainDb_UserUpdatephoneNumbersInput {
	push?: string[];
	set?: string[];
}

export interface mainDb_EnumRoleFieldUpdateOperationsInput {
	set?: mainDb_RoleValues;
}

export interface mainDb_UserWhereUniqueInput {
	AND?: mainDb_UserWhereInput[];
	ClinicalEvent?: mainDb_ClinicalEventListRelationFilter;
	NOT?: mainDb_UserWhereInput[];
	OR?: mainDb_UserWhereInput[];
	avatarUrl?: mainDb_StringNullableFilter;
	createdAt?: mainDb_DateTimeFilter;
	email?: string;
	firstName?: mainDb_StringNullableFilter;
	fullName?: mainDb_StringNullableFilter;
	id?: string;
	lastConnection?: mainDb_DateTimeFilter;
	lastName?: mainDb_StringNullableFilter;
	phoneNumbers?: mainDb_StringNullableListFilter;
	role?: mainDb_EnumRoleFilter;
	typesenseApiKey?: mainDb_StringNullableFilter;
	userId?: string;
}

export type JSONValue = string | number | boolean | JSONObject | Array<JSONValue>;

export type JSONObject = { [key: string]: JSONValue };

export const mainDb_EventTypes = {
	DIAGNOSTIC: "DIAGNOSTIC",
	PRESCRIPTION: "PRESCRIPTION",
} as const;

export type mainDb_EventTypesValues = (typeof mainDb_EventTypes)[keyof typeof mainDb_EventTypes];

export const mainDb_MobileDeviceType = {
	DOCTOR: "DOCTOR",
	SECRETARY: "SECRETARY",
} as const;

export type mainDb_MobileDeviceTypeValues = (typeof mainDb_MobileDeviceType)[keyof typeof mainDb_MobileDeviceType];

export const mainDb_Sexe = {
	F: "F",
	M: "M",
} as const;

export type mainDb_SexeValues = (typeof mainDb_Sexe)[keyof typeof mainDb_Sexe];

export const mainDb_QueryMode = {
	default: "default",
	insensitive: "insensitive",
} as const;

export type mainDb_QueryModeValues = (typeof mainDb_QueryMode)[keyof typeof mainDb_QueryMode];

export const mainDb_Role = {
	ADMIN: "ADMIN",
	USER: "USER",
} as const;

export type mainDb_RoleValues = (typeof mainDb_Role)[keyof typeof mainDb_Role];

export interface CountriesInput {
	filter?: countries_CountryFilterInput;
}

export interface ClinicalEventsCreateOneClinicalEventInput {
	eventType: mainDb_EventTypesValues;
	patientId: string;
}

export interface ClinicalEventsDeleteOneClinicalEventInput {
	id: string;
}

export interface ClinicalEventsGetClinicalEventInput {
	id: string;
}

export interface ClinicalEventsGetClinicalEventsInput {
	patientId: string;
}

export interface ClinicalEventsMoveOnTrashClinicalEventInput {
	id: string;
}

export interface ClinicalEventsUpdateClinicalEventsSubscriptionInput {
	patientId: string;
}

export interface ConsultationListCheckIfRegistredInput {
	consultationId: string;
	patientId: string;
}

export interface ConsultationListRegisterPatientInput {
	patient_id: string;
}

export interface ConsultationListTodayConsultationInput {
	day: number;
	month: number;
	year: number;
}

export interface ConsultationListUnregisterPatientInput {
	consultationId: string;
	patientId: string;
}

export interface GlobalCloseAllTabsMutationInput {
	message: string;
}

export interface MobileDevicesAddMobileDeviceMutationInput {
	uuid: string;
	accessToken: string;
	expireAt: string;
	mobileDeviceType: mainDb_MobileDeviceTypeValues;
}

export interface MobileDevicesRegisterOneMobileDeviceInput {
	accessToken: string;
	uuid: string;
}

export interface MobileDevicesRemoveMobileDeviceInput {
	id: string;
}

export interface MobileDevicesResetMobileDeviceInput {
	id: string;
	accessToken: string;
}

export interface MobileDevicesSwitchMobileDeviceInput {
	id: string;
	mobileDeviceType: mainDb_MobileDeviceTypeValues;
}

export interface MobileDevicesUpdateMobileDeviceExpirationInput {
	id: string;
	Months: number;
}

export interface PatientsMovePatientFolderToTrashInput {
	id: string;
	onTrash: boolean;
}

export interface PatientsAdd_One_patient_to_indexInput {
	firstName: string;
	lastName: string;
	ddn: string;
	sexe: mainDb_SexeValues;
}

export interface PatientsGetOnePatientInput {
	patientId: string;
}

export interface PatientsGetUpdatedPatientSubscriptionInput {
	id: string;
}

export interface PatientsToggleSelectedTrashPatientInput {
	id: mainDb_StringFilter;
	delete: boolean;
	onTrash: boolean;
}

export interface PatientsUpdateOnePatientInput {
	id: string;
	firstName: string;
	lastName: string;
	sexe: mainDb_SexeValues;
	ddn: string;
	address?: string;
	nTel?: string;
}

export interface TemplatesFetchTemplateInput {
	id: string;
}

export interface TemplatesUpdateTemplateInput {
	id: string;
	template: string;
}

export interface UsersInternalUpdateAuthenticatedUserInput {
	create: mainDb_UserCreateInput;
	update: mainDb_UserUpdateInput;
	where: mainDb_UserWhereUniqueInput;
}

export type AbbreviationsSearchAbreviationInput = ExtractInput<typeof function_AbbreviationsSearchAbreviation>;

export type DrugsSearchDrugsInput = ExtractInput<typeof function_DrugsSearchDrugs>;

export type ClinicalDiagnosticsSearchClinicalDiagnosticsInput = ExtractInput<
	typeof function_ClinicalDiagnosticsSearchClinicalDiagnostics
>;

export type PatientsSearch_patientsInput = ExtractInput<typeof function_PatientsSearch_patients>;

export type UsersSubscribeInput = ExtractInput<typeof function_UsersSubscribe>;

export type UsersUpdateInput = ExtractInput<typeof function_UsersUpdate>;

export interface CountriesInputInternal {
	filter?: countries_CountryFilterInput;
}

export interface ClinicalEventsCreateOneClinicalEventInputInternal {
	eventType: mainDb_EventTypesValues;
	patientId: string;
	userId: string;
}

export interface ClinicalEventsDeleteOneClinicalEventInputInternal {
	id: string;
}

export interface ClinicalEventsGetClinicalEventInputInternal {
	id: string;
}

export interface ClinicalEventsGetClinicalEventsInputInternal {
	patientId: string;
}

export interface ClinicalEventsMoveOnTrashClinicalEventInputInternal {
	id: string;
}

export interface ClinicalEventsUpdateClinicalEventsSubscriptionInputInternal {
	patientId: string;
}

export interface ConsultationListCheckIfRegistredInputInternal {
	consultationId: string;
	patientId: string;
}

export interface ConsultationListRegisterPatientInputInternal {
	patient_id: string;
}

export interface ConsultationListTodayConsultationInputInternal {
	day: number;
	month: number;
	year: number;
}

export interface ConsultationListUnregisterPatientInputInternal {
	consultationId: string;
	patientId: string;
}

export interface GlobalCloseAllTabsMutationInputInternal {
	message: string;
}

export interface MobileDevicesAddMobileDeviceMutationInputInternal {
	uuid: string;
	accessToken: string;
	expireAt: string;
	mobileDeviceType: mainDb_MobileDeviceTypeValues;
}

export interface MobileDevicesRegisterOneMobileDeviceInputInternal {
	accessToken: string;
	uuid: string;
}

export interface MobileDevicesRemoveMobileDeviceInputInternal {
	id: string;
}

export interface MobileDevicesResetMobileDeviceInputInternal {
	id: string;
	accessToken: string;
}

export interface MobileDevicesSwitchMobileDeviceInputInternal {
	id: string;
	mobileDeviceType: mainDb_MobileDeviceTypeValues;
}

export interface MobileDevicesUpdateMobileDeviceExpirationInputInternal {
	id: string;
	Months: number;
}

export interface PatientsMovePatientFolderToTrashInputInternal {
	id: string;
	onTrash: boolean;
}

export interface PatientsAdd_One_patient_to_indexInputInternal {
	firstName: string;
	lastName: string;
	ddn: string;
	sexe: mainDb_SexeValues;
}

export interface PatientsGetOnePatientInputInternal {
	patientId: string;
}

export interface PatientsGetUpdatedPatientSubscriptionInputInternal {
	id: string;
}

export interface PatientsToggleSelectedTrashPatientInputInternal {
	id: mainDb_StringFilter;
	delete: boolean;
	onTrash: boolean;
}

export interface PatientsUpdateOnePatientInputInternal {
	id: string;
	firstName: string;
	lastName: string;
	sexe: mainDb_SexeValues;
	ddn: string;
	address?: string;
	nTel?: string;
}

export interface TemplatesFetchTemplateInputInternal {
	id: string;
}

export interface TemplatesUpdateTemplateInputInternal {
	id: string;
	template: string;
}

export interface UsersInternalUpdateAuthenticatedUserInputInternal {
	create: mainDb_UserCreateInput;
	update: mainDb_UserUpdateInput;
	where: mainDb_UserWhereUniqueInput;
}

export interface AbbreviationsSearchAbreviationInputInternal {
	query_string: string;
}

export interface DrugsSearchDrugsInputInternal {
	query_string: string;
}

export interface ClinicalDiagnosticsSearchClinicalDiagnosticsInputInternal {
	query_string: string;
}

export interface PatientsSearch_patientsInputInternal {
	query_string: string;
	limit_hits?: JSONValue;
	page?: JSONValue;
	per_page?: JSONValue;
	sexe?: JSONValue;
}

export interface UsersSubscribeInputInternal {
	id: string;
}

export interface UsersUpdateInputInternal {
	id: string;
	name: string;
	bio: string;
}

export interface CountriesInputInjected {
	filter?: countries_CountryFilterInput;
}

export interface ClinicalEventsCreateOneClinicalEventInputInjected {
	eventType: mainDb_EventTypesValues;
	patientId: string;
	userId: string;
}

export interface ClinicalEventsDeleteOneClinicalEventInputInjected {
	id: string;
}

export interface ClinicalEventsGetClinicalEventInputInjected {
	id: string;
}

export interface ClinicalEventsGetClinicalEventsInputInjected {
	patientId: string;
}

export interface ClinicalEventsMoveOnTrashClinicalEventInputInjected {
	id: string;
}

export interface ClinicalEventsUpdateClinicalEventsSubscriptionInputInjected {
	patientId: string;
}

export interface ConsultationListCheckIfRegistredInputInjected {
	consultationId: string;
	patientId: string;
}

export interface ConsultationListRegisterPatientInputInjected {
	patient_id: string;
}

export interface ConsultationListTodayConsultationInputInjected {
	day: number;
	month: number;
	year: number;
}

export interface ConsultationListUnregisterPatientInputInjected {
	consultationId: string;
	patientId: string;
}

export interface GlobalCloseAllTabsMutationInputInjected {
	message: string;
}

export interface MobileDevicesAddMobileDeviceMutationInputInjected {
	uuid: string;
	accessToken: string;
	expireAt: string;
	mobileDeviceType: mainDb_MobileDeviceTypeValues;
}

export interface MobileDevicesRegisterOneMobileDeviceInputInjected {
	accessToken: string;
	uuid: string;
}

export interface MobileDevicesRemoveMobileDeviceInputInjected {
	id: string;
}

export interface MobileDevicesResetMobileDeviceInputInjected {
	id: string;
	accessToken: string;
}

export interface MobileDevicesSwitchMobileDeviceInputInjected {
	id: string;
	mobileDeviceType: mainDb_MobileDeviceTypeValues;
}

export interface MobileDevicesUpdateMobileDeviceExpirationInputInjected {
	id: string;
	Months: number;
}

export interface PatientsMovePatientFolderToTrashInputInjected {
	id: string;
	onTrash: boolean;
}

export interface PatientsAdd_One_patient_to_indexInputInjected {
	firstName: string;
	lastName: string;
	ddn: string;
	sexe: mainDb_SexeValues;
}

export interface PatientsGetOnePatientInputInjected {
	patientId: string;
}

export interface PatientsGetUpdatedPatientSubscriptionInputInjected {
	id: string;
}

export interface PatientsToggleSelectedTrashPatientInputInjected {
	id: mainDb_StringFilter;
	delete: boolean;
	onTrash: boolean;
}

export interface PatientsUpdateOnePatientInputInjected {
	id: string;
	firstName: string;
	lastName: string;
	sexe: mainDb_SexeValues;
	ddn: string;
	address?: string;
	nTel?: string;
}

export interface TemplatesFetchTemplateInputInjected {
	id: string;
}

export interface TemplatesUpdateTemplateInputInjected {
	id: string;
	template: string;
}

export interface UsersInternalUpdateAuthenticatedUserInputInjected {
	create: mainDb_UserCreateInput;
	update: mainDb_UserUpdateInput;
	where: mainDb_UserWhereUniqueInput;
}

export interface CountriesResponse {
	data?: CountriesResponseData;
	errors?: GraphQLError[];
}

export interface DrugsIndexDrugsResponse {
	data?: DrugsIndexDrugsResponseData;
	errors?: GraphQLError[];
}

export interface ClinicalDiagnosticsIndexClinicalDiagnosticResponse {
	data?: ClinicalDiagnosticsIndexClinicalDiagnosticResponseData;
	errors?: GraphQLError[];
}

export interface ClinicalEventsCreateOneClinicalEventResponse {
	data?: ClinicalEventsCreateOneClinicalEventResponseData;
	errors?: GraphQLError[];
}

export interface ClinicalEventsDeleteOneClinicalEventResponse {
	data?: ClinicalEventsDeleteOneClinicalEventResponseData;
	errors?: GraphQLError[];
}

export interface ClinicalEventsGetClinicalEventResponse {
	data?: ClinicalEventsGetClinicalEventResponseData;
	errors?: GraphQLError[];
}

export interface ClinicalEventsGetClinicalEventsResponse {
	data?: ClinicalEventsGetClinicalEventsResponseData;
	errors?: GraphQLError[];
}

export interface ClinicalEventsMoveOnTrashClinicalEventResponse {
	data?: ClinicalEventsMoveOnTrashClinicalEventResponseData;
	errors?: GraphQLError[];
}

export interface ClinicalEventsUpdateClinicalEventsSubscriptionResponse {
	data?: ClinicalEventsUpdateClinicalEventsSubscriptionResponseData;
	errors?: GraphQLError[];
}

export interface ConsultationListCheckIfRegistredResponse {
	data?: ConsultationListCheckIfRegistredResponseData;
	errors?: GraphQLError[];
}

export interface ConsultationListRegisterPatientResponse {
	data?: ConsultationListRegisterPatientResponseData;
	errors?: GraphQLError[];
}

export interface ConsultationListTodayConsultationResponse {
	data?: ConsultationListTodayConsultationResponseData;
	errors?: GraphQLError[];
}

export interface ConsultationListUnregisterPatientResponse {
	data?: ConsultationListUnregisterPatientResponseData;
	errors?: GraphQLError[];
}

export interface GlobalCloseAllTabsMutationResponse {
	data?: GlobalCloseAllTabsMutationResponseData;
	errors?: GraphQLError[];
}

export interface GlobalCloseAllTabsSubscriptionResponse {
	data?: GlobalCloseAllTabsSubscriptionResponseData;
	errors?: GraphQLError[];
}

export interface MobileDevicesMobileDevicesQueryResponse {
	data?: MobileDevicesMobileDevicesQueryResponseData;
	errors?: GraphQLError[];
}

export interface MobileDevicesAddMobileDeviceMutationResponse {
	data?: MobileDevicesAddMobileDeviceMutationResponseData;
	errors?: GraphQLError[];
}

export interface MobileDevicesGetAllDevicesSubscriptionResponse {
	data?: MobileDevicesGetAllDevicesSubscriptionResponseData;
	errors?: GraphQLError[];
}

export interface MobileDevicesRegisterOneMobileDeviceResponse {
	data?: MobileDevicesRegisterOneMobileDeviceResponseData;
	errors?: GraphQLError[];
}

export interface MobileDevicesRemoveMobileDeviceResponse {
	data?: MobileDevicesRemoveMobileDeviceResponseData;
	errors?: GraphQLError[];
}

export interface MobileDevicesResetMobileDeviceResponse {
	data?: MobileDevicesResetMobileDeviceResponseData;
	errors?: GraphQLError[];
}

export interface MobileDevicesSwitchMobileDeviceResponse {
	data?: MobileDevicesSwitchMobileDeviceResponseData;
	errors?: GraphQLError[];
}

export interface MobileDevicesTriggerGetAllMobileDevicesSubscriptionResponse {
	data?: MobileDevicesTriggerGetAllMobileDevicesSubscriptionResponseData;
	errors?: GraphQLError[];
}

export interface MobileDevicesUpdateMobileDeviceExpirationResponse {
	data?: MobileDevicesUpdateMobileDeviceExpirationResponseData;
	errors?: GraphQLError[];
}

export interface PatientsMovePatientFolderToTrashResponse {
	data?: PatientsMovePatientFolderToTrashResponseData;
	errors?: GraphQLError[];
}

export interface PatientsAdd_One_patient_to_indexResponse {
	data?: PatientsAdd_One_patient_to_indexResponseData;
	errors?: GraphQLError[];
}

export interface PatientsEmptyTrashResponse {
	data?: PatientsEmptyTrashResponseData;
	errors?: GraphQLError[];
}

export interface PatientsGetOnTrashPatientsResponse {
	data?: PatientsGetOnTrashPatientsResponseData;
	errors?: GraphQLError[];
}

export interface PatientsGetOnePatientResponse {
	data?: PatientsGetOnePatientResponseData;
	errors?: GraphQLError[];
}

export interface PatientsGetUpdatedPatientSubscriptionResponse {
	data?: PatientsGetUpdatedPatientSubscriptionResponseData;
	errors?: GraphQLError[];
}

export interface PatientsIndex_patientsResponse {
	data?: PatientsIndex_patientsResponseData;
	errors?: GraphQLError[];
}

export interface PatientsOnTrashFoldersSubscriptionResponse {
	data?: PatientsOnTrashFoldersSubscriptionResponseData;
	errors?: GraphQLError[];
}

export interface PatientsToggleSelectedTrashPatientResponse {
	data?: PatientsToggleSelectedTrashPatientResponseData;
	errors?: GraphQLError[];
}

export interface PatientsUpdateOnePatientResponse {
	data?: PatientsUpdateOnePatientResponseData;
	errors?: GraphQLError[];
}

export interface TemplatesFetchTemplateResponse {
	data?: TemplatesFetchTemplateResponseData;
	errors?: GraphQLError[];
}

export interface TemplatesGetTemplatesResponse {
	data?: TemplatesGetTemplatesResponseData;
	errors?: GraphQLError[];
}

export interface TemplatesUpdateTemplateResponse {
	data?: TemplatesUpdateTemplateResponseData;
	errors?: GraphQLError[];
}

export interface UsersInternalUpdateAuthenticatedUserResponse {
	data?: UsersInternalUpdateAuthenticatedUserResponseData;
	errors?: GraphQLError[];
}

export interface AbbreviationsSearchAbreviationResponse {
	data?: AbbreviationsSearchAbreviationResponseData;
	errors?: GraphQLError[];
}

export interface DrugsSearchDrugsResponse {
	data?: DrugsSearchDrugsResponseData;
	errors?: GraphQLError[];
}

export interface ClinicalDiagnosticsSearchClinicalDiagnosticsResponse {
	data?: ClinicalDiagnosticsSearchClinicalDiagnosticsResponseData;
	errors?: GraphQLError[];
}

export interface PatientsSearch_patientsResponse {
	data?: PatientsSearch_patientsResponseData;
	errors?: GraphQLError[];
}

export interface UsersGetResponse {
	data?: UsersGetResponseData;
	errors?: GraphQLError[];
}

export interface UsersSubscribeResponse {
	data?: UsersSubscribeResponseData;
	errors?: GraphQLError[];
}

export interface UsersUpdateResponse {
	data?: UsersUpdateResponseData;
	errors?: GraphQLError[];
}

export interface CountriesResponseData {
	countries_countries: {
		code: string;
		name: string;
		capital?: string;
	}[];
}

export interface DrugsIndexDrugsResponseData {
	mainDb_indexDrugs?: boolean;
}

export interface ClinicalDiagnosticsIndexClinicalDiagnosticResponseData {
	mainDb_indexClinicalDiagnostics?: boolean;
}

export interface ClinicalEventsCreateOneClinicalEventResponseData {
	mainDb_createOneClinicalEvent: {
		id: string;
	};
}

export interface ClinicalEventsDeleteOneClinicalEventResponseData {
	mainDb_deleteOneClinicalEvent?: {
		id: string;
	};
}

export interface ClinicalEventsGetClinicalEventResponseData {
	mainDb_clinicalEvent?: {
		id: string;
		eventType: "DIAGNOSTIC" | "PRESCRIPTION";
		updatedAt: string;
		createdReport: boolean;
		report?: string;
		empty: boolean;
		dicomId?: string;
		dicom: boolean;
		user: {
			fullName?: string;
		};
	};
}

export interface ClinicalEventsGetClinicalEventsResponseData {
	mainDb_clinicalEvents: {
		id: string;
		eventType: "DIAGNOSTIC" | "PRESCRIPTION";
		updatedAt: string;
		createdReport: boolean;
		report?: string;
		empty: boolean;
		dicomId?: string;
		dicom: boolean;
		user: {
			fullName?: string;
		};
	}[];
}

export interface ClinicalEventsMoveOnTrashClinicalEventResponseData {
	mainDb_moveClinicalEventToTrash?: {
		id: string;
	};
}

export interface ClinicalEventsUpdateClinicalEventsSubscriptionResponseData {
	mainDb_updateClinicalEventsSubscription: {
		id: string;
		eventType: "DIAGNOSTIC" | "PRESCRIPTION";
		updatedAt: string;
		report?: string;
		empty: boolean;
		dicomId?: string;
		dicom: boolean;
		user: {
			fullName?: string;
		};
	}[];
}

export interface ConsultationListCheckIfRegistredResponseData {
	mainDb_consultationList?: {
		id: string;
	};
}

export interface ConsultationListRegisterPatientResponseData {
	mainDb_registerPatient: string;
}

export interface ConsultationListTodayConsultationResponseData {
	mainDb_findFirstConsultation?: {
		id: string;
	};
}

export interface ConsultationListUnregisterPatientResponseData {
	mainDb_deleteOneConsultationList?: {
		id: string;
	};
}

export interface GlobalCloseAllTabsMutationResponseData {
	mainDb_closeAllTabs: boolean;
}

export interface GlobalCloseAllTabsSubscriptionResponseData {
	mainDb_closeAllTabs: {
		message: string;
	};
}

export interface MobileDevicesMobileDevicesQueryResponseData {
	mainDb_mobileDevices: {
		id: string;
		accessToken: string;
		connected: boolean;
		expireAt: string;
		mobileDeviceType: "DOCTOR" | "SECRETARY";
		uuid: string;
	}[];
}

export interface MobileDevicesAddMobileDeviceMutationResponseData {
	mainDb_createOneMobileDevice: {
		id: string;
	};
}

export interface MobileDevicesGetAllDevicesSubscriptionResponseData {
	mainDb_getMobileDevicesList: {
		id: string;
		accessToken: string;
		connected: boolean;
		expireAt: string;
		mobileDeviceType: "DOCTOR" | "SECRETARY";
		uuid: string;
	}[];
}

export interface MobileDevicesRegisterOneMobileDeviceResponseData {
	mainDb_registerOneMobileDevice?: {
		uuid: string;
	};
}

export interface MobileDevicesRemoveMobileDeviceResponseData {
	mainDb_deleteOneMobileDevice?: {
		id: string;
	};
}

export interface MobileDevicesResetMobileDeviceResponseData {
	mainDb_updateOneMobileDevice?: {
		id: string;
	};
}

export interface MobileDevicesSwitchMobileDeviceResponseData {
	mainDb_switchMobileDevice?: boolean;
}

export interface MobileDevicesTriggerGetAllMobileDevicesSubscriptionResponseData {
	mainDb_triggerGetAllMobileDevicesSubscription: boolean;
}

export interface MobileDevicesUpdateMobileDeviceExpirationResponseData {
	mainDb_changeExpirationMobileDeviceResolver?: boolean;
}

export interface PatientsMovePatientFolderToTrashResponseData {
	mainDb_movePatientFolderToTrash?: {
		id: string;
	};
}

export interface PatientsAdd_One_patient_to_indexResponseData {
	mainDb_AddOnePatientToIndex: {
		id: string;
	};
}

export interface PatientsEmptyTrashResponseData {
	mainDb_emptyTrashMutation: boolean;
}

export interface PatientsGetOnTrashPatientsResponseData {
	mainDb_patients: {
		id: string;
		patientFullName: string;
		sexe: "F" | "M";
		updated: string;
	}[];
}

export interface PatientsGetOnePatientResponseData {
	mainDb_getPatient?: {
		id: string;
		firstName: string;
		lastName: string;
		sexe: "F" | "M";
		ddn: string;
		deleted: boolean;
		onTrash: boolean;
		patientFullName: string;
		informationsConfirmed: boolean;
		nTel?: string;
	};
}

export interface PatientsGetUpdatedPatientSubscriptionResponseData {
	mainDb_getUpdatedPatient: {
		id: string;
		firstName: string;
		lastName: string;
		sexe: "F" | "M";
		ddn: string;
		deleted: boolean;
		onTrash: boolean;
		patientFullName: string;
		informationsConfirmed: boolean;
		nTel?: string;
	};
}

export interface PatientsIndex_patientsResponseData {
	mainDb_indexPatients?: boolean;
}

export interface PatientsOnTrashFoldersSubscriptionResponseData {
	mainDb_emptyTrashSubscription: {
		id: string;
		patientFullName: string;
		sexe: "F" | "M";
		updated: string;
	}[];
}

export interface PatientsToggleSelectedTrashPatientResponseData {
	mainDb_toggleSelectedTrashMutation: {
		count: number;
	};
}

export interface PatientsUpdateOnePatientResponseData {
	mainDb_updateOnePatient?: {
		id: string;
	};
}

export interface TemplatesFetchTemplateResponseData {
	mainDb_documentTemplate?: {
		template: string;
		eventType: "DIAGNOSTIC" | "PRESCRIPTION";
		id: string;
	};
}

export interface TemplatesGetTemplatesResponseData {
	mainDb_documentTemplates: {
		eventType: "DIAGNOSTIC" | "PRESCRIPTION";
		id: string;
		empty: boolean;
	}[];
}

export interface TemplatesUpdateTemplateResponseData {
	mainDb_updateOneDocumentTemplate?: {
		id: string;
	};
}

export interface UsersInternalUpdateAuthenticatedUserResponseData {
	mainDb_upsertOneUser: {
		id: string;
		avatarUrl?: string;
	};
}

export type AbbreviationsSearchAbreviationResponseData = ExtractResponse<
	typeof function_AbbreviationsSearchAbreviation
>;

export type DrugsSearchDrugsResponseData = ExtractResponse<typeof function_DrugsSearchDrugs>;

export type ClinicalDiagnosticsSearchClinicalDiagnosticsResponseData = ExtractResponse<
	typeof function_ClinicalDiagnosticsSearchClinicalDiagnostics
>;

export type PatientsSearch_patientsResponseData = ExtractResponse<typeof function_PatientsSearch_patients>;

export type UsersGetResponseData = ExtractResponse<typeof function_UsersGet>;

export type UsersSubscribeResponseData = ExtractResponse<typeof function_UsersSubscribe>;

export type UsersUpdateResponseData = ExtractResponse<typeof function_UsersUpdate>;
