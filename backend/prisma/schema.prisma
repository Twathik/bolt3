datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator gen {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/@generated"
}

enum Role {
  USER
  ADMIN
}

enum Sexe {
  M
  F
}

enum MobileDeviceType {
  DOCTOR
  SECRETARY
}

enum EventTypes {
  DIAGNOSTIC
  PRESCRIPTION
  GENERAL_SONO
}

model User {
  id              String          @id @default(uuid())
  email           String          @unique
  userId          String          @unique
  lastName        String?
  firstName       String?
  fullName        String?
  avatarUrl       String?
  role            Role            @default(USER)
  phoneNumbers    String[]
  lastConnection  DateTime        @updatedAt
  typesenseApiKey String?
  createdAt       DateTime        @default(now())
  ClinicalEvent   ClinicalEvent[]

  @@index([role])
}

model Setting {
  id                             String @id @default(uuid())
  allowedMobileDevices_doctors   Int    @default(1)
  allowedMobileDevices_secretary Int    @default(1)
}

model MobileDevice {
  id          String @id @default(uuid())
  uuid        String
  accessToken String @unique

  mobileDeviceType MobileDeviceType @default(SECRETARY)
  expireAt         DateTime
  connected        Boolean          @default(false)

  @@unique([uuid, accessToken])
}

model Patient {
  id        String   @id @default(uuid())
  lastName  String
  firstName String
  ddn       DateTime
  sexe      Sexe
  nTel      String?
  address   String?

  createdAt DateTime @default(now())
  updated   DateTime @updatedAt

  deleted               Boolean            @default(false)
  onTrash               Boolean            @default(false)
  informationsConfirmed Boolean            @default(false)
  ConsultationList      ConsultationList[]
  ClinicalEvent         ClinicalEvent[]

  @@index([sexe])
}

model Consultation {
  id               String             @id @default(uuid())
  day              Int
  month            Int
  year             Int
  createdAt        DateTime           @default(now())
  ConsultationList ConsultationList[]
}

model ConsultationList {
  id             String       @id @default(uuid())
  patient        Patient      @relation(fields: [patientId], references: [id])
  patientId      String
  consultation   Consultation @relation(fields: [consultationId], references: [id])
  consultationId String
  active         Boolean      @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([patientId, consultationId, active])
}

model ClinicalEvent {
  id        String     @id @default(uuid())
  eventType EventTypes

  user   User   @relation(fields: [userId], references: [id])
  userId String

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String

  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  onTrash              Boolean       @default(false)
  deleted              Boolean       @default(false)
  empty                Boolean       @default(true)
  createdReport        Boolean       @default(false)
  report               String?       @db.Text
  dicom                Boolean       @default(false)
  dicomId              String?
  clinicalDiagnosticId String?
  Prescription         Prescription?
}

model Prescription {
  id                String        @id @default(uuid())
  clinicalEvent     ClinicalEvent @relation(fields: [clinicalEventId], references: [id], onDelete: Cascade)
  clinicalEventId   String        @unique
  savedPrescription Json          @default("{}")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model DocumentTemplate {
  id        String     @id @default(uuid())
  eventType EventTypes @unique
  template  String     @db.Text
  empty     Boolean    @default(true)
}
