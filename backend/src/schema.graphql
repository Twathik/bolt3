# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateClinicalEvent {
  _count: ClinicalEventCountAggregate
  _max: ClinicalEventMaxAggregate
  _min: ClinicalEventMinAggregate
}

type AggregateConsultationList {
  _count: ConsultationListCountAggregate
  _max: ConsultationListMaxAggregate
  _min: ConsultationListMinAggregate
}

type AggregateDocumentStore {
  _count: DocumentStoreCountAggregate
  _max: DocumentStoreMaxAggregate
  _min: DocumentStoreMinAggregate
}

type AggregateDocumentTemplate {
  _avg: DocumentTemplateAvgAggregate
  _count: DocumentTemplateCountAggregate
  _max: DocumentTemplateMaxAggregate
  _min: DocumentTemplateMinAggregate
  _sum: DocumentTemplateSumAggregate
}

type AggregateEconomizer {
  _count: EconomizerCountAggregate
  _max: EconomizerMaxAggregate
  _min: EconomizerMinAggregate
}

type AggregateMobileDevice {
  _count: MobileDeviceCountAggregate
  _max: MobileDeviceMaxAggregate
  _min: MobileDeviceMinAggregate
}

type AggregateModality {
  _avg: ModalityAvgAggregate
  _count: ModalityCountAggregate
  _max: ModalityMaxAggregate
  _min: ModalityMinAggregate
  _sum: ModalitySumAggregate
}

type AggregatePatient {
  _avg: PatientAvgAggregate
  _count: PatientCountAggregate
  _max: PatientMaxAggregate
  _min: PatientMinAggregate
  _sum: PatientSumAggregate
}

type AggregatePatientScannedDocument {
  _count: PatientScannedDocumentCountAggregate
  _max: PatientScannedDocumentMaxAggregate
  _min: PatientScannedDocumentMinAggregate
}

type AggregatePrescription {
  _count: PrescriptionCountAggregate
  _max: PrescriptionMaxAggregate
  _min: PrescriptionMinAggregate
}

type AggregateSetting {
  _avg: SettingAvgAggregate
  _count: SettingCountAggregate
  _max: SettingMaxAggregate
  _min: SettingMinAggregate
  _sum: SettingSumAggregate
}

type AggregateUser {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
}

type AggregateWorkingList {
  _count: WorkingListCountAggregate
  _max: WorkingListMaxAggregate
  _min: WorkingListMinAggregate
}

type AppSubscriptionModel {
  appPayload: String!
  messageId: String!
  type: AppSubscriptionPayloadType!
}

""""""
enum AppSubscriptionPayloadType {
  closeAllTabs
  consultationLists
  emptyTrash
  focusedDocument
  mobileDeviceUpdate
  modalityUpdate
  patientUpdate
  secondaryDisplay
  workingLists
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Byte

input BytesNullableFilter {
  equals: Byte
  in: [Byte!]
  not: NestedBytesNullableFilter
  notIn: [Byte!]
}

input BytesNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedBytesNullableFilter
  _min: NestedBytesNullableFilter
  equals: Byte
  in: [Byte!]
  not: NestedBytesNullableWithAggregatesFilter
  notIn: [Byte!]
}

type ClinicalEvent {
  Prescription(where: PrescriptionWhereInput): Prescription
  WorkingList(cursor: WorkingListWhereUniqueInput, distinct: [WorkingListScalarFieldEnum!], orderBy: [WorkingListOrderByWithRelationInput!], skip: Int, take: Int, where: WorkingListWhereInput): [WorkingList!]!
  _count: ClinicalEventCount
  clinicalDiagnosticId: String
  createdAt: DateTimeISO!
  deleted: Boolean!
  deletedByUserId: String
  deletedReport: String
  dicom: Boolean!
  dicomId: String
  eventCategory: EventCategory!
  eventType: EventTypes!
  getConfigurationFile: [DataTableSectionModel!]!
  getEconomizers: [Economizer!]!
  getModalities: [Modality!]!
  id: String!
  patient: Patient!
  patientId: String!
  updatedAt: DateTimeISO!
  user: User!
  userId: String!
}

type ClinicalEventCount {
  WorkingList(where: WorkingListWhereInput): Int!
}

type ClinicalEventCountAggregate {
  _all: Int!
  clinicalDiagnosticId: Int!
  createdAt: Int!
  deleted: Int!
  deletedByUserId: Int!
  deletedReport: Int!
  dicom: Int!
  dicomId: Int!
  eventCategory: Int!
  eventType: Int!
  id: Int!
  patientId: Int!
  updatedAt: Int!
  userId: Int!
}

input ClinicalEventCountOrderByAggregateInput {
  clinicalDiagnosticId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  deletedByUserId: SortOrder
  deletedReport: SortOrder
  dicom: SortOrder
  dicomId: SortOrder
  eventCategory: SortOrder
  eventType: SortOrder
  id: SortOrder
  patientId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ClinicalEventCreateInput {
  Prescription: PrescriptionCreateNestedOneWithoutClinicalEventInput
  WorkingList: WorkingListCreateNestedManyWithoutClinicalEventInput
  clinicalDiagnosticId: String
  createdAt: DateTimeISO
  deleted: Boolean
  deletedByUserId: String
  deletedReport: String
  dicom: Boolean
  dicomId: String
  eventCategory: EventCategory
  eventType: EventTypes!
  id: String
  patient: PatientCreateNestedOneWithoutClinicalEventInput!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutClinicalEventInput!
}

input ClinicalEventCreateManyInput {
  clinicalDiagnosticId: String
  createdAt: DateTimeISO
  deleted: Boolean
  deletedByUserId: String
  deletedReport: String
  dicom: Boolean
  dicomId: String
  eventCategory: EventCategory
  eventType: EventTypes!
  id: String
  patientId: String!
  updatedAt: DateTimeISO
  userId: String!
}

input ClinicalEventCreateManyPatientInput {
  clinicalDiagnosticId: String
  createdAt: DateTimeISO
  deleted: Boolean
  deletedByUserId: String
  deletedReport: String
  dicom: Boolean
  dicomId: String
  eventCategory: EventCategory
  eventType: EventTypes!
  id: String
  updatedAt: DateTimeISO
  userId: String!
}

input ClinicalEventCreateManyPatientInputEnvelope {
  data: [ClinicalEventCreateManyPatientInput!]!
  skipDuplicates: Boolean
}

input ClinicalEventCreateManyUserInput {
  clinicalDiagnosticId: String
  createdAt: DateTimeISO
  deleted: Boolean
  deletedByUserId: String
  deletedReport: String
  dicom: Boolean
  dicomId: String
  eventCategory: EventCategory
  eventType: EventTypes!
  id: String
  patientId: String!
  updatedAt: DateTimeISO
}

input ClinicalEventCreateManyUserInputEnvelope {
  data: [ClinicalEventCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ClinicalEventCreateNestedManyWithoutPatientInput {
  connect: [ClinicalEventWhereUniqueInput!]
  connectOrCreate: [ClinicalEventCreateOrConnectWithoutPatientInput!]
  create: [ClinicalEventCreateWithoutPatientInput!]
  createMany: ClinicalEventCreateManyPatientInputEnvelope
}

input ClinicalEventCreateNestedManyWithoutUserInput {
  connect: [ClinicalEventWhereUniqueInput!]
  connectOrCreate: [ClinicalEventCreateOrConnectWithoutUserInput!]
  create: [ClinicalEventCreateWithoutUserInput!]
  createMany: ClinicalEventCreateManyUserInputEnvelope
}

input ClinicalEventCreateNestedOneWithoutPrescriptionInput {
  connect: ClinicalEventWhereUniqueInput
  connectOrCreate: ClinicalEventCreateOrConnectWithoutPrescriptionInput
  create: ClinicalEventCreateWithoutPrescriptionInput
}

input ClinicalEventCreateNestedOneWithoutWorkingListInput {
  connect: ClinicalEventWhereUniqueInput
  connectOrCreate: ClinicalEventCreateOrConnectWithoutWorkingListInput
  create: ClinicalEventCreateWithoutWorkingListInput
}

input ClinicalEventCreateOrConnectWithoutPatientInput {
  create: ClinicalEventCreateWithoutPatientInput!
  where: ClinicalEventWhereUniqueInput!
}

input ClinicalEventCreateOrConnectWithoutPrescriptionInput {
  create: ClinicalEventCreateWithoutPrescriptionInput!
  where: ClinicalEventWhereUniqueInput!
}

input ClinicalEventCreateOrConnectWithoutUserInput {
  create: ClinicalEventCreateWithoutUserInput!
  where: ClinicalEventWhereUniqueInput!
}

input ClinicalEventCreateOrConnectWithoutWorkingListInput {
  create: ClinicalEventCreateWithoutWorkingListInput!
  where: ClinicalEventWhereUniqueInput!
}

input ClinicalEventCreateWithoutPatientInput {
  Prescription: PrescriptionCreateNestedOneWithoutClinicalEventInput
  WorkingList: WorkingListCreateNestedManyWithoutClinicalEventInput
  clinicalDiagnosticId: String
  createdAt: DateTimeISO
  deleted: Boolean
  deletedByUserId: String
  deletedReport: String
  dicom: Boolean
  dicomId: String
  eventCategory: EventCategory
  eventType: EventTypes!
  id: String
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutClinicalEventInput!
}

input ClinicalEventCreateWithoutPrescriptionInput {
  WorkingList: WorkingListCreateNestedManyWithoutClinicalEventInput
  clinicalDiagnosticId: String
  createdAt: DateTimeISO
  deleted: Boolean
  deletedByUserId: String
  deletedReport: String
  dicom: Boolean
  dicomId: String
  eventCategory: EventCategory
  eventType: EventTypes!
  id: String
  patient: PatientCreateNestedOneWithoutClinicalEventInput!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutClinicalEventInput!
}

input ClinicalEventCreateWithoutUserInput {
  Prescription: PrescriptionCreateNestedOneWithoutClinicalEventInput
  WorkingList: WorkingListCreateNestedManyWithoutClinicalEventInput
  clinicalDiagnosticId: String
  createdAt: DateTimeISO
  deleted: Boolean
  deletedByUserId: String
  deletedReport: String
  dicom: Boolean
  dicomId: String
  eventCategory: EventCategory
  eventType: EventTypes!
  id: String
  patient: PatientCreateNestedOneWithoutClinicalEventInput!
  updatedAt: DateTimeISO
}

input ClinicalEventCreateWithoutWorkingListInput {
  Prescription: PrescriptionCreateNestedOneWithoutClinicalEventInput
  clinicalDiagnosticId: String
  createdAt: DateTimeISO
  deleted: Boolean
  deletedByUserId: String
  deletedReport: String
  dicom: Boolean
  dicomId: String
  eventCategory: EventCategory
  eventType: EventTypes!
  id: String
  patient: PatientCreateNestedOneWithoutClinicalEventInput!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutClinicalEventInput!
}

type ClinicalEventGroupBy {
  _count: ClinicalEventCountAggregate
  _max: ClinicalEventMaxAggregate
  _min: ClinicalEventMinAggregate
  clinicalDiagnosticId: String
  createdAt: DateTimeISO!
  deleted: Boolean!
  deletedByUserId: String
  deletedReport: String
  dicom: Boolean!
  dicomId: String
  eventCategory: EventCategory!
  eventType: EventTypes!
  id: String!
  patientId: String!
  updatedAt: DateTimeISO!
  userId: String!
}

input ClinicalEventListRelationFilter {
  every: ClinicalEventWhereInput
  none: ClinicalEventWhereInput
  some: ClinicalEventWhereInput
}

type ClinicalEventMaxAggregate {
  clinicalDiagnosticId: String
  createdAt: DateTimeISO
  deleted: Boolean
  deletedByUserId: String
  deletedReport: String
  dicom: Boolean
  dicomId: String
  eventCategory: EventCategory
  eventType: EventTypes
  id: String
  patientId: String
  updatedAt: DateTimeISO
  userId: String
}

input ClinicalEventMaxOrderByAggregateInput {
  clinicalDiagnosticId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  deletedByUserId: SortOrder
  deletedReport: SortOrder
  dicom: SortOrder
  dicomId: SortOrder
  eventCategory: SortOrder
  eventType: SortOrder
  id: SortOrder
  patientId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type ClinicalEventMinAggregate {
  clinicalDiagnosticId: String
  createdAt: DateTimeISO
  deleted: Boolean
  deletedByUserId: String
  deletedReport: String
  dicom: Boolean
  dicomId: String
  eventCategory: EventCategory
  eventType: EventTypes
  id: String
  patientId: String
  updatedAt: DateTimeISO
  userId: String
}

input ClinicalEventMinOrderByAggregateInput {
  clinicalDiagnosticId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  deletedByUserId: SortOrder
  deletedReport: SortOrder
  dicom: SortOrder
  dicomId: SortOrder
  eventCategory: SortOrder
  eventType: SortOrder
  id: SortOrder
  patientId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ClinicalEventOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClinicalEventOrderByWithAggregationInput {
  _count: ClinicalEventCountOrderByAggregateInput
  _max: ClinicalEventMaxOrderByAggregateInput
  _min: ClinicalEventMinOrderByAggregateInput
  clinicalDiagnosticId: SortOrderInput
  createdAt: SortOrder
  deleted: SortOrder
  deletedByUserId: SortOrderInput
  deletedReport: SortOrderInput
  dicom: SortOrder
  dicomId: SortOrderInput
  eventCategory: SortOrder
  eventType: SortOrder
  id: SortOrder
  patientId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ClinicalEventOrderByWithRelationInput {
  Prescription: PrescriptionOrderByWithRelationInput
  WorkingList: WorkingListOrderByRelationAggregateInput
  clinicalDiagnosticId: SortOrderInput
  createdAt: SortOrder
  deleted: SortOrder
  deletedByUserId: SortOrderInput
  deletedReport: SortOrderInput
  dicom: SortOrder
  dicomId: SortOrderInput
  eventCategory: SortOrder
  eventType: SortOrder
  id: SortOrder
  patient: PatientOrderByWithRelationInput
  patientId: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input ClinicalEventRelationFilter {
  is: ClinicalEventWhereInput
  isNot: ClinicalEventWhereInput
}

enum ClinicalEventScalarFieldEnum {
  clinicalDiagnosticId
  createdAt
  deleted
  deletedByUserId
  deletedReport
  dicom
  dicomId
  eventCategory
  eventType
  id
  patientId
  updatedAt
  userId
}

input ClinicalEventScalarWhereInput {
  AND: [ClinicalEventScalarWhereInput!]
  NOT: [ClinicalEventScalarWhereInput!]
  OR: [ClinicalEventScalarWhereInput!]
  clinicalDiagnosticId: StringNullableFilter
  createdAt: DateTimeFilter
  deleted: BoolFilter
  deletedByUserId: StringNullableFilter
  deletedReport: StringNullableFilter
  dicom: BoolFilter
  dicomId: StringNullableFilter
  eventCategory: EnumEventCategoryFilter
  eventType: EnumEventTypesFilter
  id: StringFilter
  patientId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input ClinicalEventScalarWhereWithAggregatesInput {
  AND: [ClinicalEventScalarWhereWithAggregatesInput!]
  NOT: [ClinicalEventScalarWhereWithAggregatesInput!]
  OR: [ClinicalEventScalarWhereWithAggregatesInput!]
  clinicalDiagnosticId: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deleted: BoolWithAggregatesFilter
  deletedByUserId: StringNullableWithAggregatesFilter
  deletedReport: StringNullableWithAggregatesFilter
  dicom: BoolWithAggregatesFilter
  dicomId: StringNullableWithAggregatesFilter
  eventCategory: EnumEventCategoryWithAggregatesFilter
  eventType: EnumEventTypesWithAggregatesFilter
  id: StringWithAggregatesFilter
  patientId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input ClinicalEventUpdateInput {
  Prescription: PrescriptionUpdateOneWithoutClinicalEventNestedInput
  WorkingList: WorkingListUpdateManyWithoutClinicalEventNestedInput
  clinicalDiagnosticId: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  deletedByUserId: NullableStringFieldUpdateOperationsInput
  deletedReport: NullableStringFieldUpdateOperationsInput
  dicom: BoolFieldUpdateOperationsInput
  dicomId: NullableStringFieldUpdateOperationsInput
  eventCategory: EnumEventCategoryFieldUpdateOperationsInput
  eventType: EnumEventTypesFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  patient: PatientUpdateOneRequiredWithoutClinicalEventNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutClinicalEventNestedInput
}

input ClinicalEventUpdateManyMutationInput {
  clinicalDiagnosticId: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  deletedByUserId: NullableStringFieldUpdateOperationsInput
  deletedReport: NullableStringFieldUpdateOperationsInput
  dicom: BoolFieldUpdateOperationsInput
  dicomId: NullableStringFieldUpdateOperationsInput
  eventCategory: EnumEventCategoryFieldUpdateOperationsInput
  eventType: EnumEventTypesFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClinicalEventUpdateManyWithWhereWithoutPatientInput {
  data: ClinicalEventUpdateManyMutationInput!
  where: ClinicalEventScalarWhereInput!
}

input ClinicalEventUpdateManyWithWhereWithoutUserInput {
  data: ClinicalEventUpdateManyMutationInput!
  where: ClinicalEventScalarWhereInput!
}

input ClinicalEventUpdateManyWithoutPatientNestedInput {
  connect: [ClinicalEventWhereUniqueInput!]
  connectOrCreate: [ClinicalEventCreateOrConnectWithoutPatientInput!]
  create: [ClinicalEventCreateWithoutPatientInput!]
  createMany: ClinicalEventCreateManyPatientInputEnvelope
  delete: [ClinicalEventWhereUniqueInput!]
  deleteMany: [ClinicalEventScalarWhereInput!]
  disconnect: [ClinicalEventWhereUniqueInput!]
  set: [ClinicalEventWhereUniqueInput!]
  update: [ClinicalEventUpdateWithWhereUniqueWithoutPatientInput!]
  updateMany: [ClinicalEventUpdateManyWithWhereWithoutPatientInput!]
  upsert: [ClinicalEventUpsertWithWhereUniqueWithoutPatientInput!]
}

input ClinicalEventUpdateManyWithoutUserNestedInput {
  connect: [ClinicalEventWhereUniqueInput!]
  connectOrCreate: [ClinicalEventCreateOrConnectWithoutUserInput!]
  create: [ClinicalEventCreateWithoutUserInput!]
  createMany: ClinicalEventCreateManyUserInputEnvelope
  delete: [ClinicalEventWhereUniqueInput!]
  deleteMany: [ClinicalEventScalarWhereInput!]
  disconnect: [ClinicalEventWhereUniqueInput!]
  set: [ClinicalEventWhereUniqueInput!]
  update: [ClinicalEventUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ClinicalEventUpdateManyWithWhereWithoutUserInput!]
  upsert: [ClinicalEventUpsertWithWhereUniqueWithoutUserInput!]
}

input ClinicalEventUpdateOneRequiredWithoutPrescriptionNestedInput {
  connect: ClinicalEventWhereUniqueInput
  connectOrCreate: ClinicalEventCreateOrConnectWithoutPrescriptionInput
  create: ClinicalEventCreateWithoutPrescriptionInput
  update: ClinicalEventUpdateToOneWithWhereWithoutPrescriptionInput
  upsert: ClinicalEventUpsertWithoutPrescriptionInput
}

input ClinicalEventUpdateOneRequiredWithoutWorkingListNestedInput {
  connect: ClinicalEventWhereUniqueInput
  connectOrCreate: ClinicalEventCreateOrConnectWithoutWorkingListInput
  create: ClinicalEventCreateWithoutWorkingListInput
  update: ClinicalEventUpdateToOneWithWhereWithoutWorkingListInput
  upsert: ClinicalEventUpsertWithoutWorkingListInput
}

input ClinicalEventUpdateToOneWithWhereWithoutPrescriptionInput {
  data: ClinicalEventUpdateWithoutPrescriptionInput!
  where: ClinicalEventWhereInput
}

input ClinicalEventUpdateToOneWithWhereWithoutWorkingListInput {
  data: ClinicalEventUpdateWithoutWorkingListInput!
  where: ClinicalEventWhereInput
}

input ClinicalEventUpdateWithWhereUniqueWithoutPatientInput {
  data: ClinicalEventUpdateWithoutPatientInput!
  where: ClinicalEventWhereUniqueInput!
}

input ClinicalEventUpdateWithWhereUniqueWithoutUserInput {
  data: ClinicalEventUpdateWithoutUserInput!
  where: ClinicalEventWhereUniqueInput!
}

input ClinicalEventUpdateWithoutPatientInput {
  Prescription: PrescriptionUpdateOneWithoutClinicalEventNestedInput
  WorkingList: WorkingListUpdateManyWithoutClinicalEventNestedInput
  clinicalDiagnosticId: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  deletedByUserId: NullableStringFieldUpdateOperationsInput
  deletedReport: NullableStringFieldUpdateOperationsInput
  dicom: BoolFieldUpdateOperationsInput
  dicomId: NullableStringFieldUpdateOperationsInput
  eventCategory: EnumEventCategoryFieldUpdateOperationsInput
  eventType: EnumEventTypesFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutClinicalEventNestedInput
}

input ClinicalEventUpdateWithoutPrescriptionInput {
  WorkingList: WorkingListUpdateManyWithoutClinicalEventNestedInput
  clinicalDiagnosticId: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  deletedByUserId: NullableStringFieldUpdateOperationsInput
  deletedReport: NullableStringFieldUpdateOperationsInput
  dicom: BoolFieldUpdateOperationsInput
  dicomId: NullableStringFieldUpdateOperationsInput
  eventCategory: EnumEventCategoryFieldUpdateOperationsInput
  eventType: EnumEventTypesFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  patient: PatientUpdateOneRequiredWithoutClinicalEventNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutClinicalEventNestedInput
}

input ClinicalEventUpdateWithoutUserInput {
  Prescription: PrescriptionUpdateOneWithoutClinicalEventNestedInput
  WorkingList: WorkingListUpdateManyWithoutClinicalEventNestedInput
  clinicalDiagnosticId: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  deletedByUserId: NullableStringFieldUpdateOperationsInput
  deletedReport: NullableStringFieldUpdateOperationsInput
  dicom: BoolFieldUpdateOperationsInput
  dicomId: NullableStringFieldUpdateOperationsInput
  eventCategory: EnumEventCategoryFieldUpdateOperationsInput
  eventType: EnumEventTypesFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  patient: PatientUpdateOneRequiredWithoutClinicalEventNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClinicalEventUpdateWithoutWorkingListInput {
  Prescription: PrescriptionUpdateOneWithoutClinicalEventNestedInput
  clinicalDiagnosticId: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  deletedByUserId: NullableStringFieldUpdateOperationsInput
  deletedReport: NullableStringFieldUpdateOperationsInput
  dicom: BoolFieldUpdateOperationsInput
  dicomId: NullableStringFieldUpdateOperationsInput
  eventCategory: EnumEventCategoryFieldUpdateOperationsInput
  eventType: EnumEventTypesFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  patient: PatientUpdateOneRequiredWithoutClinicalEventNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutClinicalEventNestedInput
}

input ClinicalEventUpsertWithWhereUniqueWithoutPatientInput {
  create: ClinicalEventCreateWithoutPatientInput!
  update: ClinicalEventUpdateWithoutPatientInput!
  where: ClinicalEventWhereUniqueInput!
}

input ClinicalEventUpsertWithWhereUniqueWithoutUserInput {
  create: ClinicalEventCreateWithoutUserInput!
  update: ClinicalEventUpdateWithoutUserInput!
  where: ClinicalEventWhereUniqueInput!
}

input ClinicalEventUpsertWithoutPrescriptionInput {
  create: ClinicalEventCreateWithoutPrescriptionInput!
  update: ClinicalEventUpdateWithoutPrescriptionInput!
  where: ClinicalEventWhereInput
}

input ClinicalEventUpsertWithoutWorkingListInput {
  create: ClinicalEventCreateWithoutWorkingListInput!
  update: ClinicalEventUpdateWithoutWorkingListInput!
  where: ClinicalEventWhereInput
}

input ClinicalEventWhereInput {
  AND: [ClinicalEventWhereInput!]
  NOT: [ClinicalEventWhereInput!]
  OR: [ClinicalEventWhereInput!]
  Prescription: PrescriptionNullableRelationFilter
  WorkingList: WorkingListListRelationFilter
  clinicalDiagnosticId: StringNullableFilter
  createdAt: DateTimeFilter
  deleted: BoolFilter
  deletedByUserId: StringNullableFilter
  deletedReport: StringNullableFilter
  dicom: BoolFilter
  dicomId: StringNullableFilter
  eventCategory: EnumEventCategoryFilter
  eventType: EnumEventTypesFilter
  id: StringFilter
  patient: PatientRelationFilter
  patientId: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input ClinicalEventWhereUniqueInput {
  AND: [ClinicalEventWhereInput!]
  NOT: [ClinicalEventWhereInput!]
  OR: [ClinicalEventWhereInput!]
  Prescription: PrescriptionNullableRelationFilter
  WorkingList: WorkingListListRelationFilter
  clinicalDiagnosticId: StringNullableFilter
  createdAt: DateTimeFilter
  deleted: BoolFilter
  deletedByUserId: StringNullableFilter
  deletedReport: StringNullableFilter
  dicom: BoolFilter
  dicomId: StringNullableFilter
  eventCategory: EnumEventCategoryFilter
  eventType: EnumEventTypesFilter
  id: String
  patient: PatientRelationFilter
  patientId: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

type ConsultationList {
  active: Boolean!
  consultationDate: String!
  createdAt: DateTimeISO!
  id: String!
  patient: Patient!
  patientId: String!
  updatedAt: DateTimeISO!
}

type ConsultationListCountAggregate {
  _all: Int!
  active: Int!
  consultationDate: Int!
  createdAt: Int!
  id: Int!
  patientId: Int!
  updatedAt: Int!
}

input ConsultationListCountOrderByAggregateInput {
  active: SortOrder
  consultationDate: SortOrder
  createdAt: SortOrder
  id: SortOrder
  patientId: SortOrder
  updatedAt: SortOrder
}

input ConsultationListCreateInput {
  active: Boolean
  consultationDate: String!
  createdAt: DateTimeISO
  id: String
  patient: PatientCreateNestedOneWithoutConsultationListInput!
  updatedAt: DateTimeISO
}

input ConsultationListCreateManyInput {
  active: Boolean
  consultationDate: String!
  createdAt: DateTimeISO
  id: String
  patientId: String!
  updatedAt: DateTimeISO
}

input ConsultationListCreateManyPatientInput {
  active: Boolean
  consultationDate: String!
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

input ConsultationListCreateManyPatientInputEnvelope {
  data: [ConsultationListCreateManyPatientInput!]!
  skipDuplicates: Boolean
}

input ConsultationListCreateNestedManyWithoutPatientInput {
  connect: [ConsultationListWhereUniqueInput!]
  connectOrCreate: [ConsultationListCreateOrConnectWithoutPatientInput!]
  create: [ConsultationListCreateWithoutPatientInput!]
  createMany: ConsultationListCreateManyPatientInputEnvelope
}

input ConsultationListCreateOrConnectWithoutPatientInput {
  create: ConsultationListCreateWithoutPatientInput!
  where: ConsultationListWhereUniqueInput!
}

input ConsultationListCreateWithoutPatientInput {
  active: Boolean
  consultationDate: String!
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

type ConsultationListGroupBy {
  _count: ConsultationListCountAggregate
  _max: ConsultationListMaxAggregate
  _min: ConsultationListMinAggregate
  active: Boolean!
  consultationDate: String!
  createdAt: DateTimeISO!
  id: String!
  patientId: String!
  updatedAt: DateTimeISO!
}

input ConsultationListListRelationFilter {
  every: ConsultationListWhereInput
  none: ConsultationListWhereInput
  some: ConsultationListWhereInput
}

type ConsultationListMaxAggregate {
  active: Boolean
  consultationDate: String
  createdAt: DateTimeISO
  id: String
  patientId: String
  updatedAt: DateTimeISO
}

input ConsultationListMaxOrderByAggregateInput {
  active: SortOrder
  consultationDate: SortOrder
  createdAt: SortOrder
  id: SortOrder
  patientId: SortOrder
  updatedAt: SortOrder
}

type ConsultationListMinAggregate {
  active: Boolean
  consultationDate: String
  createdAt: DateTimeISO
  id: String
  patientId: String
  updatedAt: DateTimeISO
}

input ConsultationListMinOrderByAggregateInput {
  active: SortOrder
  consultationDate: SortOrder
  createdAt: SortOrder
  id: SortOrder
  patientId: SortOrder
  updatedAt: SortOrder
}

input ConsultationListOrderByRelationAggregateInput {
  _count: SortOrder
}

input ConsultationListOrderByWithAggregationInput {
  _count: ConsultationListCountOrderByAggregateInput
  _max: ConsultationListMaxOrderByAggregateInput
  _min: ConsultationListMinOrderByAggregateInput
  active: SortOrder
  consultationDate: SortOrder
  createdAt: SortOrder
  id: SortOrder
  patientId: SortOrder
  updatedAt: SortOrder
}

input ConsultationListOrderByWithRelationInput {
  active: SortOrder
  consultationDate: SortOrder
  createdAt: SortOrder
  id: SortOrder
  patient: PatientOrderByWithRelationInput
  patientId: SortOrder
  updatedAt: SortOrder
}

input ConsultationListPatientIdConsultationDateCompoundUniqueInput {
  consultationDate: String!
  patientId: String!
}

enum ConsultationListScalarFieldEnum {
  active
  consultationDate
  createdAt
  id
  patientId
  updatedAt
}

input ConsultationListScalarWhereInput {
  AND: [ConsultationListScalarWhereInput!]
  NOT: [ConsultationListScalarWhereInput!]
  OR: [ConsultationListScalarWhereInput!]
  active: BoolFilter
  consultationDate: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  patientId: StringFilter
  updatedAt: DateTimeFilter
}

input ConsultationListScalarWhereWithAggregatesInput {
  AND: [ConsultationListScalarWhereWithAggregatesInput!]
  NOT: [ConsultationListScalarWhereWithAggregatesInput!]
  OR: [ConsultationListScalarWhereWithAggregatesInput!]
  active: BoolWithAggregatesFilter
  consultationDate: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  patientId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input ConsultationListUpdateInput {
  active: BoolFieldUpdateOperationsInput
  consultationDate: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  patient: PatientUpdateOneRequiredWithoutConsultationListNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ConsultationListUpdateManyMutationInput {
  active: BoolFieldUpdateOperationsInput
  consultationDate: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ConsultationListUpdateManyWithWhereWithoutPatientInput {
  data: ConsultationListUpdateManyMutationInput!
  where: ConsultationListScalarWhereInput!
}

input ConsultationListUpdateManyWithoutPatientNestedInput {
  connect: [ConsultationListWhereUniqueInput!]
  connectOrCreate: [ConsultationListCreateOrConnectWithoutPatientInput!]
  create: [ConsultationListCreateWithoutPatientInput!]
  createMany: ConsultationListCreateManyPatientInputEnvelope
  delete: [ConsultationListWhereUniqueInput!]
  deleteMany: [ConsultationListScalarWhereInput!]
  disconnect: [ConsultationListWhereUniqueInput!]
  set: [ConsultationListWhereUniqueInput!]
  update: [ConsultationListUpdateWithWhereUniqueWithoutPatientInput!]
  updateMany: [ConsultationListUpdateManyWithWhereWithoutPatientInput!]
  upsert: [ConsultationListUpsertWithWhereUniqueWithoutPatientInput!]
}

input ConsultationListUpdateWithWhereUniqueWithoutPatientInput {
  data: ConsultationListUpdateWithoutPatientInput!
  where: ConsultationListWhereUniqueInput!
}

input ConsultationListUpdateWithoutPatientInput {
  active: BoolFieldUpdateOperationsInput
  consultationDate: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ConsultationListUpsertWithWhereUniqueWithoutPatientInput {
  create: ConsultationListCreateWithoutPatientInput!
  update: ConsultationListUpdateWithoutPatientInput!
  where: ConsultationListWhereUniqueInput!
}

input ConsultationListWhereInput {
  AND: [ConsultationListWhereInput!]
  NOT: [ConsultationListWhereInput!]
  OR: [ConsultationListWhereInput!]
  active: BoolFilter
  consultationDate: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  patient: PatientRelationFilter
  patientId: StringFilter
  updatedAt: DateTimeFilter
}

input ConsultationListWhereUniqueInput {
  AND: [ConsultationListWhereInput!]
  NOT: [ConsultationListWhereInput!]
  OR: [ConsultationListWhereInput!]
  active: BoolFilter
  consultationDate: StringFilter
  createdAt: DateTimeFilter
  id: String
  patient: PatientRelationFilter
  patientId: StringFilter
  patientId_consultationDate: ConsultationListPatientIdConsultationDateCompoundUniqueInput
  updatedAt: DateTimeFilter
}

type DataTableConfigModel {
  config: [DataTableModel!]!
  id: String!
  tableName: String!
  widgetType: WidgetTypesEnums!
}

type DataTableModel {
  columnWidth: Int!
  data: DataTablePayload!
  paramHeader: String!
  value: String
}

""""""
enum DataTableParmTypeEnum {
  number
  string
}

type DataTablePayload {
  paramName: String!
  paramType: DataTableParmTypeEnum!
}

type DataTableSectionModel {
  id: String!
  sectionName: String!
  tableContentType: String!
  widgets: [WidgetUnion!]!
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input DateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

type DocumentStore {
  content: Byte
  id: String!
  patient: Patient!
  patientDocumentType: PatientDocumentType!
  patientId: String!
  textContent: String
}

type DocumentStoreCountAggregate {
  _all: Int!
  content: Int!
  id: Int!
  patientDocumentType: Int!
  patientId: Int!
  textContent: Int!
}

input DocumentStoreCountOrderByAggregateInput {
  content: SortOrder
  id: SortOrder
  patientDocumentType: SortOrder
  patientId: SortOrder
  textContent: SortOrder
}

input DocumentStoreCreateInput {
  content: Byte
  id: String
  patient: PatientCreateNestedOneWithoutDocumentStoreInput!
  patientDocumentType: PatientDocumentType!
  textContent: String
}

input DocumentStoreCreateManyInput {
  content: Byte
  id: String
  patientDocumentType: PatientDocumentType!
  patientId: String!
  textContent: String
}

input DocumentStoreCreateManyPatientInput {
  content: Byte
  id: String
  patientDocumentType: PatientDocumentType!
  textContent: String
}

input DocumentStoreCreateManyPatientInputEnvelope {
  data: [DocumentStoreCreateManyPatientInput!]!
  skipDuplicates: Boolean
}

input DocumentStoreCreateNestedManyWithoutPatientInput {
  connect: [DocumentStoreWhereUniqueInput!]
  connectOrCreate: [DocumentStoreCreateOrConnectWithoutPatientInput!]
  create: [DocumentStoreCreateWithoutPatientInput!]
  createMany: DocumentStoreCreateManyPatientInputEnvelope
}

input DocumentStoreCreateOrConnectWithoutPatientInput {
  create: DocumentStoreCreateWithoutPatientInput!
  where: DocumentStoreWhereUniqueInput!
}

input DocumentStoreCreateWithoutPatientInput {
  content: Byte
  id: String
  patientDocumentType: PatientDocumentType!
  textContent: String
}

type DocumentStoreGroupBy {
  _count: DocumentStoreCountAggregate
  _max: DocumentStoreMaxAggregate
  _min: DocumentStoreMinAggregate
  content: Byte
  id: String!
  patientDocumentType: PatientDocumentType!
  patientId: String!
  textContent: String
}

input DocumentStoreListRelationFilter {
  every: DocumentStoreWhereInput
  none: DocumentStoreWhereInput
  some: DocumentStoreWhereInput
}

type DocumentStoreMaxAggregate {
  content: Byte
  id: String
  patientDocumentType: PatientDocumentType
  patientId: String
  textContent: String
}

input DocumentStoreMaxOrderByAggregateInput {
  content: SortOrder
  id: SortOrder
  patientDocumentType: SortOrder
  patientId: SortOrder
  textContent: SortOrder
}

type DocumentStoreMinAggregate {
  content: Byte
  id: String
  patientDocumentType: PatientDocumentType
  patientId: String
  textContent: String
}

input DocumentStoreMinOrderByAggregateInput {
  content: SortOrder
  id: SortOrder
  patientDocumentType: SortOrder
  patientId: SortOrder
  textContent: SortOrder
}

input DocumentStoreOrderByRelationAggregateInput {
  _count: SortOrder
}

input DocumentStoreOrderByWithAggregationInput {
  _count: DocumentStoreCountOrderByAggregateInput
  _max: DocumentStoreMaxOrderByAggregateInput
  _min: DocumentStoreMinOrderByAggregateInput
  content: SortOrderInput
  id: SortOrder
  patientDocumentType: SortOrder
  patientId: SortOrder
  textContent: SortOrderInput
}

input DocumentStoreOrderByWithRelationInput {
  content: SortOrderInput
  id: SortOrder
  patient: PatientOrderByWithRelationInput
  patientDocumentType: SortOrder
  patientId: SortOrder
  textContent: SortOrderInput
}

input DocumentStorePatientIdPatientDocumentTypeCompoundUniqueInput {
  patientDocumentType: PatientDocumentType!
  patientId: String!
}

enum DocumentStoreScalarFieldEnum {
  content
  id
  patientDocumentType
  patientId
  textContent
}

input DocumentStoreScalarWhereInput {
  AND: [DocumentStoreScalarWhereInput!]
  NOT: [DocumentStoreScalarWhereInput!]
  OR: [DocumentStoreScalarWhereInput!]
  content: BytesNullableFilter
  id: StringFilter
  patientDocumentType: EnumPatientDocumentTypeFilter
  patientId: StringFilter
  textContent: StringNullableFilter
}

input DocumentStoreScalarWhereWithAggregatesInput {
  AND: [DocumentStoreScalarWhereWithAggregatesInput!]
  NOT: [DocumentStoreScalarWhereWithAggregatesInput!]
  OR: [DocumentStoreScalarWhereWithAggregatesInput!]
  content: BytesNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  patientDocumentType: EnumPatientDocumentTypeWithAggregatesFilter
  patientId: StringWithAggregatesFilter
  textContent: StringNullableWithAggregatesFilter
}

input DocumentStoreUpdateInput {
  content: NullableBytesFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  patient: PatientUpdateOneRequiredWithoutDocumentStoreNestedInput
  patientDocumentType: EnumPatientDocumentTypeFieldUpdateOperationsInput
  textContent: NullableStringFieldUpdateOperationsInput
}

input DocumentStoreUpdateManyMutationInput {
  content: NullableBytesFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  patientDocumentType: EnumPatientDocumentTypeFieldUpdateOperationsInput
  textContent: NullableStringFieldUpdateOperationsInput
}

input DocumentStoreUpdateManyWithWhereWithoutPatientInput {
  data: DocumentStoreUpdateManyMutationInput!
  where: DocumentStoreScalarWhereInput!
}

input DocumentStoreUpdateManyWithoutPatientNestedInput {
  connect: [DocumentStoreWhereUniqueInput!]
  connectOrCreate: [DocumentStoreCreateOrConnectWithoutPatientInput!]
  create: [DocumentStoreCreateWithoutPatientInput!]
  createMany: DocumentStoreCreateManyPatientInputEnvelope
  delete: [DocumentStoreWhereUniqueInput!]
  deleteMany: [DocumentStoreScalarWhereInput!]
  disconnect: [DocumentStoreWhereUniqueInput!]
  set: [DocumentStoreWhereUniqueInput!]
  update: [DocumentStoreUpdateWithWhereUniqueWithoutPatientInput!]
  updateMany: [DocumentStoreUpdateManyWithWhereWithoutPatientInput!]
  upsert: [DocumentStoreUpsertWithWhereUniqueWithoutPatientInput!]
}

input DocumentStoreUpdateWithWhereUniqueWithoutPatientInput {
  data: DocumentStoreUpdateWithoutPatientInput!
  where: DocumentStoreWhereUniqueInput!
}

input DocumentStoreUpdateWithoutPatientInput {
  content: NullableBytesFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  patientDocumentType: EnumPatientDocumentTypeFieldUpdateOperationsInput
  textContent: NullableStringFieldUpdateOperationsInput
}

input DocumentStoreUpsertWithWhereUniqueWithoutPatientInput {
  create: DocumentStoreCreateWithoutPatientInput!
  update: DocumentStoreUpdateWithoutPatientInput!
  where: DocumentStoreWhereUniqueInput!
}

input DocumentStoreWhereInput {
  AND: [DocumentStoreWhereInput!]
  NOT: [DocumentStoreWhereInput!]
  OR: [DocumentStoreWhereInput!]
  content: BytesNullableFilter
  id: StringFilter
  patient: PatientRelationFilter
  patientDocumentType: EnumPatientDocumentTypeFilter
  patientId: StringFilter
  textContent: StringNullableFilter
}

input DocumentStoreWhereUniqueInput {
  AND: [DocumentStoreWhereInput!]
  NOT: [DocumentStoreWhereInput!]
  OR: [DocumentStoreWhereInput!]
  content: BytesNullableFilter
  id: String
  patient: PatientRelationFilter
  patientDocumentType: EnumPatientDocumentTypeFilter
  patientId: StringFilter
  patientId_patientDocumentType: DocumentStorePatientIdPatientDocumentTypeCompoundUniqueInput
  textContent: StringNullableFilter
}

type DocumentTemplate {
  createdAt: DateTimeISO!
  evenTemplateUrl: String!
  eventDoxTemplate: String
  id: Int!
  oddDoxTemplate: String
  oddTemplateUrl: String!
  templateName: String!
  templateSpeciality: TemplateSpeciality!
}

type DocumentTemplateAvgAggregate {
  id: Float
}

input DocumentTemplateAvgOrderByAggregateInput {
  id: SortOrder
}

type DocumentTemplateCountAggregate {
  _all: Int!
  createdAt: Int!
  evenTemplateUrl: Int!
  eventDoxTemplate: Int!
  id: Int!
  oddDoxTemplate: Int!
  oddTemplateUrl: Int!
  templateName: Int!
  templateSpeciality: Int!
}

input DocumentTemplateCountOrderByAggregateInput {
  createdAt: SortOrder
  evenTemplateUrl: SortOrder
  eventDoxTemplate: SortOrder
  id: SortOrder
  oddDoxTemplate: SortOrder
  oddTemplateUrl: SortOrder
  templateName: SortOrder
  templateSpeciality: SortOrder
}

input DocumentTemplateCreateInput {
  createdAt: DateTimeISO
  evenTemplateUrl: String!
  eventDoxTemplate: String
  oddDoxTemplate: String
  oddTemplateUrl: String!
  templateName: String!
  templateSpeciality: TemplateSpeciality!
}

input DocumentTemplateCreateManyInput {
  createdAt: DateTimeISO
  evenTemplateUrl: String!
  eventDoxTemplate: String
  id: Int
  oddDoxTemplate: String
  oddTemplateUrl: String!
  templateName: String!
  templateSpeciality: TemplateSpeciality!
}

type DocumentTemplateGroupBy {
  _avg: DocumentTemplateAvgAggregate
  _count: DocumentTemplateCountAggregate
  _max: DocumentTemplateMaxAggregate
  _min: DocumentTemplateMinAggregate
  _sum: DocumentTemplateSumAggregate
  createdAt: DateTimeISO!
  evenTemplateUrl: String!
  eventDoxTemplate: String
  id: Int!
  oddDoxTemplate: String
  oddTemplateUrl: String!
  templateName: String!
  templateSpeciality: TemplateSpeciality!
}

type DocumentTemplateMaxAggregate {
  createdAt: DateTimeISO
  evenTemplateUrl: String
  eventDoxTemplate: String
  id: Int
  oddDoxTemplate: String
  oddTemplateUrl: String
  templateName: String
  templateSpeciality: TemplateSpeciality
}

input DocumentTemplateMaxOrderByAggregateInput {
  createdAt: SortOrder
  evenTemplateUrl: SortOrder
  eventDoxTemplate: SortOrder
  id: SortOrder
  oddDoxTemplate: SortOrder
  oddTemplateUrl: SortOrder
  templateName: SortOrder
  templateSpeciality: SortOrder
}

type DocumentTemplateMinAggregate {
  createdAt: DateTimeISO
  evenTemplateUrl: String
  eventDoxTemplate: String
  id: Int
  oddDoxTemplate: String
  oddTemplateUrl: String
  templateName: String
  templateSpeciality: TemplateSpeciality
}

input DocumentTemplateMinOrderByAggregateInput {
  createdAt: SortOrder
  evenTemplateUrl: SortOrder
  eventDoxTemplate: SortOrder
  id: SortOrder
  oddDoxTemplate: SortOrder
  oddTemplateUrl: SortOrder
  templateName: SortOrder
  templateSpeciality: SortOrder
}

input DocumentTemplateOrderByWithAggregationInput {
  _avg: DocumentTemplateAvgOrderByAggregateInput
  _count: DocumentTemplateCountOrderByAggregateInput
  _max: DocumentTemplateMaxOrderByAggregateInput
  _min: DocumentTemplateMinOrderByAggregateInput
  _sum: DocumentTemplateSumOrderByAggregateInput
  createdAt: SortOrder
  evenTemplateUrl: SortOrder
  eventDoxTemplate: SortOrderInput
  id: SortOrder
  oddDoxTemplate: SortOrderInput
  oddTemplateUrl: SortOrder
  templateName: SortOrder
  templateSpeciality: SortOrder
}

input DocumentTemplateOrderByWithRelationInput {
  createdAt: SortOrder
  evenTemplateUrl: SortOrder
  eventDoxTemplate: SortOrderInput
  id: SortOrder
  oddDoxTemplate: SortOrderInput
  oddTemplateUrl: SortOrder
  templateName: SortOrder
  templateSpeciality: SortOrder
}

enum DocumentTemplateScalarFieldEnum {
  createdAt
  evenTemplateUrl
  eventDoxTemplate
  id
  oddDoxTemplate
  oddTemplateUrl
  templateName
  templateSpeciality
}

input DocumentTemplateScalarWhereWithAggregatesInput {
  AND: [DocumentTemplateScalarWhereWithAggregatesInput!]
  NOT: [DocumentTemplateScalarWhereWithAggregatesInput!]
  OR: [DocumentTemplateScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  evenTemplateUrl: StringWithAggregatesFilter
  eventDoxTemplate: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  oddDoxTemplate: StringNullableWithAggregatesFilter
  oddTemplateUrl: StringWithAggregatesFilter
  templateName: StringWithAggregatesFilter
  templateSpeciality: EnumTemplateSpecialityWithAggregatesFilter
}

type DocumentTemplateSumAggregate {
  id: Int
}

input DocumentTemplateSumOrderByAggregateInput {
  id: SortOrder
}

input DocumentTemplateUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  evenTemplateUrl: StringFieldUpdateOperationsInput
  eventDoxTemplate: NullableStringFieldUpdateOperationsInput
  oddDoxTemplate: NullableStringFieldUpdateOperationsInput
  oddTemplateUrl: StringFieldUpdateOperationsInput
  templateName: StringFieldUpdateOperationsInput
  templateSpeciality: EnumTemplateSpecialityFieldUpdateOperationsInput
}

input DocumentTemplateUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  evenTemplateUrl: StringFieldUpdateOperationsInput
  eventDoxTemplate: NullableStringFieldUpdateOperationsInput
  oddDoxTemplate: NullableStringFieldUpdateOperationsInput
  oddTemplateUrl: StringFieldUpdateOperationsInput
  templateName: StringFieldUpdateOperationsInput
  templateSpeciality: EnumTemplateSpecialityFieldUpdateOperationsInput
}

input DocumentTemplateWhereInput {
  AND: [DocumentTemplateWhereInput!]
  NOT: [DocumentTemplateWhereInput!]
  OR: [DocumentTemplateWhereInput!]
  createdAt: DateTimeFilter
  evenTemplateUrl: StringFilter
  eventDoxTemplate: StringNullableFilter
  id: IntFilter
  oddDoxTemplate: StringNullableFilter
  oddTemplateUrl: StringFilter
  templateName: StringFilter
  templateSpeciality: EnumTemplateSpecialityFilter
}

input DocumentTemplateWhereUniqueInput {
  AND: [DocumentTemplateWhereInput!]
  NOT: [DocumentTemplateWhereInput!]
  OR: [DocumentTemplateWhereInput!]
  createdAt: DateTimeFilter
  evenTemplateUrl: StringFilter
  eventDoxTemplate: StringNullableFilter
  id: Int
  oddDoxTemplate: StringNullableFilter
  oddTemplateUrl: StringFilter
  templateName: StringFilter
  templateSpeciality: EnumTemplateSpecialityFilter
}

type Economizer {
  eventType: EventTypes!
  id: String!
  name: String!
  template: String!
}

type EconomizerCountAggregate {
  _all: Int!
  eventType: Int!
  id: Int!
  name: Int!
  template: Int!
}

input EconomizerCountOrderByAggregateInput {
  eventType: SortOrder
  id: SortOrder
  name: SortOrder
  template: SortOrder
}

input EconomizerCreateInput {
  eventType: EventTypes!
  id: String
  name: String!
  template: String!
}

input EconomizerCreateManyInput {
  eventType: EventTypes!
  id: String
  name: String!
  template: String!
}

type EconomizerGroupBy {
  _count: EconomizerCountAggregate
  _max: EconomizerMaxAggregate
  _min: EconomizerMinAggregate
  eventType: EventTypes!
  id: String!
  name: String!
  template: String!
}

type EconomizerMaxAggregate {
  eventType: EventTypes
  id: String
  name: String
  template: String
}

input EconomizerMaxOrderByAggregateInput {
  eventType: SortOrder
  id: SortOrder
  name: SortOrder
  template: SortOrder
}

type EconomizerMinAggregate {
  eventType: EventTypes
  id: String
  name: String
  template: String
}

input EconomizerMinOrderByAggregateInput {
  eventType: SortOrder
  id: SortOrder
  name: SortOrder
  template: SortOrder
}

input EconomizerOrderByWithAggregationInput {
  _count: EconomizerCountOrderByAggregateInput
  _max: EconomizerMaxOrderByAggregateInput
  _min: EconomizerMinOrderByAggregateInput
  eventType: SortOrder
  id: SortOrder
  name: SortOrder
  template: SortOrder
}

input EconomizerOrderByWithRelationInput {
  eventType: SortOrder
  id: SortOrder
  name: SortOrder
  template: SortOrder
}

enum EconomizerScalarFieldEnum {
  eventType
  id
  name
  template
}

input EconomizerScalarWhereWithAggregatesInput {
  AND: [EconomizerScalarWhereWithAggregatesInput!]
  NOT: [EconomizerScalarWhereWithAggregatesInput!]
  OR: [EconomizerScalarWhereWithAggregatesInput!]
  eventType: EnumEventTypesWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  template: StringWithAggregatesFilter
}

input EconomizerUpdateInput {
  eventType: EnumEventTypesFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  template: StringFieldUpdateOperationsInput
}

input EconomizerUpdateManyMutationInput {
  eventType: EnumEventTypesFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  template: StringFieldUpdateOperationsInput
}

input EconomizerWhereInput {
  AND: [EconomizerWhereInput!]
  NOT: [EconomizerWhereInput!]
  OR: [EconomizerWhereInput!]
  eventType: EnumEventTypesFilter
  id: StringFilter
  name: StringFilter
  template: StringFilter
}

input EconomizerWhereUniqueInput {
  AND: [EconomizerWhereInput!]
  NOT: [EconomizerWhereInput!]
  OR: [EconomizerWhereInput!]
  eventType: EnumEventTypesFilter
  id: String
  name: String
  template: StringFilter
}

input EnumEventCategoryFieldUpdateOperationsInput {
  set: EventCategory
}

input EnumEventCategoryFilter {
  equals: EventCategory
  in: [EventCategory!]
  not: NestedEnumEventCategoryFilter
  notIn: [EventCategory!]
}

input EnumEventCategoryWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumEventCategoryFilter
  _min: NestedEnumEventCategoryFilter
  equals: EventCategory
  in: [EventCategory!]
  not: NestedEnumEventCategoryWithAggregatesFilter
  notIn: [EventCategory!]
}

input EnumEventTypesFieldUpdateOperationsInput {
  set: EventTypes
}

input EnumEventTypesFilter {
  equals: EventTypes
  in: [EventTypes!]
  not: NestedEnumEventTypesFilter
  notIn: [EventTypes!]
}

input EnumEventTypesNullableListFilter {
  equals: [EventTypes!]
  has: EventTypes
  hasEvery: [EventTypes!]
  hasSome: [EventTypes!]
  isEmpty: Boolean
}

input EnumEventTypesWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumEventTypesFilter
  _min: NestedEnumEventTypesFilter
  equals: EventTypes
  in: [EventTypes!]
  not: NestedEnumEventTypesWithAggregatesFilter
  notIn: [EventTypes!]
}

input EnumMobileDeviceTypeFieldUpdateOperationsInput {
  set: MobileDeviceType
}

input EnumMobileDeviceTypeFilter {
  equals: MobileDeviceType
  in: [MobileDeviceType!]
  not: NestedEnumMobileDeviceTypeFilter
  notIn: [MobileDeviceType!]
}

input EnumMobileDeviceTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumMobileDeviceTypeFilter
  _min: NestedEnumMobileDeviceTypeFilter
  equals: MobileDeviceType
  in: [MobileDeviceType!]
  not: NestedEnumMobileDeviceTypeWithAggregatesFilter
  notIn: [MobileDeviceType!]
}

input EnumModalityExamStatusFieldUpdateOperationsInput {
  set: ModalityExamStatus
}

input EnumModalityExamStatusFilter {
  equals: ModalityExamStatus
  in: [ModalityExamStatus!]
  not: NestedEnumModalityExamStatusFilter
  notIn: [ModalityExamStatus!]
}

input EnumModalityExamStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumModalityExamStatusFilter
  _min: NestedEnumModalityExamStatusFilter
  equals: ModalityExamStatus
  in: [ModalityExamStatus!]
  not: NestedEnumModalityExamStatusWithAggregatesFilter
  notIn: [ModalityExamStatus!]
}

input EnumModalityTypeFieldUpdateOperationsInput {
  set: ModalityType
}

input EnumModalityTypeFilter {
  equals: ModalityType
  in: [ModalityType!]
  not: NestedEnumModalityTypeFilter
  notIn: [ModalityType!]
}

input EnumModalityTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumModalityTypeFilter
  _min: NestedEnumModalityTypeFilter
  equals: ModalityType
  in: [ModalityType!]
  not: NestedEnumModalityTypeWithAggregatesFilter
  notIn: [ModalityType!]
}

input EnumPatientDocumentTypeFieldUpdateOperationsInput {
  set: PatientDocumentType
}

input EnumPatientDocumentTypeFilter {
  equals: PatientDocumentType
  in: [PatientDocumentType!]
  not: NestedEnumPatientDocumentTypeFilter
  notIn: [PatientDocumentType!]
}

input EnumPatientDocumentTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumPatientDocumentTypeFilter
  _min: NestedEnumPatientDocumentTypeFilter
  equals: PatientDocumentType
  in: [PatientDocumentType!]
  not: NestedEnumPatientDocumentTypeWithAggregatesFilter
  notIn: [PatientDocumentType!]
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input EnumRoleWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumRoleFilter
  _min: NestedEnumRoleFilter
  equals: Role
  in: [Role!]
  not: NestedEnumRoleWithAggregatesFilter
  notIn: [Role!]
}

input EnumSexeFieldUpdateOperationsInput {
  set: Sexe
}

input EnumSexeFilter {
  equals: Sexe
  in: [Sexe!]
  not: NestedEnumSexeFilter
  notIn: [Sexe!]
}

input EnumSexeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumSexeFilter
  _min: NestedEnumSexeFilter
  equals: Sexe
  in: [Sexe!]
  not: NestedEnumSexeWithAggregatesFilter
  notIn: [Sexe!]
}

input EnumTemplateSpecialityFieldUpdateOperationsInput {
  set: TemplateSpeciality
}

input EnumTemplateSpecialityFilter {
  equals: TemplateSpeciality
  in: [TemplateSpeciality!]
  not: NestedEnumTemplateSpecialityFilter
  notIn: [TemplateSpeciality!]
}

input EnumTemplateSpecialityWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumTemplateSpecialityFilter
  _min: NestedEnumTemplateSpecialityFilter
  equals: TemplateSpeciality
  in: [TemplateSpeciality!]
  not: NestedEnumTemplateSpecialityWithAggregatesFilter
  notIn: [TemplateSpeciality!]
}

enum EventCategory {
  DOCUMENT
  FOLDER
}

enum EventTypes {
  BIOLOGY
  CERTIFICAT
  CLINICALEXAM
  DIAGNOSTIC
  ECG
  HISTORY
  MEDICAL_REPORT
  PRESCRIPTION
  SONOGRAPHY
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input FloatNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedFloatNullableFilter
  _min: NestedFloatNullableFilter
  _sum: NestedFloatNullableFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableWithAggregatesFilter
  notIn: [Float!]
}

type InsertDataModel {
  columnWidth: Int!
  paramData: DataTablePayload!
  tableContentType: String!
  value: String!
  widget: WidgetUnion!
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input JsonWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedJsonFilter
  _min: NestedJsonFilter
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

type MobileDevice {
  accessToken: String!
  connected: Boolean!
  expireAt: DateTimeISO!
  id: String!
  mobileDeviceType: MobileDeviceType!
  uuid: String!
}

type MobileDeviceCountAggregate {
  _all: Int!
  accessToken: Int!
  connected: Int!
  expireAt: Int!
  id: Int!
  mobileDeviceType: Int!
  uuid: Int!
}

input MobileDeviceCountOrderByAggregateInput {
  accessToken: SortOrder
  connected: SortOrder
  expireAt: SortOrder
  id: SortOrder
  mobileDeviceType: SortOrder
  uuid: SortOrder
}

input MobileDeviceCreateInput {
  accessToken: String!
  connected: Boolean
  expireAt: DateTimeISO!
  id: String
  mobileDeviceType: MobileDeviceType
  uuid: String!
}

input MobileDeviceCreateManyInput {
  accessToken: String!
  connected: Boolean
  expireAt: DateTimeISO!
  id: String
  mobileDeviceType: MobileDeviceType
  uuid: String!
}

type MobileDeviceGroupBy {
  _count: MobileDeviceCountAggregate
  _max: MobileDeviceMaxAggregate
  _min: MobileDeviceMinAggregate
  accessToken: String!
  connected: Boolean!
  expireAt: DateTimeISO!
  id: String!
  mobileDeviceType: MobileDeviceType!
  uuid: String!
}

type MobileDeviceMaxAggregate {
  accessToken: String
  connected: Boolean
  expireAt: DateTimeISO
  id: String
  mobileDeviceType: MobileDeviceType
  uuid: String
}

input MobileDeviceMaxOrderByAggregateInput {
  accessToken: SortOrder
  connected: SortOrder
  expireAt: SortOrder
  id: SortOrder
  mobileDeviceType: SortOrder
  uuid: SortOrder
}

type MobileDeviceMinAggregate {
  accessToken: String
  connected: Boolean
  expireAt: DateTimeISO
  id: String
  mobileDeviceType: MobileDeviceType
  uuid: String
}

input MobileDeviceMinOrderByAggregateInput {
  accessToken: SortOrder
  connected: SortOrder
  expireAt: SortOrder
  id: SortOrder
  mobileDeviceType: SortOrder
  uuid: SortOrder
}

input MobileDeviceOrderByWithAggregationInput {
  _count: MobileDeviceCountOrderByAggregateInput
  _max: MobileDeviceMaxOrderByAggregateInput
  _min: MobileDeviceMinOrderByAggregateInput
  accessToken: SortOrder
  connected: SortOrder
  expireAt: SortOrder
  id: SortOrder
  mobileDeviceType: SortOrder
  uuid: SortOrder
}

input MobileDeviceOrderByWithRelationInput {
  accessToken: SortOrder
  connected: SortOrder
  expireAt: SortOrder
  id: SortOrder
  mobileDeviceType: SortOrder
  uuid: SortOrder
}

enum MobileDeviceScalarFieldEnum {
  accessToken
  connected
  expireAt
  id
  mobileDeviceType
  uuid
}

input MobileDeviceScalarWhereWithAggregatesInput {
  AND: [MobileDeviceScalarWhereWithAggregatesInput!]
  NOT: [MobileDeviceScalarWhereWithAggregatesInput!]
  OR: [MobileDeviceScalarWhereWithAggregatesInput!]
  accessToken: StringWithAggregatesFilter
  connected: BoolWithAggregatesFilter
  expireAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  mobileDeviceType: EnumMobileDeviceTypeWithAggregatesFilter
  uuid: StringWithAggregatesFilter
}

enum MobileDeviceType {
  DOCTOR
  SECRETARY
}

input MobileDeviceUpdateInput {
  accessToken: StringFieldUpdateOperationsInput
  connected: BoolFieldUpdateOperationsInput
  expireAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mobileDeviceType: EnumMobileDeviceTypeFieldUpdateOperationsInput
  uuid: StringFieldUpdateOperationsInput
}

input MobileDeviceUpdateManyMutationInput {
  accessToken: StringFieldUpdateOperationsInput
  connected: BoolFieldUpdateOperationsInput
  expireAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mobileDeviceType: EnumMobileDeviceTypeFieldUpdateOperationsInput
  uuid: StringFieldUpdateOperationsInput
}

input MobileDeviceUuidAccessTokenCompoundUniqueInput {
  accessToken: String!
  uuid: String!
}

input MobileDeviceWhereInput {
  AND: [MobileDeviceWhereInput!]
  NOT: [MobileDeviceWhereInput!]
  OR: [MobileDeviceWhereInput!]
  accessToken: StringFilter
  connected: BoolFilter
  expireAt: DateTimeFilter
  id: StringFilter
  mobileDeviceType: EnumMobileDeviceTypeFilter
  uuid: StringFilter
}

input MobileDeviceWhereUniqueInput {
  AND: [MobileDeviceWhereInput!]
  NOT: [MobileDeviceWhereInput!]
  OR: [MobileDeviceWhereInput!]
  accessToken: String
  connected: BoolFilter
  expireAt: DateTimeFilter
  id: String
  mobileDeviceType: EnumMobileDeviceTypeFilter
  uuid: StringFilter
  uuid_accessToken: MobileDeviceUuidAccessTokenCompoundUniqueInput
}

type Modality {
  WorkingList(cursor: WorkingListWhereUniqueInput, distinct: [WorkingListScalarFieldEnum!], orderBy: [WorkingListOrderByWithRelationInput!], skip: Int, take: Int, where: WorkingListWhereInput): [WorkingList!]!
  _count: ModalityCount
  activated: Boolean!
  deleted: Boolean!
  enabled: Boolean!
  id: String!
  modalityAETitle: String!
  modalityIpAddress: String!
  modalityName: String!
  modalityPort: Int!
  modalityPseudo: String
  modalityType: ModalityType!
}

type ModalityAvgAggregate {
  modalityPort: Float
}

input ModalityAvgOrderByAggregateInput {
  modalityPort: SortOrder
}

type ModalityCount {
  WorkingList(where: WorkingListWhereInput): Int!
}

type ModalityCountAggregate {
  _all: Int!
  activated: Int!
  deleted: Int!
  enabled: Int!
  id: Int!
  modalityAETitle: Int!
  modalityIpAddress: Int!
  modalityName: Int!
  modalityPort: Int!
  modalityPseudo: Int!
  modalityType: Int!
}

input ModalityCountOrderByAggregateInput {
  activated: SortOrder
  deleted: SortOrder
  enabled: SortOrder
  id: SortOrder
  modalityAETitle: SortOrder
  modalityIpAddress: SortOrder
  modalityName: SortOrder
  modalityPort: SortOrder
  modalityPseudo: SortOrder
  modalityType: SortOrder
}

input ModalityCreateInput {
  WorkingList: WorkingListCreateNestedManyWithoutModalityInput
  activated: Boolean
  deleted: Boolean
  enabled: Boolean
  id: String
  modalityAETitle: String!
  modalityIpAddress: String!
  modalityName: String!
  modalityPort: Int!
  modalityPseudo: String
  modalityType: ModalityType!
}

input ModalityCreateManyInput {
  activated: Boolean
  deleted: Boolean
  enabled: Boolean
  id: String
  modalityAETitle: String!
  modalityIpAddress: String!
  modalityName: String!
  modalityPort: Int!
  modalityPseudo: String
  modalityType: ModalityType!
}

input ModalityCreateNestedOneWithoutWorkingListInput {
  connect: ModalityWhereUniqueInput
  connectOrCreate: ModalityCreateOrConnectWithoutWorkingListInput
  create: ModalityCreateWithoutWorkingListInput
}

input ModalityCreateOrConnectWithoutWorkingListInput {
  create: ModalityCreateWithoutWorkingListInput!
  where: ModalityWhereUniqueInput!
}

input ModalityCreateWithoutWorkingListInput {
  activated: Boolean
  deleted: Boolean
  enabled: Boolean
  id: String
  modalityAETitle: String!
  modalityIpAddress: String!
  modalityName: String!
  modalityPort: Int!
  modalityPseudo: String
  modalityType: ModalityType!
}

enum ModalityExamStatus {
  CLOSED
  CREATED
  INPROGRESS
  REALIZED
  REPORT_DONE
}

type ModalityGroupBy {
  _avg: ModalityAvgAggregate
  _count: ModalityCountAggregate
  _max: ModalityMaxAggregate
  _min: ModalityMinAggregate
  _sum: ModalitySumAggregate
  activated: Boolean!
  deleted: Boolean!
  enabled: Boolean!
  id: String!
  modalityAETitle: String!
  modalityIpAddress: String!
  modalityName: String!
  modalityPort: Int!
  modalityPseudo: String
  modalityType: ModalityType!
}

type ModalityMaxAggregate {
  activated: Boolean
  deleted: Boolean
  enabled: Boolean
  id: String
  modalityAETitle: String
  modalityIpAddress: String
  modalityName: String
  modalityPort: Int
  modalityPseudo: String
  modalityType: ModalityType
}

input ModalityMaxOrderByAggregateInput {
  activated: SortOrder
  deleted: SortOrder
  enabled: SortOrder
  id: SortOrder
  modalityAETitle: SortOrder
  modalityIpAddress: SortOrder
  modalityName: SortOrder
  modalityPort: SortOrder
  modalityPseudo: SortOrder
  modalityType: SortOrder
}

type ModalityMinAggregate {
  activated: Boolean
  deleted: Boolean
  enabled: Boolean
  id: String
  modalityAETitle: String
  modalityIpAddress: String
  modalityName: String
  modalityPort: Int
  modalityPseudo: String
  modalityType: ModalityType
}

input ModalityMinOrderByAggregateInput {
  activated: SortOrder
  deleted: SortOrder
  enabled: SortOrder
  id: SortOrder
  modalityAETitle: SortOrder
  modalityIpAddress: SortOrder
  modalityName: SortOrder
  modalityPort: SortOrder
  modalityPseudo: SortOrder
  modalityType: SortOrder
}

input ModalityOrderByWithAggregationInput {
  _avg: ModalityAvgOrderByAggregateInput
  _count: ModalityCountOrderByAggregateInput
  _max: ModalityMaxOrderByAggregateInput
  _min: ModalityMinOrderByAggregateInput
  _sum: ModalitySumOrderByAggregateInput
  activated: SortOrder
  deleted: SortOrder
  enabled: SortOrder
  id: SortOrder
  modalityAETitle: SortOrder
  modalityIpAddress: SortOrder
  modalityName: SortOrder
  modalityPort: SortOrder
  modalityPseudo: SortOrderInput
  modalityType: SortOrder
}

input ModalityOrderByWithRelationInput {
  WorkingList: WorkingListOrderByRelationAggregateInput
  activated: SortOrder
  deleted: SortOrder
  enabled: SortOrder
  id: SortOrder
  modalityAETitle: SortOrder
  modalityIpAddress: SortOrder
  modalityName: SortOrder
  modalityPort: SortOrder
  modalityPseudo: SortOrderInput
  modalityType: SortOrder
}

input ModalityRelationFilter {
  is: ModalityWhereInput
  isNot: ModalityWhereInput
}

enum ModalityScalarFieldEnum {
  activated
  deleted
  enabled
  id
  modalityAETitle
  modalityIpAddress
  modalityName
  modalityPort
  modalityPseudo
  modalityType
}

input ModalityScalarWhereWithAggregatesInput {
  AND: [ModalityScalarWhereWithAggregatesInput!]
  NOT: [ModalityScalarWhereWithAggregatesInput!]
  OR: [ModalityScalarWhereWithAggregatesInput!]
  activated: BoolWithAggregatesFilter
  deleted: BoolWithAggregatesFilter
  enabled: BoolWithAggregatesFilter
  id: StringWithAggregatesFilter
  modalityAETitle: StringWithAggregatesFilter
  modalityIpAddress: StringWithAggregatesFilter
  modalityName: StringWithAggregatesFilter
  modalityPort: IntWithAggregatesFilter
  modalityPseudo: StringNullableWithAggregatesFilter
  modalityType: EnumModalityTypeWithAggregatesFilter
}

type ModalitySumAggregate {
  modalityPort: Int
}

input ModalitySumOrderByAggregateInput {
  modalityPort: SortOrder
}

enum ModalityType {
  AR
  ASMT
  AU
  BDUS
  BI
  BMD
  CR
  CT
  CTPROTOCOL
  DG
  DOC
  DX
  ECG
  EPS
  ES
  FID
  GM
  HC
  HD
  IO
  IOL
  IVOCT
  IVUS
  KER
  KO
  LEN
  LS
  M3D
  MG
  MR
  NM
  OAM
  OCT
  OP
  OPM
  OPT
  OPTBSV
  OPTENF
  OPV
  OSS
  OT
  PLAN
  PR
  PT
  PX
  REG
  RESP
  RF
  RG
  RTDOSE
  RTIMAGE
  RTINTENT
  RTPLAN
  RTRAD
  RTRECORD
  RTSEGANN
  RTSTRUCT
  RWV
  SEG
  SM
  SMR
  SR
  SRF
  STAIN
  TEXTUREMAP
  TG
  US
  VA
  XA
  XC
}

input ModalityUpdateInput {
  WorkingList: WorkingListUpdateManyWithoutModalityNestedInput
  activated: BoolFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  enabled: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  modalityAETitle: StringFieldUpdateOperationsInput
  modalityIpAddress: StringFieldUpdateOperationsInput
  modalityName: StringFieldUpdateOperationsInput
  modalityPort: IntFieldUpdateOperationsInput
  modalityPseudo: NullableStringFieldUpdateOperationsInput
  modalityType: EnumModalityTypeFieldUpdateOperationsInput
}

input ModalityUpdateManyMutationInput {
  activated: BoolFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  enabled: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  modalityAETitle: StringFieldUpdateOperationsInput
  modalityIpAddress: StringFieldUpdateOperationsInput
  modalityName: StringFieldUpdateOperationsInput
  modalityPort: IntFieldUpdateOperationsInput
  modalityPseudo: NullableStringFieldUpdateOperationsInput
  modalityType: EnumModalityTypeFieldUpdateOperationsInput
}

input ModalityUpdateOneRequiredWithoutWorkingListNestedInput {
  connect: ModalityWhereUniqueInput
  connectOrCreate: ModalityCreateOrConnectWithoutWorkingListInput
  create: ModalityCreateWithoutWorkingListInput
  update: ModalityUpdateToOneWithWhereWithoutWorkingListInput
  upsert: ModalityUpsertWithoutWorkingListInput
}

input ModalityUpdateToOneWithWhereWithoutWorkingListInput {
  data: ModalityUpdateWithoutWorkingListInput!
  where: ModalityWhereInput
}

input ModalityUpdateWithoutWorkingListInput {
  activated: BoolFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  enabled: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  modalityAETitle: StringFieldUpdateOperationsInput
  modalityIpAddress: StringFieldUpdateOperationsInput
  modalityName: StringFieldUpdateOperationsInput
  modalityPort: IntFieldUpdateOperationsInput
  modalityPseudo: NullableStringFieldUpdateOperationsInput
  modalityType: EnumModalityTypeFieldUpdateOperationsInput
}

input ModalityUpsertWithoutWorkingListInput {
  create: ModalityCreateWithoutWorkingListInput!
  update: ModalityUpdateWithoutWorkingListInput!
  where: ModalityWhereInput
}

input ModalityWhereInput {
  AND: [ModalityWhereInput!]
  NOT: [ModalityWhereInput!]
  OR: [ModalityWhereInput!]
  WorkingList: WorkingListListRelationFilter
  activated: BoolFilter
  deleted: BoolFilter
  enabled: BoolFilter
  id: StringFilter
  modalityAETitle: StringFilter
  modalityIpAddress: StringFilter
  modalityName: StringFilter
  modalityPort: IntFilter
  modalityPseudo: StringNullableFilter
  modalityType: EnumModalityTypeFilter
}

input ModalityWhereUniqueInput {
  AND: [ModalityWhereInput!]
  NOT: [ModalityWhereInput!]
  OR: [ModalityWhereInput!]
  WorkingList: WorkingListListRelationFilter
  activated: BoolFilter
  deleted: BoolFilter
  enabled: BoolFilter
  id: String
  modalityAETitle: StringFilter
  modalityIpAddress: StringFilter
  modalityName: String
  modalityPort: IntFilter
  modalityPseudo: StringNullableFilter
  modalityType: EnumModalityTypeFilter
}

type Mutation {
  AddOnePatientToIndex(data: PatientCreateInput!, userId: String!): Patient!
  changeExpirationMobileDeviceResolver(Months: Int!, id: String!, userId: String!): Boolean
  createManyClinicalEvent(data: [ClinicalEventCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyConsultationList(data: [ConsultationListCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyDocumentStore(data: [DocumentStoreCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyDocumentTemplate(data: [DocumentTemplateCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyEconomizer(data: [EconomizerCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMobileDevice(data: [MobileDeviceCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyModality(data: [ModalityCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPatient(data: [PatientCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPatientScannedDocument(data: [PatientScannedDocumentCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPrescription(data: [PrescriptionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManySetting(data: [SettingCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyWorkingList(data: [WorkingListCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneClinicalEvent(eventCategory: EventCategory!, eventType: EventTypes!, patientId: String!, userId: String!): ClinicalEvent!
  createOneConsultationList(data: ConsultationListCreateInput!): ConsultationList!
  createOneDocumentStore(data: DocumentStoreCreateInput!): DocumentStore!
  createOneDocumentTemplate(data: DocumentTemplateCreateInput!): DocumentTemplate!
  createOneEconomizer(data: EconomizerCreateInput!): Economizer!
  createOneMobileDevice(data: MobileDeviceCreateInput!, userId: String!): MobileDevice!
  createOneModality(data: ModalityCreateInput!): Modality!
  createOnePatient(data: PatientCreateInput!): Patient!
  createOnePatientScannedDocument(data: PatientScannedDocumentCreateInput!): PatientScannedDocument!
  createOnePrescription(data: PrescriptionCreateInput!): Prescription!
  createOneSetting(data: SettingCreateInput): Setting!
  createOneUser(data: UserCreateInput!): User!
  createOneWorkingList(data: WorkingListCreateInput!, userId: String!): WorkingList!
  deleteManyClinicalEvent(where: ClinicalEventWhereInput): AffectedRowsOutput!
  deleteManyConsultationList(where: ConsultationListWhereInput): AffectedRowsOutput!
  deleteManyDocumentStore(where: DocumentStoreWhereInput): AffectedRowsOutput!
  deleteManyDocumentTemplate(where: DocumentTemplateWhereInput): AffectedRowsOutput!
  deleteManyEconomizer(where: EconomizerWhereInput): AffectedRowsOutput!
  deleteManyMobileDevice(where: MobileDeviceWhereInput): AffectedRowsOutput!
  deleteManyModality(where: ModalityWhereInput): AffectedRowsOutput!
  deleteManyPatient(where: PatientWhereInput): AffectedRowsOutput!
  deleteManyPatientScannedDocument(where: PatientScannedDocumentWhereInput): AffectedRowsOutput!
  deleteManyPrescription(where: PrescriptionWhereInput): AffectedRowsOutput!
  deleteManySetting(where: SettingWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteManyWorkingList(where: WorkingListWhereInput): AffectedRowsOutput!
  deleteOneClinicalEvent(deletedReport: String!, userId: String!, where: ClinicalEventWhereUniqueInput!): ClinicalEvent
  deleteOneConsultationList(where: ConsultationListWhereUniqueInput!): ConsultationList
  deleteOneDocumentStore(where: DocumentStoreWhereUniqueInput!): DocumentStore
  deleteOneDocumentTemplate(where: DocumentTemplateWhereUniqueInput!): DocumentTemplate
  deleteOneEconomizer(where: EconomizerWhereUniqueInput!): Economizer
  deleteOneMobileDevice(userId: String!, where: MobileDeviceWhereUniqueInput!): MobileDevice
  deleteOneModality(where: ModalityWhereUniqueInput!): Modality
  deleteOnePatient(where: PatientWhereUniqueInput!): Patient
  deleteOnePatientScannedDocument(where: PatientScannedDocumentWhereUniqueInput!): PatientScannedDocument
  deleteOnePrescription(where: PrescriptionWhereUniqueInput!): Prescription
  deleteOneSetting(where: SettingWhereUniqueInput!): Setting
  deleteOneUser(where: UserWhereUniqueInput!): User
  deleteOneWorkingList(userId: String!, where: WorkingListWhereUniqueInput!): WorkingList
  emptyTrashMutation(userId: String!): Boolean!
  indexClinicalDiagnostics: Boolean
  indexDrugs: Boolean
  indexPatients: Boolean
  movePatientFolderToTrash(id: String!, onTrash: Boolean!, userId: String!): Patient
  registerOneMobileDevice(accessToken: String!, userId: String!, uuid: String!): MobileDevice
  registerPatient(patientId: String!): Boolean!
  switchMobileDevice(id: String!, mobileDeviceType: MobileDeviceType!, userId: String!): Boolean
  toggleLockWorkingList(id: String!, userId: String!): WorkingList!
  toggleSelectedTrashMutation(data: PatientUpdateManyMutationInput!, where: PatientWhereInput): AffectedRowsOutput!
  triggerAppSubscription(appPayload: String!, global: Boolean!, subscriptionSpecificId: String, type: AppSubscriptionPayloadType!, userId: String!): Boolean!
  triggerInsertDataSubscription(clinicalEventId: String!, paramData: ParamDataInputType!, tableContentType: String!, value: String!): Boolean!
  updateManyClinicalEvent(data: ClinicalEventUpdateManyMutationInput!, where: ClinicalEventWhereInput): AffectedRowsOutput!
  updateManyConsultationList(data: ConsultationListUpdateManyMutationInput!, where: ConsultationListWhereInput): AffectedRowsOutput!
  updateManyDocumentStore(data: DocumentStoreUpdateManyMutationInput!, where: DocumentStoreWhereInput): AffectedRowsOutput!
  updateManyDocumentTemplate(data: DocumentTemplateUpdateManyMutationInput!, where: DocumentTemplateWhereInput): AffectedRowsOutput!
  updateManyEconomizer(data: EconomizerUpdateManyMutationInput!, where: EconomizerWhereInput): AffectedRowsOutput!
  updateManyMobileDevice(data: MobileDeviceUpdateManyMutationInput!, where: MobileDeviceWhereInput): AffectedRowsOutput!
  updateManyModality(data: ModalityUpdateManyMutationInput!, where: ModalityWhereInput): AffectedRowsOutput!
  updateManyPatient(data: PatientUpdateManyMutationInput!, where: PatientWhereInput): AffectedRowsOutput!
  updateManyPatientScannedDocument(data: PatientScannedDocumentUpdateManyMutationInput!, where: PatientScannedDocumentWhereInput): AffectedRowsOutput!
  updateManyPrescription(data: PrescriptionUpdateManyMutationInput!, where: PrescriptionWhereInput): AffectedRowsOutput!
  updateManySetting(data: SettingUpdateManyMutationInput!, where: SettingWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateManyWorkingList(data: WorkingListUpdateManyMutationInput!, where: WorkingListWhereInput): AffectedRowsOutput!
  updateOneClinicalEvent(data: ClinicalEventUpdateInput!, userId: String!, where: ClinicalEventWhereUniqueInput!): ClinicalEvent
  updateOneConsultationList(data: ConsultationListUpdateInput!, where: ConsultationListWhereUniqueInput!): ConsultationList
  updateOneDocumentStore(data: DocumentStoreUpdateInput!, where: DocumentStoreWhereUniqueInput!): DocumentStore
  updateOneDocumentTemplate(data: DocumentTemplateUpdateInput!, where: DocumentTemplateWhereUniqueInput!): DocumentTemplate
  updateOneEconomizer(data: EconomizerUpdateInput!, where: EconomizerWhereUniqueInput!): Economizer
  updateOneMobileDevice(data: MobileDeviceUpdateInput!, userId: String!, where: MobileDeviceWhereUniqueInput!): MobileDevice
  updateOneModality(data: ModalityUpdateInput!, userId: String!, where: ModalityWhereUniqueInput!): Modality
  updateOnePatient(data: PatientUpdateInput!, userId: String!, where: PatientWhereUniqueInput!): Patient
  updateOnePatientScannedDocument(data: PatientScannedDocumentUpdateInput!, where: PatientScannedDocumentWhereUniqueInput!): PatientScannedDocument
  updateOnePrescription(data: PrescriptionUpdateInput!, where: PrescriptionWhereUniqueInput!): Prescription
  updateOneSetting(data: SettingUpdateInput!, where: SettingWhereUniqueInput!): Setting
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateOneWorkingList(data: WorkingListUpdateInput!, userId: String!, where: WorkingListWhereUniqueInput!): WorkingList
  upsertOneClinicalEvent(create: ClinicalEventCreateInput!, update: ClinicalEventUpdateInput!, where: ClinicalEventWhereUniqueInput!): ClinicalEvent!
  upsertOneConsultationList(create: ConsultationListCreateInput!, update: ConsultationListUpdateInput!, where: ConsultationListWhereUniqueInput!): ConsultationList!
  upsertOneDocumentStore(create: DocumentStoreCreateInput!, update: DocumentStoreUpdateInput!, where: DocumentStoreWhereUniqueInput!): DocumentStore!
  upsertOneDocumentTemplate(create: DocumentTemplateCreateInput!, update: DocumentTemplateUpdateInput!, where: DocumentTemplateWhereUniqueInput!): DocumentTemplate!
  upsertOneEconomizer(create: EconomizerCreateInput!, update: EconomizerUpdateInput!, where: EconomizerWhereUniqueInput!): Economizer!
  upsertOneMobileDevice(create: MobileDeviceCreateInput!, update: MobileDeviceUpdateInput!, where: MobileDeviceWhereUniqueInput!): MobileDevice!
  upsertOneModality(create: ModalityCreateInput!, update: ModalityUpdateInput!, where: ModalityWhereUniqueInput!): Modality!
  upsertOnePatient(create: PatientCreateInput!, update: PatientUpdateInput!, where: PatientWhereUniqueInput!): Patient!
  upsertOnePatientScannedDocument(create: PatientScannedDocumentCreateInput!, update: PatientScannedDocumentUpdateInput!, where: PatientScannedDocumentWhereUniqueInput!): PatientScannedDocument!
  upsertOnePrescription(create: PrescriptionCreateInput!, update: PrescriptionUpdateInput!, where: PrescriptionWhereUniqueInput!): Prescription!
  upsertOneSetting(create: SettingCreateInput!, update: SettingUpdateInput!, where: SettingWhereUniqueInput!): Setting!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertOneWorkingList(create: WorkingListCreateInput!, update: WorkingListUpdateInput!, where: WorkingListWhereUniqueInput!): WorkingList!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedBytesNullableFilter {
  equals: Byte
  in: [Byte!]
  not: NestedBytesNullableFilter
  notIn: [Byte!]
}

input NestedBytesNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedBytesNullableFilter
  _min: NestedBytesNullableFilter
  equals: Byte
  in: [Byte!]
  not: NestedBytesNullableWithAggregatesFilter
  notIn: [Byte!]
}

input NestedDateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedEnumEventCategoryFilter {
  equals: EventCategory
  in: [EventCategory!]
  not: NestedEnumEventCategoryFilter
  notIn: [EventCategory!]
}

input NestedEnumEventCategoryWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumEventCategoryFilter
  _min: NestedEnumEventCategoryFilter
  equals: EventCategory
  in: [EventCategory!]
  not: NestedEnumEventCategoryWithAggregatesFilter
  notIn: [EventCategory!]
}

input NestedEnumEventTypesFilter {
  equals: EventTypes
  in: [EventTypes!]
  not: NestedEnumEventTypesFilter
  notIn: [EventTypes!]
}

input NestedEnumEventTypesWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumEventTypesFilter
  _min: NestedEnumEventTypesFilter
  equals: EventTypes
  in: [EventTypes!]
  not: NestedEnumEventTypesWithAggregatesFilter
  notIn: [EventTypes!]
}

input NestedEnumMobileDeviceTypeFilter {
  equals: MobileDeviceType
  in: [MobileDeviceType!]
  not: NestedEnumMobileDeviceTypeFilter
  notIn: [MobileDeviceType!]
}

input NestedEnumMobileDeviceTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumMobileDeviceTypeFilter
  _min: NestedEnumMobileDeviceTypeFilter
  equals: MobileDeviceType
  in: [MobileDeviceType!]
  not: NestedEnumMobileDeviceTypeWithAggregatesFilter
  notIn: [MobileDeviceType!]
}

input NestedEnumModalityExamStatusFilter {
  equals: ModalityExamStatus
  in: [ModalityExamStatus!]
  not: NestedEnumModalityExamStatusFilter
  notIn: [ModalityExamStatus!]
}

input NestedEnumModalityExamStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumModalityExamStatusFilter
  _min: NestedEnumModalityExamStatusFilter
  equals: ModalityExamStatus
  in: [ModalityExamStatus!]
  not: NestedEnumModalityExamStatusWithAggregatesFilter
  notIn: [ModalityExamStatus!]
}

input NestedEnumModalityTypeFilter {
  equals: ModalityType
  in: [ModalityType!]
  not: NestedEnumModalityTypeFilter
  notIn: [ModalityType!]
}

input NestedEnumModalityTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumModalityTypeFilter
  _min: NestedEnumModalityTypeFilter
  equals: ModalityType
  in: [ModalityType!]
  not: NestedEnumModalityTypeWithAggregatesFilter
  notIn: [ModalityType!]
}

input NestedEnumPatientDocumentTypeFilter {
  equals: PatientDocumentType
  in: [PatientDocumentType!]
  not: NestedEnumPatientDocumentTypeFilter
  notIn: [PatientDocumentType!]
}

input NestedEnumPatientDocumentTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumPatientDocumentTypeFilter
  _min: NestedEnumPatientDocumentTypeFilter
  equals: PatientDocumentType
  in: [PatientDocumentType!]
  not: NestedEnumPatientDocumentTypeWithAggregatesFilter
  notIn: [PatientDocumentType!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedEnumRoleWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumRoleFilter
  _min: NestedEnumRoleFilter
  equals: Role
  in: [Role!]
  not: NestedEnumRoleWithAggregatesFilter
  notIn: [Role!]
}

input NestedEnumSexeFilter {
  equals: Sexe
  in: [Sexe!]
  not: NestedEnumSexeFilter
  notIn: [Sexe!]
}

input NestedEnumSexeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumSexeFilter
  _min: NestedEnumSexeFilter
  equals: Sexe
  in: [Sexe!]
  not: NestedEnumSexeWithAggregatesFilter
  notIn: [Sexe!]
}

input NestedEnumTemplateSpecialityFilter {
  equals: TemplateSpeciality
  in: [TemplateSpeciality!]
  not: NestedEnumTemplateSpecialityFilter
  notIn: [TemplateSpeciality!]
}

input NestedEnumTemplateSpecialityWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumTemplateSpecialityFilter
  _min: NestedEnumTemplateSpecialityFilter
  equals: TemplateSpeciality
  in: [TemplateSpeciality!]
  not: NestedEnumTemplateSpecialityWithAggregatesFilter
  notIn: [TemplateSpeciality!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedFloatNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedFloatNullableFilter
  _min: NestedFloatNullableFilter
  _sum: NestedFloatNullableFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableWithAggregatesFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedJsonFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableBytesFieldUpdateOperationsInput {
  set: Byte
}

input NullableFloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

input ParamDataInputType {
  paramName: String!
  paramType: DataTableParmTypeEnum!
}

type Patient {
  ClinicalEvent(cursor: ClinicalEventWhereUniqueInput, distinct: [ClinicalEventScalarFieldEnum!], orderBy: [ClinicalEventOrderByWithRelationInput!], skip: Int, take: Int, where: ClinicalEventWhereInput): [ClinicalEvent!]!
  ConsultationList(cursor: ConsultationListWhereUniqueInput, distinct: [ConsultationListScalarFieldEnum!], orderBy: [ConsultationListOrderByWithRelationInput!], skip: Int, take: Int, where: ConsultationListWhereInput): [ConsultationList!]!
  DocumentStore(cursor: DocumentStoreWhereUniqueInput, distinct: [DocumentStoreScalarFieldEnum!], orderBy: [DocumentStoreOrderByWithRelationInput!], skip: Int, take: Int, where: DocumentStoreWhereInput): [DocumentStore!]!
  PatientScanedDocument(cursor: PatientScannedDocumentWhereUniqueInput, distinct: [PatientScannedDocumentScalarFieldEnum!], orderBy: [PatientScannedDocumentOrderByWithRelationInput!], skip: Int, take: Int, where: PatientScannedDocumentWhereInput): [PatientScannedDocument!]!
  WorkingList(cursor: WorkingListWhereUniqueInput, distinct: [WorkingListScalarFieldEnum!], orderBy: [WorkingListOrderByWithRelationInput!], skip: Int, take: Int, where: WorkingListWhereInput): [WorkingList!]!
  _count: PatientCount
  address: String
  createdAt: DateTimeISO!
  ddn: DateTimeISO!
  deleted: Boolean!
  firstName: String!
  height: Float
  id: String!
  informationsConfirmed: Boolean!
  lastName: String!
  nTel: String
  onTrash: Boolean!
  patientAvatar: String
  patientFullName: String!
  sexe: Sexe!
  updated: DateTimeISO!
  weight: Float
}

type PatientAvgAggregate {
  height: Float
  weight: Float
}

input PatientAvgOrderByAggregateInput {
  height: SortOrder
  weight: SortOrder
}

type PatientCount {
  ClinicalEvent(where: ClinicalEventWhereInput): Int!
  ConsultationList(where: ConsultationListWhereInput): Int!
  DocumentStore(where: DocumentStoreWhereInput): Int!
  PatientScanedDocument(where: PatientScannedDocumentWhereInput): Int!
  WorkingList(where: WorkingListWhereInput): Int!
}

type PatientCountAggregate {
  _all: Int!
  address: Int!
  createdAt: Int!
  ddn: Int!
  deleted: Int!
  firstName: Int!
  height: Int!
  id: Int!
  informationsConfirmed: Int!
  lastName: Int!
  nTel: Int!
  onTrash: Int!
  patientAvatar: Int!
  sexe: Int!
  updated: Int!
  weight: Int!
}

input PatientCountOrderByAggregateInput {
  address: SortOrder
  createdAt: SortOrder
  ddn: SortOrder
  deleted: SortOrder
  firstName: SortOrder
  height: SortOrder
  id: SortOrder
  informationsConfirmed: SortOrder
  lastName: SortOrder
  nTel: SortOrder
  onTrash: SortOrder
  patientAvatar: SortOrder
  sexe: SortOrder
  updated: SortOrder
  weight: SortOrder
}

input PatientCreateInput {
  ClinicalEvent: ClinicalEventCreateNestedManyWithoutPatientInput
  ConsultationList: ConsultationListCreateNestedManyWithoutPatientInput
  DocumentStore: DocumentStoreCreateNestedManyWithoutPatientInput
  PatientScanedDocument: PatientScannedDocumentCreateNestedManyWithoutPatientInput
  WorkingList: WorkingListCreateNestedManyWithoutPatientInput
  address: String
  createdAt: DateTimeISO
  ddn: DateTimeISO!
  deleted: Boolean
  firstName: String!
  height: Float
  id: String
  informationsConfirmed: Boolean
  lastName: String!
  nTel: String
  onTrash: Boolean
  patientAvatar: String
  sexe: Sexe!
  updated: DateTimeISO
  weight: Float
}

input PatientCreateManyInput {
  address: String
  createdAt: DateTimeISO
  ddn: DateTimeISO!
  deleted: Boolean
  firstName: String!
  height: Float
  id: String
  informationsConfirmed: Boolean
  lastName: String!
  nTel: String
  onTrash: Boolean
  patientAvatar: String
  sexe: Sexe!
  updated: DateTimeISO
  weight: Float
}

input PatientCreateNestedOneWithoutClinicalEventInput {
  connect: PatientWhereUniqueInput
  connectOrCreate: PatientCreateOrConnectWithoutClinicalEventInput
  create: PatientCreateWithoutClinicalEventInput
}

input PatientCreateNestedOneWithoutConsultationListInput {
  connect: PatientWhereUniqueInput
  connectOrCreate: PatientCreateOrConnectWithoutConsultationListInput
  create: PatientCreateWithoutConsultationListInput
}

input PatientCreateNestedOneWithoutDocumentStoreInput {
  connect: PatientWhereUniqueInput
  connectOrCreate: PatientCreateOrConnectWithoutDocumentStoreInput
  create: PatientCreateWithoutDocumentStoreInput
}

input PatientCreateNestedOneWithoutPatientScanedDocumentInput {
  connect: PatientWhereUniqueInput
  connectOrCreate: PatientCreateOrConnectWithoutPatientScanedDocumentInput
  create: PatientCreateWithoutPatientScanedDocumentInput
}

input PatientCreateNestedOneWithoutWorkingListInput {
  connect: PatientWhereUniqueInput
  connectOrCreate: PatientCreateOrConnectWithoutWorkingListInput
  create: PatientCreateWithoutWorkingListInput
}

input PatientCreateOrConnectWithoutClinicalEventInput {
  create: PatientCreateWithoutClinicalEventInput!
  where: PatientWhereUniqueInput!
}

input PatientCreateOrConnectWithoutConsultationListInput {
  create: PatientCreateWithoutConsultationListInput!
  where: PatientWhereUniqueInput!
}

input PatientCreateOrConnectWithoutDocumentStoreInput {
  create: PatientCreateWithoutDocumentStoreInput!
  where: PatientWhereUniqueInput!
}

input PatientCreateOrConnectWithoutPatientScanedDocumentInput {
  create: PatientCreateWithoutPatientScanedDocumentInput!
  where: PatientWhereUniqueInput!
}

input PatientCreateOrConnectWithoutWorkingListInput {
  create: PatientCreateWithoutWorkingListInput!
  where: PatientWhereUniqueInput!
}

input PatientCreateWithoutClinicalEventInput {
  ConsultationList: ConsultationListCreateNestedManyWithoutPatientInput
  DocumentStore: DocumentStoreCreateNestedManyWithoutPatientInput
  PatientScanedDocument: PatientScannedDocumentCreateNestedManyWithoutPatientInput
  WorkingList: WorkingListCreateNestedManyWithoutPatientInput
  address: String
  createdAt: DateTimeISO
  ddn: DateTimeISO!
  deleted: Boolean
  firstName: String!
  height: Float
  id: String
  informationsConfirmed: Boolean
  lastName: String!
  nTel: String
  onTrash: Boolean
  patientAvatar: String
  sexe: Sexe!
  updated: DateTimeISO
  weight: Float
}

input PatientCreateWithoutConsultationListInput {
  ClinicalEvent: ClinicalEventCreateNestedManyWithoutPatientInput
  DocumentStore: DocumentStoreCreateNestedManyWithoutPatientInput
  PatientScanedDocument: PatientScannedDocumentCreateNestedManyWithoutPatientInput
  WorkingList: WorkingListCreateNestedManyWithoutPatientInput
  address: String
  createdAt: DateTimeISO
  ddn: DateTimeISO!
  deleted: Boolean
  firstName: String!
  height: Float
  id: String
  informationsConfirmed: Boolean
  lastName: String!
  nTel: String
  onTrash: Boolean
  patientAvatar: String
  sexe: Sexe!
  updated: DateTimeISO
  weight: Float
}

input PatientCreateWithoutDocumentStoreInput {
  ClinicalEvent: ClinicalEventCreateNestedManyWithoutPatientInput
  ConsultationList: ConsultationListCreateNestedManyWithoutPatientInput
  PatientScanedDocument: PatientScannedDocumentCreateNestedManyWithoutPatientInput
  WorkingList: WorkingListCreateNestedManyWithoutPatientInput
  address: String
  createdAt: DateTimeISO
  ddn: DateTimeISO!
  deleted: Boolean
  firstName: String!
  height: Float
  id: String
  informationsConfirmed: Boolean
  lastName: String!
  nTel: String
  onTrash: Boolean
  patientAvatar: String
  sexe: Sexe!
  updated: DateTimeISO
  weight: Float
}

input PatientCreateWithoutPatientScanedDocumentInput {
  ClinicalEvent: ClinicalEventCreateNestedManyWithoutPatientInput
  ConsultationList: ConsultationListCreateNestedManyWithoutPatientInput
  DocumentStore: DocumentStoreCreateNestedManyWithoutPatientInput
  WorkingList: WorkingListCreateNestedManyWithoutPatientInput
  address: String
  createdAt: DateTimeISO
  ddn: DateTimeISO!
  deleted: Boolean
  firstName: String!
  height: Float
  id: String
  informationsConfirmed: Boolean
  lastName: String!
  nTel: String
  onTrash: Boolean
  patientAvatar: String
  sexe: Sexe!
  updated: DateTimeISO
  weight: Float
}

input PatientCreateWithoutWorkingListInput {
  ClinicalEvent: ClinicalEventCreateNestedManyWithoutPatientInput
  ConsultationList: ConsultationListCreateNestedManyWithoutPatientInput
  DocumentStore: DocumentStoreCreateNestedManyWithoutPatientInput
  PatientScanedDocument: PatientScannedDocumentCreateNestedManyWithoutPatientInput
  address: String
  createdAt: DateTimeISO
  ddn: DateTimeISO!
  deleted: Boolean
  firstName: String!
  height: Float
  id: String
  informationsConfirmed: Boolean
  lastName: String!
  nTel: String
  onTrash: Boolean
  patientAvatar: String
  sexe: Sexe!
  updated: DateTimeISO
  weight: Float
}

enum PatientDocumentType {
  document
  folder
}

type PatientGroupBy {
  _avg: PatientAvgAggregate
  _count: PatientCountAggregate
  _max: PatientMaxAggregate
  _min: PatientMinAggregate
  _sum: PatientSumAggregate
  address: String
  createdAt: DateTimeISO!
  ddn: DateTimeISO!
  deleted: Boolean!
  firstName: String!
  height: Float
  id: String!
  informationsConfirmed: Boolean!
  lastName: String!
  nTel: String
  onTrash: Boolean!
  patientAvatar: String
  sexe: Sexe!
  updated: DateTimeISO!
  weight: Float
}

type PatientMaxAggregate {
  address: String
  createdAt: DateTimeISO
  ddn: DateTimeISO
  deleted: Boolean
  firstName: String
  height: Float
  id: String
  informationsConfirmed: Boolean
  lastName: String
  nTel: String
  onTrash: Boolean
  patientAvatar: String
  sexe: Sexe
  updated: DateTimeISO
  weight: Float
}

input PatientMaxOrderByAggregateInput {
  address: SortOrder
  createdAt: SortOrder
  ddn: SortOrder
  deleted: SortOrder
  firstName: SortOrder
  height: SortOrder
  id: SortOrder
  informationsConfirmed: SortOrder
  lastName: SortOrder
  nTel: SortOrder
  onTrash: SortOrder
  patientAvatar: SortOrder
  sexe: SortOrder
  updated: SortOrder
  weight: SortOrder
}

type PatientMinAggregate {
  address: String
  createdAt: DateTimeISO
  ddn: DateTimeISO
  deleted: Boolean
  firstName: String
  height: Float
  id: String
  informationsConfirmed: Boolean
  lastName: String
  nTel: String
  onTrash: Boolean
  patientAvatar: String
  sexe: Sexe
  updated: DateTimeISO
  weight: Float
}

input PatientMinOrderByAggregateInput {
  address: SortOrder
  createdAt: SortOrder
  ddn: SortOrder
  deleted: SortOrder
  firstName: SortOrder
  height: SortOrder
  id: SortOrder
  informationsConfirmed: SortOrder
  lastName: SortOrder
  nTel: SortOrder
  onTrash: SortOrder
  patientAvatar: SortOrder
  sexe: SortOrder
  updated: SortOrder
  weight: SortOrder
}

input PatientOrderByWithAggregationInput {
  _avg: PatientAvgOrderByAggregateInput
  _count: PatientCountOrderByAggregateInput
  _max: PatientMaxOrderByAggregateInput
  _min: PatientMinOrderByAggregateInput
  _sum: PatientSumOrderByAggregateInput
  address: SortOrderInput
  createdAt: SortOrder
  ddn: SortOrder
  deleted: SortOrder
  firstName: SortOrder
  height: SortOrderInput
  id: SortOrder
  informationsConfirmed: SortOrder
  lastName: SortOrder
  nTel: SortOrderInput
  onTrash: SortOrder
  patientAvatar: SortOrderInput
  sexe: SortOrder
  updated: SortOrder
  weight: SortOrderInput
}

input PatientOrderByWithRelationInput {
  ClinicalEvent: ClinicalEventOrderByRelationAggregateInput
  ConsultationList: ConsultationListOrderByRelationAggregateInput
  DocumentStore: DocumentStoreOrderByRelationAggregateInput
  PatientScanedDocument: PatientScannedDocumentOrderByRelationAggregateInput
  WorkingList: WorkingListOrderByRelationAggregateInput
  address: SortOrderInput
  createdAt: SortOrder
  ddn: SortOrder
  deleted: SortOrder
  firstName: SortOrder
  height: SortOrderInput
  id: SortOrder
  informationsConfirmed: SortOrder
  lastName: SortOrder
  nTel: SortOrderInput
  onTrash: SortOrder
  patientAvatar: SortOrderInput
  sexe: SortOrder
  updated: SortOrder
  weight: SortOrderInput
}

input PatientRelationFilter {
  is: PatientWhereInput
  isNot: PatientWhereInput
}

enum PatientScalarFieldEnum {
  address
  createdAt
  ddn
  deleted
  firstName
  height
  id
  informationsConfirmed
  lastName
  nTel
  onTrash
  patientAvatar
  sexe
  updated
  weight
}

input PatientScalarWhereWithAggregatesInput {
  AND: [PatientScalarWhereWithAggregatesInput!]
  NOT: [PatientScalarWhereWithAggregatesInput!]
  OR: [PatientScalarWhereWithAggregatesInput!]
  address: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  ddn: DateTimeWithAggregatesFilter
  deleted: BoolWithAggregatesFilter
  firstName: StringWithAggregatesFilter
  height: FloatNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  informationsConfirmed: BoolWithAggregatesFilter
  lastName: StringWithAggregatesFilter
  nTel: StringNullableWithAggregatesFilter
  onTrash: BoolWithAggregatesFilter
  patientAvatar: StringNullableWithAggregatesFilter
  sexe: EnumSexeWithAggregatesFilter
  updated: DateTimeWithAggregatesFilter
  weight: FloatNullableWithAggregatesFilter
}

type PatientScannedDocument {
  createdAt: DateTimeISO!
  documentCollectionDate: DateTimeISO!
  documentCollectionName: String!
  documentCollectionUrls: [String!]!
  id: String!
  patient: Patient!
  patientId: String!
}

type PatientScannedDocumentCountAggregate {
  _all: Int!
  createdAt: Int!
  documentCollectionDate: Int!
  documentCollectionName: Int!
  documentCollectionUrls: Int!
  id: Int!
  patientId: Int!
}

input PatientScannedDocumentCountOrderByAggregateInput {
  createdAt: SortOrder
  documentCollectionDate: SortOrder
  documentCollectionName: SortOrder
  documentCollectionUrls: SortOrder
  id: SortOrder
  patientId: SortOrder
}

input PatientScannedDocumentCreateInput {
  createdAt: DateTimeISO
  documentCollectionDate: DateTimeISO!
  documentCollectionName: String!
  documentCollectionUrls: PatientScannedDocumentCreatedocumentCollectionUrlsInput
  id: String
  patient: PatientCreateNestedOneWithoutPatientScanedDocumentInput!
}

input PatientScannedDocumentCreateManyInput {
  createdAt: DateTimeISO
  documentCollectionDate: DateTimeISO!
  documentCollectionName: String!
  documentCollectionUrls: PatientScannedDocumentCreatedocumentCollectionUrlsInput
  id: String
  patientId: String!
}

input PatientScannedDocumentCreateManyPatientInput {
  createdAt: DateTimeISO
  documentCollectionDate: DateTimeISO!
  documentCollectionName: String!
  documentCollectionUrls: PatientScannedDocumentCreatedocumentCollectionUrlsInput
  id: String
}

input PatientScannedDocumentCreateManyPatientInputEnvelope {
  data: [PatientScannedDocumentCreateManyPatientInput!]!
  skipDuplicates: Boolean
}

input PatientScannedDocumentCreateNestedManyWithoutPatientInput {
  connect: [PatientScannedDocumentWhereUniqueInput!]
  connectOrCreate: [PatientScannedDocumentCreateOrConnectWithoutPatientInput!]
  create: [PatientScannedDocumentCreateWithoutPatientInput!]
  createMany: PatientScannedDocumentCreateManyPatientInputEnvelope
}

input PatientScannedDocumentCreateOrConnectWithoutPatientInput {
  create: PatientScannedDocumentCreateWithoutPatientInput!
  where: PatientScannedDocumentWhereUniqueInput!
}

input PatientScannedDocumentCreateWithoutPatientInput {
  createdAt: DateTimeISO
  documentCollectionDate: DateTimeISO!
  documentCollectionName: String!
  documentCollectionUrls: PatientScannedDocumentCreatedocumentCollectionUrlsInput
  id: String
}

input PatientScannedDocumentCreatedocumentCollectionUrlsInput {
  set: [String!]!
}

type PatientScannedDocumentGroupBy {
  _count: PatientScannedDocumentCountAggregate
  _max: PatientScannedDocumentMaxAggregate
  _min: PatientScannedDocumentMinAggregate
  createdAt: DateTimeISO!
  documentCollectionDate: DateTimeISO!
  documentCollectionName: String!
  documentCollectionUrls: [String!]
  id: String!
  patientId: String!
}

input PatientScannedDocumentListRelationFilter {
  every: PatientScannedDocumentWhereInput
  none: PatientScannedDocumentWhereInput
  some: PatientScannedDocumentWhereInput
}

type PatientScannedDocumentMaxAggregate {
  createdAt: DateTimeISO
  documentCollectionDate: DateTimeISO
  documentCollectionName: String
  id: String
  patientId: String
}

input PatientScannedDocumentMaxOrderByAggregateInput {
  createdAt: SortOrder
  documentCollectionDate: SortOrder
  documentCollectionName: SortOrder
  id: SortOrder
  patientId: SortOrder
}

type PatientScannedDocumentMinAggregate {
  createdAt: DateTimeISO
  documentCollectionDate: DateTimeISO
  documentCollectionName: String
  id: String
  patientId: String
}

input PatientScannedDocumentMinOrderByAggregateInput {
  createdAt: SortOrder
  documentCollectionDate: SortOrder
  documentCollectionName: SortOrder
  id: SortOrder
  patientId: SortOrder
}

input PatientScannedDocumentOrderByRelationAggregateInput {
  _count: SortOrder
}

input PatientScannedDocumentOrderByWithAggregationInput {
  _count: PatientScannedDocumentCountOrderByAggregateInput
  _max: PatientScannedDocumentMaxOrderByAggregateInput
  _min: PatientScannedDocumentMinOrderByAggregateInput
  createdAt: SortOrder
  documentCollectionDate: SortOrder
  documentCollectionName: SortOrder
  documentCollectionUrls: SortOrder
  id: SortOrder
  patientId: SortOrder
}

input PatientScannedDocumentOrderByWithRelationInput {
  createdAt: SortOrder
  documentCollectionDate: SortOrder
  documentCollectionName: SortOrder
  documentCollectionUrls: SortOrder
  id: SortOrder
  patient: PatientOrderByWithRelationInput
  patientId: SortOrder
}

enum PatientScannedDocumentScalarFieldEnum {
  createdAt
  documentCollectionDate
  documentCollectionName
  documentCollectionUrls
  id
  patientId
}

input PatientScannedDocumentScalarWhereInput {
  AND: [PatientScannedDocumentScalarWhereInput!]
  NOT: [PatientScannedDocumentScalarWhereInput!]
  OR: [PatientScannedDocumentScalarWhereInput!]
  createdAt: DateTimeFilter
  documentCollectionDate: DateTimeFilter
  documentCollectionName: StringFilter
  documentCollectionUrls: StringNullableListFilter
  id: StringFilter
  patientId: StringFilter
}

input PatientScannedDocumentScalarWhereWithAggregatesInput {
  AND: [PatientScannedDocumentScalarWhereWithAggregatesInput!]
  NOT: [PatientScannedDocumentScalarWhereWithAggregatesInput!]
  OR: [PatientScannedDocumentScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  documentCollectionDate: DateTimeWithAggregatesFilter
  documentCollectionName: StringWithAggregatesFilter
  documentCollectionUrls: StringNullableListFilter
  id: StringWithAggregatesFilter
  patientId: StringWithAggregatesFilter
}

input PatientScannedDocumentUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  documentCollectionDate: DateTimeFieldUpdateOperationsInput
  documentCollectionName: StringFieldUpdateOperationsInput
  documentCollectionUrls: PatientScannedDocumentUpdatedocumentCollectionUrlsInput
  id: StringFieldUpdateOperationsInput
  patient: PatientUpdateOneRequiredWithoutPatientScanedDocumentNestedInput
}

input PatientScannedDocumentUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  documentCollectionDate: DateTimeFieldUpdateOperationsInput
  documentCollectionName: StringFieldUpdateOperationsInput
  documentCollectionUrls: PatientScannedDocumentUpdatedocumentCollectionUrlsInput
  id: StringFieldUpdateOperationsInput
}

input PatientScannedDocumentUpdateManyWithWhereWithoutPatientInput {
  data: PatientScannedDocumentUpdateManyMutationInput!
  where: PatientScannedDocumentScalarWhereInput!
}

input PatientScannedDocumentUpdateManyWithoutPatientNestedInput {
  connect: [PatientScannedDocumentWhereUniqueInput!]
  connectOrCreate: [PatientScannedDocumentCreateOrConnectWithoutPatientInput!]
  create: [PatientScannedDocumentCreateWithoutPatientInput!]
  createMany: PatientScannedDocumentCreateManyPatientInputEnvelope
  delete: [PatientScannedDocumentWhereUniqueInput!]
  deleteMany: [PatientScannedDocumentScalarWhereInput!]
  disconnect: [PatientScannedDocumentWhereUniqueInput!]
  set: [PatientScannedDocumentWhereUniqueInput!]
  update: [PatientScannedDocumentUpdateWithWhereUniqueWithoutPatientInput!]
  updateMany: [PatientScannedDocumentUpdateManyWithWhereWithoutPatientInput!]
  upsert: [PatientScannedDocumentUpsertWithWhereUniqueWithoutPatientInput!]
}

input PatientScannedDocumentUpdateWithWhereUniqueWithoutPatientInput {
  data: PatientScannedDocumentUpdateWithoutPatientInput!
  where: PatientScannedDocumentWhereUniqueInput!
}

input PatientScannedDocumentUpdateWithoutPatientInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  documentCollectionDate: DateTimeFieldUpdateOperationsInput
  documentCollectionName: StringFieldUpdateOperationsInput
  documentCollectionUrls: PatientScannedDocumentUpdatedocumentCollectionUrlsInput
  id: StringFieldUpdateOperationsInput
}

input PatientScannedDocumentUpdatedocumentCollectionUrlsInput {
  push: [String!]
  set: [String!]
}

input PatientScannedDocumentUpsertWithWhereUniqueWithoutPatientInput {
  create: PatientScannedDocumentCreateWithoutPatientInput!
  update: PatientScannedDocumentUpdateWithoutPatientInput!
  where: PatientScannedDocumentWhereUniqueInput!
}

input PatientScannedDocumentWhereInput {
  AND: [PatientScannedDocumentWhereInput!]
  NOT: [PatientScannedDocumentWhereInput!]
  OR: [PatientScannedDocumentWhereInput!]
  createdAt: DateTimeFilter
  documentCollectionDate: DateTimeFilter
  documentCollectionName: StringFilter
  documentCollectionUrls: StringNullableListFilter
  id: StringFilter
  patient: PatientRelationFilter
  patientId: StringFilter
}

input PatientScannedDocumentWhereUniqueInput {
  AND: [PatientScannedDocumentWhereInput!]
  NOT: [PatientScannedDocumentWhereInput!]
  OR: [PatientScannedDocumentWhereInput!]
  createdAt: DateTimeFilter
  documentCollectionDate: DateTimeFilter
  documentCollectionName: StringFilter
  documentCollectionUrls: StringNullableListFilter
  id: String
  patient: PatientRelationFilter
  patientId: StringFilter
}

type PatientSumAggregate {
  height: Float
  weight: Float
}

input PatientSumOrderByAggregateInput {
  height: SortOrder
  weight: SortOrder
}

input PatientUpdateInput {
  ClinicalEvent: ClinicalEventUpdateManyWithoutPatientNestedInput
  ConsultationList: ConsultationListUpdateManyWithoutPatientNestedInput
  DocumentStore: DocumentStoreUpdateManyWithoutPatientNestedInput
  PatientScanedDocument: PatientScannedDocumentUpdateManyWithoutPatientNestedInput
  WorkingList: WorkingListUpdateManyWithoutPatientNestedInput
  address: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  ddn: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  height: NullableFloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  informationsConfirmed: BoolFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  nTel: NullableStringFieldUpdateOperationsInput
  onTrash: BoolFieldUpdateOperationsInput
  patientAvatar: NullableStringFieldUpdateOperationsInput
  sexe: EnumSexeFieldUpdateOperationsInput
  updated: DateTimeFieldUpdateOperationsInput
  weight: NullableFloatFieldUpdateOperationsInput
}

input PatientUpdateManyMutationInput {
  address: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  ddn: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  height: NullableFloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  informationsConfirmed: BoolFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  nTel: NullableStringFieldUpdateOperationsInput
  onTrash: BoolFieldUpdateOperationsInput
  patientAvatar: NullableStringFieldUpdateOperationsInput
  sexe: EnumSexeFieldUpdateOperationsInput
  updated: DateTimeFieldUpdateOperationsInput
  weight: NullableFloatFieldUpdateOperationsInput
}

input PatientUpdateOneRequiredWithoutClinicalEventNestedInput {
  connect: PatientWhereUniqueInput
  connectOrCreate: PatientCreateOrConnectWithoutClinicalEventInput
  create: PatientCreateWithoutClinicalEventInput
  update: PatientUpdateToOneWithWhereWithoutClinicalEventInput
  upsert: PatientUpsertWithoutClinicalEventInput
}

input PatientUpdateOneRequiredWithoutConsultationListNestedInput {
  connect: PatientWhereUniqueInput
  connectOrCreate: PatientCreateOrConnectWithoutConsultationListInput
  create: PatientCreateWithoutConsultationListInput
  update: PatientUpdateToOneWithWhereWithoutConsultationListInput
  upsert: PatientUpsertWithoutConsultationListInput
}

input PatientUpdateOneRequiredWithoutDocumentStoreNestedInput {
  connect: PatientWhereUniqueInput
  connectOrCreate: PatientCreateOrConnectWithoutDocumentStoreInput
  create: PatientCreateWithoutDocumentStoreInput
  update: PatientUpdateToOneWithWhereWithoutDocumentStoreInput
  upsert: PatientUpsertWithoutDocumentStoreInput
}

input PatientUpdateOneRequiredWithoutPatientScanedDocumentNestedInput {
  connect: PatientWhereUniqueInput
  connectOrCreate: PatientCreateOrConnectWithoutPatientScanedDocumentInput
  create: PatientCreateWithoutPatientScanedDocumentInput
  update: PatientUpdateToOneWithWhereWithoutPatientScanedDocumentInput
  upsert: PatientUpsertWithoutPatientScanedDocumentInput
}

input PatientUpdateOneRequiredWithoutWorkingListNestedInput {
  connect: PatientWhereUniqueInput
  connectOrCreate: PatientCreateOrConnectWithoutWorkingListInput
  create: PatientCreateWithoutWorkingListInput
  update: PatientUpdateToOneWithWhereWithoutWorkingListInput
  upsert: PatientUpsertWithoutWorkingListInput
}

input PatientUpdateToOneWithWhereWithoutClinicalEventInput {
  data: PatientUpdateWithoutClinicalEventInput!
  where: PatientWhereInput
}

input PatientUpdateToOneWithWhereWithoutConsultationListInput {
  data: PatientUpdateWithoutConsultationListInput!
  where: PatientWhereInput
}

input PatientUpdateToOneWithWhereWithoutDocumentStoreInput {
  data: PatientUpdateWithoutDocumentStoreInput!
  where: PatientWhereInput
}

input PatientUpdateToOneWithWhereWithoutPatientScanedDocumentInput {
  data: PatientUpdateWithoutPatientScanedDocumentInput!
  where: PatientWhereInput
}

input PatientUpdateToOneWithWhereWithoutWorkingListInput {
  data: PatientUpdateWithoutWorkingListInput!
  where: PatientWhereInput
}

input PatientUpdateWithoutClinicalEventInput {
  ConsultationList: ConsultationListUpdateManyWithoutPatientNestedInput
  DocumentStore: DocumentStoreUpdateManyWithoutPatientNestedInput
  PatientScanedDocument: PatientScannedDocumentUpdateManyWithoutPatientNestedInput
  WorkingList: WorkingListUpdateManyWithoutPatientNestedInput
  address: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  ddn: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  height: NullableFloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  informationsConfirmed: BoolFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  nTel: NullableStringFieldUpdateOperationsInput
  onTrash: BoolFieldUpdateOperationsInput
  patientAvatar: NullableStringFieldUpdateOperationsInput
  sexe: EnumSexeFieldUpdateOperationsInput
  updated: DateTimeFieldUpdateOperationsInput
  weight: NullableFloatFieldUpdateOperationsInput
}

input PatientUpdateWithoutConsultationListInput {
  ClinicalEvent: ClinicalEventUpdateManyWithoutPatientNestedInput
  DocumentStore: DocumentStoreUpdateManyWithoutPatientNestedInput
  PatientScanedDocument: PatientScannedDocumentUpdateManyWithoutPatientNestedInput
  WorkingList: WorkingListUpdateManyWithoutPatientNestedInput
  address: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  ddn: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  height: NullableFloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  informationsConfirmed: BoolFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  nTel: NullableStringFieldUpdateOperationsInput
  onTrash: BoolFieldUpdateOperationsInput
  patientAvatar: NullableStringFieldUpdateOperationsInput
  sexe: EnumSexeFieldUpdateOperationsInput
  updated: DateTimeFieldUpdateOperationsInput
  weight: NullableFloatFieldUpdateOperationsInput
}

input PatientUpdateWithoutDocumentStoreInput {
  ClinicalEvent: ClinicalEventUpdateManyWithoutPatientNestedInput
  ConsultationList: ConsultationListUpdateManyWithoutPatientNestedInput
  PatientScanedDocument: PatientScannedDocumentUpdateManyWithoutPatientNestedInput
  WorkingList: WorkingListUpdateManyWithoutPatientNestedInput
  address: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  ddn: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  height: NullableFloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  informationsConfirmed: BoolFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  nTel: NullableStringFieldUpdateOperationsInput
  onTrash: BoolFieldUpdateOperationsInput
  patientAvatar: NullableStringFieldUpdateOperationsInput
  sexe: EnumSexeFieldUpdateOperationsInput
  updated: DateTimeFieldUpdateOperationsInput
  weight: NullableFloatFieldUpdateOperationsInput
}

input PatientUpdateWithoutPatientScanedDocumentInput {
  ClinicalEvent: ClinicalEventUpdateManyWithoutPatientNestedInput
  ConsultationList: ConsultationListUpdateManyWithoutPatientNestedInput
  DocumentStore: DocumentStoreUpdateManyWithoutPatientNestedInput
  WorkingList: WorkingListUpdateManyWithoutPatientNestedInput
  address: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  ddn: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  height: NullableFloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  informationsConfirmed: BoolFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  nTel: NullableStringFieldUpdateOperationsInput
  onTrash: BoolFieldUpdateOperationsInput
  patientAvatar: NullableStringFieldUpdateOperationsInput
  sexe: EnumSexeFieldUpdateOperationsInput
  updated: DateTimeFieldUpdateOperationsInput
  weight: NullableFloatFieldUpdateOperationsInput
}

input PatientUpdateWithoutWorkingListInput {
  ClinicalEvent: ClinicalEventUpdateManyWithoutPatientNestedInput
  ConsultationList: ConsultationListUpdateManyWithoutPatientNestedInput
  DocumentStore: DocumentStoreUpdateManyWithoutPatientNestedInput
  PatientScanedDocument: PatientScannedDocumentUpdateManyWithoutPatientNestedInput
  address: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  ddn: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  height: NullableFloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  informationsConfirmed: BoolFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  nTel: NullableStringFieldUpdateOperationsInput
  onTrash: BoolFieldUpdateOperationsInput
  patientAvatar: NullableStringFieldUpdateOperationsInput
  sexe: EnumSexeFieldUpdateOperationsInput
  updated: DateTimeFieldUpdateOperationsInput
  weight: NullableFloatFieldUpdateOperationsInput
}

input PatientUpsertWithoutClinicalEventInput {
  create: PatientCreateWithoutClinicalEventInput!
  update: PatientUpdateWithoutClinicalEventInput!
  where: PatientWhereInput
}

input PatientUpsertWithoutConsultationListInput {
  create: PatientCreateWithoutConsultationListInput!
  update: PatientUpdateWithoutConsultationListInput!
  where: PatientWhereInput
}

input PatientUpsertWithoutDocumentStoreInput {
  create: PatientCreateWithoutDocumentStoreInput!
  update: PatientUpdateWithoutDocumentStoreInput!
  where: PatientWhereInput
}

input PatientUpsertWithoutPatientScanedDocumentInput {
  create: PatientCreateWithoutPatientScanedDocumentInput!
  update: PatientUpdateWithoutPatientScanedDocumentInput!
  where: PatientWhereInput
}

input PatientUpsertWithoutWorkingListInput {
  create: PatientCreateWithoutWorkingListInput!
  update: PatientUpdateWithoutWorkingListInput!
  where: PatientWhereInput
}

input PatientWhereInput {
  AND: [PatientWhereInput!]
  ClinicalEvent: ClinicalEventListRelationFilter
  ConsultationList: ConsultationListListRelationFilter
  DocumentStore: DocumentStoreListRelationFilter
  NOT: [PatientWhereInput!]
  OR: [PatientWhereInput!]
  PatientScanedDocument: PatientScannedDocumentListRelationFilter
  WorkingList: WorkingListListRelationFilter
  address: StringNullableFilter
  createdAt: DateTimeFilter
  ddn: DateTimeFilter
  deleted: BoolFilter
  firstName: StringFilter
  height: FloatNullableFilter
  id: StringFilter
  informationsConfirmed: BoolFilter
  lastName: StringFilter
  nTel: StringNullableFilter
  onTrash: BoolFilter
  patientAvatar: StringNullableFilter
  sexe: EnumSexeFilter
  updated: DateTimeFilter
  weight: FloatNullableFilter
}

input PatientWhereUniqueInput {
  AND: [PatientWhereInput!]
  ClinicalEvent: ClinicalEventListRelationFilter
  ConsultationList: ConsultationListListRelationFilter
  DocumentStore: DocumentStoreListRelationFilter
  NOT: [PatientWhereInput!]
  OR: [PatientWhereInput!]
  PatientScanedDocument: PatientScannedDocumentListRelationFilter
  WorkingList: WorkingListListRelationFilter
  address: StringNullableFilter
  createdAt: DateTimeFilter
  ddn: DateTimeFilter
  deleted: BoolFilter
  firstName: StringFilter
  height: FloatNullableFilter
  id: String
  informationsConfirmed: BoolFilter
  lastName: StringFilter
  nTel: StringNullableFilter
  onTrash: BoolFilter
  patientAvatar: StringNullableFilter
  sexe: EnumSexeFilter
  updated: DateTimeFilter
  weight: FloatNullableFilter
}

type Prescription {
  clinicalEvent: ClinicalEvent!
  clinicalEventId: String!
  createdAt: DateTimeISO!
  id: String!
  savedPrescription: JSON!
  updatedAt: DateTimeISO!
}

type PrescriptionCountAggregate {
  _all: Int!
  clinicalEventId: Int!
  createdAt: Int!
  id: Int!
  savedPrescription: Int!
  updatedAt: Int!
}

input PrescriptionCountOrderByAggregateInput {
  clinicalEventId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  savedPrescription: SortOrder
  updatedAt: SortOrder
}

input PrescriptionCreateInput {
  clinicalEvent: ClinicalEventCreateNestedOneWithoutPrescriptionInput!
  createdAt: DateTimeISO
  id: String
  savedPrescription: JSON
  updatedAt: DateTimeISO
}

input PrescriptionCreateManyInput {
  clinicalEventId: String!
  createdAt: DateTimeISO
  id: String
  savedPrescription: JSON
  updatedAt: DateTimeISO
}

input PrescriptionCreateNestedOneWithoutClinicalEventInput {
  connect: PrescriptionWhereUniqueInput
  connectOrCreate: PrescriptionCreateOrConnectWithoutClinicalEventInput
  create: PrescriptionCreateWithoutClinicalEventInput
}

input PrescriptionCreateOrConnectWithoutClinicalEventInput {
  create: PrescriptionCreateWithoutClinicalEventInput!
  where: PrescriptionWhereUniqueInput!
}

input PrescriptionCreateWithoutClinicalEventInput {
  createdAt: DateTimeISO
  id: String
  savedPrescription: JSON
  updatedAt: DateTimeISO
}

type PrescriptionGroupBy {
  _count: PrescriptionCountAggregate
  _max: PrescriptionMaxAggregate
  _min: PrescriptionMinAggregate
  clinicalEventId: String!
  createdAt: DateTimeISO!
  id: String!
  savedPrescription: JSON!
  updatedAt: DateTimeISO!
}

type PrescriptionMaxAggregate {
  clinicalEventId: String
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

input PrescriptionMaxOrderByAggregateInput {
  clinicalEventId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

type PrescriptionMinAggregate {
  clinicalEventId: String
  createdAt: DateTimeISO
  id: String
  updatedAt: DateTimeISO
}

input PrescriptionMinOrderByAggregateInput {
  clinicalEventId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input PrescriptionNullableRelationFilter {
  is: PrescriptionWhereInput
  isNot: PrescriptionWhereInput
}

input PrescriptionOrderByWithAggregationInput {
  _count: PrescriptionCountOrderByAggregateInput
  _max: PrescriptionMaxOrderByAggregateInput
  _min: PrescriptionMinOrderByAggregateInput
  clinicalEventId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  savedPrescription: SortOrder
  updatedAt: SortOrder
}

input PrescriptionOrderByWithRelationInput {
  clinicalEvent: ClinicalEventOrderByWithRelationInput
  clinicalEventId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  savedPrescription: SortOrder
  updatedAt: SortOrder
}

enum PrescriptionScalarFieldEnum {
  clinicalEventId
  createdAt
  id
  savedPrescription
  updatedAt
}

input PrescriptionScalarWhereWithAggregatesInput {
  AND: [PrescriptionScalarWhereWithAggregatesInput!]
  NOT: [PrescriptionScalarWhereWithAggregatesInput!]
  OR: [PrescriptionScalarWhereWithAggregatesInput!]
  clinicalEventId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  savedPrescription: JsonWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input PrescriptionUpdateInput {
  clinicalEvent: ClinicalEventUpdateOneRequiredWithoutPrescriptionNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  savedPrescription: JSON
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PrescriptionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  savedPrescription: JSON
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PrescriptionUpdateOneWithoutClinicalEventNestedInput {
  connect: PrescriptionWhereUniqueInput
  connectOrCreate: PrescriptionCreateOrConnectWithoutClinicalEventInput
  create: PrescriptionCreateWithoutClinicalEventInput
  delete: PrescriptionWhereInput
  disconnect: PrescriptionWhereInput
  update: PrescriptionUpdateToOneWithWhereWithoutClinicalEventInput
  upsert: PrescriptionUpsertWithoutClinicalEventInput
}

input PrescriptionUpdateToOneWithWhereWithoutClinicalEventInput {
  data: PrescriptionUpdateWithoutClinicalEventInput!
  where: PrescriptionWhereInput
}

input PrescriptionUpdateWithoutClinicalEventInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  savedPrescription: JSON
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PrescriptionUpsertWithoutClinicalEventInput {
  create: PrescriptionCreateWithoutClinicalEventInput!
  update: PrescriptionUpdateWithoutClinicalEventInput!
  where: PrescriptionWhereInput
}

input PrescriptionWhereInput {
  AND: [PrescriptionWhereInput!]
  NOT: [PrescriptionWhereInput!]
  OR: [PrescriptionWhereInput!]
  clinicalEvent: ClinicalEventRelationFilter
  clinicalEventId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  savedPrescription: JsonFilter
  updatedAt: DateTimeFilter
}

input PrescriptionWhereUniqueInput {
  AND: [PrescriptionWhereInput!]
  NOT: [PrescriptionWhereInput!]
  OR: [PrescriptionWhereInput!]
  clinicalEvent: ClinicalEventRelationFilter
  clinicalEventId: String
  createdAt: DateTimeFilter
  id: String
  savedPrescription: JsonFilter
  updatedAt: DateTimeFilter
}

type Query {
  aggregateClinicalEvent(cursor: ClinicalEventWhereUniqueInput, orderBy: [ClinicalEventOrderByWithRelationInput!], skip: Int, take: Int, where: ClinicalEventWhereInput): AggregateClinicalEvent!
  aggregateConsultationList(cursor: ConsultationListWhereUniqueInput, orderBy: [ConsultationListOrderByWithRelationInput!], skip: Int, take: Int, where: ConsultationListWhereInput): AggregateConsultationList!
  aggregateDocumentStore(cursor: DocumentStoreWhereUniqueInput, orderBy: [DocumentStoreOrderByWithRelationInput!], skip: Int, take: Int, where: DocumentStoreWhereInput): AggregateDocumentStore!
  aggregateDocumentTemplate(cursor: DocumentTemplateWhereUniqueInput, orderBy: [DocumentTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: DocumentTemplateWhereInput): AggregateDocumentTemplate!
  aggregateEconomizer(cursor: EconomizerWhereUniqueInput, orderBy: [EconomizerOrderByWithRelationInput!], skip: Int, take: Int, where: EconomizerWhereInput): AggregateEconomizer!
  aggregateMobileDevice(cursor: MobileDeviceWhereUniqueInput, orderBy: [MobileDeviceOrderByWithRelationInput!], skip: Int, take: Int, where: MobileDeviceWhereInput): AggregateMobileDevice!
  aggregateModality(cursor: ModalityWhereUniqueInput, orderBy: [ModalityOrderByWithRelationInput!], skip: Int, take: Int, where: ModalityWhereInput): AggregateModality!
  aggregatePatient(cursor: PatientWhereUniqueInput, orderBy: [PatientOrderByWithRelationInput!], skip: Int, take: Int, where: PatientWhereInput): AggregatePatient!
  aggregatePatientScannedDocument(cursor: PatientScannedDocumentWhereUniqueInput, orderBy: [PatientScannedDocumentOrderByWithRelationInput!], skip: Int, take: Int, where: PatientScannedDocumentWhereInput): AggregatePatientScannedDocument!
  aggregatePrescription(cursor: PrescriptionWhereUniqueInput, orderBy: [PrescriptionOrderByWithRelationInput!], skip: Int, take: Int, where: PrescriptionWhereInput): AggregatePrescription!
  aggregateSetting(cursor: SettingWhereUniqueInput, orderBy: [SettingOrderByWithRelationInput!], skip: Int, take: Int, where: SettingWhereInput): AggregateSetting!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  aggregateWorkingList(cursor: WorkingListWhereUniqueInput, orderBy: [WorkingListOrderByWithRelationInput!], skip: Int, take: Int, where: WorkingListWhereInput): AggregateWorkingList!
  authMobileApp(accessToken: String!, userId: String!, uuid: String!): MobileDevice!
  checkIfRegistered(where: ConsultationListWhereUniqueInput!): Boolean!
  clinicalEvent(where: ClinicalEventWhereUniqueInput!): ClinicalEvent
  clinicalEvents(cursor: ClinicalEventWhereUniqueInput, distinct: [ClinicalEventScalarFieldEnum!], orderBy: [ClinicalEventOrderByWithRelationInput!], skip: Int, take: Int, where: ClinicalEventWhereInput): [ClinicalEvent!]!
  consultationList(where: ConsultationListWhereUniqueInput!): ConsultationList
  consultationLists(cursor: ConsultationListWhereUniqueInput, distinct: [ConsultationListScalarFieldEnum!], orderBy: [ConsultationListOrderByWithRelationInput!], skip: Int, take: Int, where: ConsultationListWhereInput): [ConsultationList!]!
  documentStore(where: DocumentStoreWhereUniqueInput!): DocumentStore
  documentStores(cursor: DocumentStoreWhereUniqueInput, distinct: [DocumentStoreScalarFieldEnum!], orderBy: [DocumentStoreOrderByWithRelationInput!], skip: Int, take: Int, where: DocumentStoreWhereInput): [DocumentStore!]!
  documentTemplate(where: DocumentTemplateWhereUniqueInput!): DocumentTemplate
  documentTemplates(cursor: DocumentTemplateWhereUniqueInput, distinct: [DocumentTemplateScalarFieldEnum!], orderBy: [DocumentTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: DocumentTemplateWhereInput): [DocumentTemplate!]!
  economizer(where: EconomizerWhereUniqueInput!): Economizer
  economizers(cursor: EconomizerWhereUniqueInput, distinct: [EconomizerScalarFieldEnum!], orderBy: [EconomizerOrderByWithRelationInput!], skip: Int, take: Int, where: EconomizerWhereInput): [Economizer!]!
  findFirstClinicalEvent(cursor: ClinicalEventWhereUniqueInput, distinct: [ClinicalEventScalarFieldEnum!], orderBy: [ClinicalEventOrderByWithRelationInput!], skip: Int, take: Int, where: ClinicalEventWhereInput): ClinicalEvent
  findFirstClinicalEventOrThrow(cursor: ClinicalEventWhereUniqueInput, distinct: [ClinicalEventScalarFieldEnum!], orderBy: [ClinicalEventOrderByWithRelationInput!], skip: Int, take: Int, where: ClinicalEventWhereInput): ClinicalEvent
  findFirstConsultationList(cursor: ConsultationListWhereUniqueInput, distinct: [ConsultationListScalarFieldEnum!], orderBy: [ConsultationListOrderByWithRelationInput!], skip: Int, take: Int, where: ConsultationListWhereInput): ConsultationList
  findFirstConsultationListOrThrow(cursor: ConsultationListWhereUniqueInput, distinct: [ConsultationListScalarFieldEnum!], orderBy: [ConsultationListOrderByWithRelationInput!], skip: Int, take: Int, where: ConsultationListWhereInput): ConsultationList
  findFirstDocumentStore(cursor: DocumentStoreWhereUniqueInput, distinct: [DocumentStoreScalarFieldEnum!], orderBy: [DocumentStoreOrderByWithRelationInput!], skip: Int, take: Int, where: DocumentStoreWhereInput): DocumentStore
  findFirstDocumentStoreOrThrow(cursor: DocumentStoreWhereUniqueInput, distinct: [DocumentStoreScalarFieldEnum!], orderBy: [DocumentStoreOrderByWithRelationInput!], skip: Int, take: Int, where: DocumentStoreWhereInput): DocumentStore
  findFirstDocumentTemplate(cursor: DocumentTemplateWhereUniqueInput, distinct: [DocumentTemplateScalarFieldEnum!], orderBy: [DocumentTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: DocumentTemplateWhereInput): DocumentTemplate
  findFirstDocumentTemplateOrThrow(cursor: DocumentTemplateWhereUniqueInput, distinct: [DocumentTemplateScalarFieldEnum!], orderBy: [DocumentTemplateOrderByWithRelationInput!], skip: Int, take: Int, where: DocumentTemplateWhereInput): DocumentTemplate
  findFirstEconomizer(cursor: EconomizerWhereUniqueInput, distinct: [EconomizerScalarFieldEnum!], orderBy: [EconomizerOrderByWithRelationInput!], skip: Int, take: Int, where: EconomizerWhereInput): Economizer
  findFirstEconomizerOrThrow(cursor: EconomizerWhereUniqueInput, distinct: [EconomizerScalarFieldEnum!], orderBy: [EconomizerOrderByWithRelationInput!], skip: Int, take: Int, where: EconomizerWhereInput): Economizer
  findFirstMobileDevice(cursor: MobileDeviceWhereUniqueInput, distinct: [MobileDeviceScalarFieldEnum!], orderBy: [MobileDeviceOrderByWithRelationInput!], skip: Int, take: Int, where: MobileDeviceWhereInput): MobileDevice
  findFirstMobileDeviceOrThrow(cursor: MobileDeviceWhereUniqueInput, distinct: [MobileDeviceScalarFieldEnum!], orderBy: [MobileDeviceOrderByWithRelationInput!], skip: Int, take: Int, where: MobileDeviceWhereInput): MobileDevice
  findFirstModality(cursor: ModalityWhereUniqueInput, distinct: [ModalityScalarFieldEnum!], orderBy: [ModalityOrderByWithRelationInput!], skip: Int, take: Int, where: ModalityWhereInput): Modality
  findFirstModalityOrThrow(cursor: ModalityWhereUniqueInput, distinct: [ModalityScalarFieldEnum!], orderBy: [ModalityOrderByWithRelationInput!], skip: Int, take: Int, where: ModalityWhereInput): Modality
  findFirstPatient(cursor: PatientWhereUniqueInput, distinct: [PatientScalarFieldEnum!], orderBy: [PatientOrderByWithRelationInput!], skip: Int, take: Int, where: PatientWhereInput): Patient
  findFirstPatientOrThrow(cursor: PatientWhereUniqueInput, distinct: [PatientScalarFieldEnum!], orderBy: [PatientOrderByWithRelationInput!], skip: Int, take: Int, where: PatientWhereInput): Patient
  findFirstPatientScannedDocument(cursor: PatientScannedDocumentWhereUniqueInput, distinct: [PatientScannedDocumentScalarFieldEnum!], orderBy: [PatientScannedDocumentOrderByWithRelationInput!], skip: Int, take: Int, where: PatientScannedDocumentWhereInput): PatientScannedDocument
  findFirstPatientScannedDocumentOrThrow(cursor: PatientScannedDocumentWhereUniqueInput, distinct: [PatientScannedDocumentScalarFieldEnum!], orderBy: [PatientScannedDocumentOrderByWithRelationInput!], skip: Int, take: Int, where: PatientScannedDocumentWhereInput): PatientScannedDocument
  findFirstPrescription(cursor: PrescriptionWhereUniqueInput, distinct: [PrescriptionScalarFieldEnum!], orderBy: [PrescriptionOrderByWithRelationInput!], skip: Int, take: Int, where: PrescriptionWhereInput): Prescription
  findFirstPrescriptionOrThrow(cursor: PrescriptionWhereUniqueInput, distinct: [PrescriptionScalarFieldEnum!], orderBy: [PrescriptionOrderByWithRelationInput!], skip: Int, take: Int, where: PrescriptionWhereInput): Prescription
  findFirstSetting(cursor: SettingWhereUniqueInput, distinct: [SettingScalarFieldEnum!], orderBy: [SettingOrderByWithRelationInput!], skip: Int, take: Int, where: SettingWhereInput): Setting
  findFirstSettingOrThrow(cursor: SettingWhereUniqueInput, distinct: [SettingScalarFieldEnum!], orderBy: [SettingOrderByWithRelationInput!], skip: Int, take: Int, where: SettingWhereInput): Setting
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserOrThrow(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstWorkingList(cursor: WorkingListWhereUniqueInput, distinct: [WorkingListScalarFieldEnum!], orderBy: [WorkingListOrderByWithRelationInput!], skip: Int, take: Int, where: WorkingListWhereInput): WorkingList
  findFirstWorkingListOrThrow(cursor: WorkingListWhereUniqueInput, distinct: [WorkingListScalarFieldEnum!], orderBy: [WorkingListOrderByWithRelationInput!], skip: Int, take: Int, where: WorkingListWhereInput): WorkingList
  getClinicalEvent(where: ClinicalEventWhereUniqueInput!): ClinicalEvent
  getConsultationList(where: ConsultationListWhereUniqueInput!): ConsultationList
  getDataTableConfiguration(eventType: EventTypes!): [DataTableSectionModel!]
  getDocumentHeaders(patientDocumentType: PatientDocumentType!, patientId: String!): Boolean
  getDocumentStore(where: DocumentStoreWhereUniqueInput!): DocumentStore
  getDocumentTemplate(where: DocumentTemplateWhereUniqueInput!): DocumentTemplate
  getEconomizer(where: EconomizerWhereUniqueInput!): Economizer
  getMobileDevice(where: MobileDeviceWhereUniqueInput!): MobileDevice
  getModality(where: ModalityWhereUniqueInput!): Modality
  getPatient(where: PatientWhereUniqueInput!): Patient
  getPatientScannedDocument(where: PatientScannedDocumentWhereUniqueInput!): PatientScannedDocument
  getPrescription(where: PrescriptionWhereUniqueInput!): Prescription
  getSetting(where: SettingWhereUniqueInput!): Setting
  getUser(where: UserWhereUniqueInput!): User
  getWorkingList(where: WorkingListWhereUniqueInput!): WorkingList
  groupByClinicalEvent(by: [ClinicalEventScalarFieldEnum!]!, having: ClinicalEventScalarWhereWithAggregatesInput, orderBy: [ClinicalEventOrderByWithAggregationInput!], skip: Int, take: Int, where: ClinicalEventWhereInput): [ClinicalEventGroupBy!]!
  groupByConsultationList(by: [ConsultationListScalarFieldEnum!]!, having: ConsultationListScalarWhereWithAggregatesInput, orderBy: [ConsultationListOrderByWithAggregationInput!], skip: Int, take: Int, where: ConsultationListWhereInput): [ConsultationListGroupBy!]!
  groupByDocumentStore(by: [DocumentStoreScalarFieldEnum!]!, having: DocumentStoreScalarWhereWithAggregatesInput, orderBy: [DocumentStoreOrderByWithAggregationInput!], skip: Int, take: Int, where: DocumentStoreWhereInput): [DocumentStoreGroupBy!]!
  groupByDocumentTemplate(by: [DocumentTemplateScalarFieldEnum!]!, having: DocumentTemplateScalarWhereWithAggregatesInput, orderBy: [DocumentTemplateOrderByWithAggregationInput!], skip: Int, take: Int, where: DocumentTemplateWhereInput): [DocumentTemplateGroupBy!]!
  groupByEconomizer(by: [EconomizerScalarFieldEnum!]!, having: EconomizerScalarWhereWithAggregatesInput, orderBy: [EconomizerOrderByWithAggregationInput!], skip: Int, take: Int, where: EconomizerWhereInput): [EconomizerGroupBy!]!
  groupByMobileDevice(by: [MobileDeviceScalarFieldEnum!]!, having: MobileDeviceScalarWhereWithAggregatesInput, orderBy: [MobileDeviceOrderByWithAggregationInput!], skip: Int, take: Int, where: MobileDeviceWhereInput): [MobileDeviceGroupBy!]!
  groupByModality(by: [ModalityScalarFieldEnum!]!, having: ModalityScalarWhereWithAggregatesInput, orderBy: [ModalityOrderByWithAggregationInput!], skip: Int, take: Int, where: ModalityWhereInput): [ModalityGroupBy!]!
  groupByPatient(by: [PatientScalarFieldEnum!]!, having: PatientScalarWhereWithAggregatesInput, orderBy: [PatientOrderByWithAggregationInput!], skip: Int, take: Int, where: PatientWhereInput): [PatientGroupBy!]!
  groupByPatientScannedDocument(by: [PatientScannedDocumentScalarFieldEnum!]!, having: PatientScannedDocumentScalarWhereWithAggregatesInput, orderBy: [PatientScannedDocumentOrderByWithAggregationInput!], skip: Int, take: Int, where: PatientScannedDocumentWhereInput): [PatientScannedDocumentGroupBy!]!
  groupByPrescription(by: [PrescriptionScalarFieldEnum!]!, having: PrescriptionScalarWhereWithAggregatesInput, orderBy: [PrescriptionOrderByWithAggregationInput!], skip: Int, take: Int, where: PrescriptionWhereInput): [PrescriptionGroupBy!]!
  groupBySetting(by: [SettingScalarFieldEnum!]!, having: SettingScalarWhereWithAggregatesInput, orderBy: [SettingOrderByWithAggregationInput!], skip: Int, take: Int, where: SettingWhereInput): [SettingGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  groupByWorkingList(by: [WorkingListScalarFieldEnum!]!, having: WorkingListScalarWhereWithAggregatesInput, orderBy: [WorkingListOrderByWithAggregationInput!], skip: Int, take: Int, where: WorkingListWhereInput): [WorkingListGroupBy!]!
  mobileDevice(where: MobileDeviceWhereUniqueInput!): MobileDevice
  mobileDevices(cursor: MobileDeviceWhereUniqueInput, distinct: [MobileDeviceScalarFieldEnum!], orderBy: [MobileDeviceOrderByWithRelationInput!], skip: Int, take: Int, where: MobileDeviceWhereInput): [MobileDevice!]!
  modalities(cursor: ModalityWhereUniqueInput, distinct: [ModalityScalarFieldEnum!], orderBy: [ModalityOrderByWithRelationInput!], skip: Int, take: Int, where: ModalityWhereInput): [Modality!]!
  modality(where: ModalityWhereUniqueInput!): Modality
  patient(where: PatientWhereUniqueInput!): Patient
  patientScannedDocument(where: PatientScannedDocumentWhereUniqueInput!): PatientScannedDocument
  patientScannedDocuments(cursor: PatientScannedDocumentWhereUniqueInput, distinct: [PatientScannedDocumentScalarFieldEnum!], orderBy: [PatientScannedDocumentOrderByWithRelationInput!], skip: Int, take: Int, where: PatientScannedDocumentWhereInput): [PatientScannedDocument!]!
  patients(cursor: PatientWhereUniqueInput, distinct: [PatientScalarFieldEnum!], orderBy: [PatientOrderByWithRelationInput!], skip: Int, take: Int, where: PatientWhereInput): [Patient!]!
  prescription(where: PrescriptionWhereUniqueInput!): Prescription
  prescriptions(cursor: PrescriptionWhereUniqueInput, distinct: [PrescriptionScalarFieldEnum!], orderBy: [PrescriptionOrderByWithRelationInput!], skip: Int, take: Int, where: PrescriptionWhereInput): [Prescription!]!
  setting(where: SettingWhereUniqueInput!): Setting
  settings(cursor: SettingWhereUniqueInput, distinct: [SettingScalarFieldEnum!], orderBy: [SettingOrderByWithRelationInput!], skip: Int, take: Int, where: SettingWhereInput): [Setting!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  workingList(where: WorkingListWhereUniqueInput!): WorkingList
  workingLists(cursor: WorkingListWhereUniqueInput, distinct: [WorkingListScalarFieldEnum!], orderBy: [WorkingListOrderByWithRelationInput!], skip: Int, take: Int, where: WorkingListWhereInput): [WorkingList!]!
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  ADMIN
  USER
}

type Setting {
  allowedDICOMmodalities: Int!
  allowedEventTypes: [EventTypes!]!
  allowedMobileDevices_doctors: Int!
  allowedMobileDevices_secretary: Int!
  documentTemplateConfiguration: String
  id: String!
}

type SettingAvgAggregate {
  allowedDICOMmodalities: Float
  allowedMobileDevices_doctors: Float
  allowedMobileDevices_secretary: Float
}

input SettingAvgOrderByAggregateInput {
  allowedDICOMmodalities: SortOrder
  allowedMobileDevices_doctors: SortOrder
  allowedMobileDevices_secretary: SortOrder
}

type SettingCountAggregate {
  _all: Int!
  allowedDICOMmodalities: Int!
  allowedEventTypes: Int!
  allowedMobileDevices_doctors: Int!
  allowedMobileDevices_secretary: Int!
  documentTemplateConfiguration: Int!
  id: Int!
}

input SettingCountOrderByAggregateInput {
  allowedDICOMmodalities: SortOrder
  allowedEventTypes: SortOrder
  allowedMobileDevices_doctors: SortOrder
  allowedMobileDevices_secretary: SortOrder
  documentTemplateConfiguration: SortOrder
  id: SortOrder
}

input SettingCreateInput {
  allowedDICOMmodalities: Int
  allowedEventTypes: SettingCreateallowedEventTypesInput
  allowedMobileDevices_doctors: Int
  allowedMobileDevices_secretary: Int
  documentTemplateConfiguration: String
  id: String
}

input SettingCreateManyInput {
  allowedDICOMmodalities: Int
  allowedEventTypes: SettingCreateallowedEventTypesInput
  allowedMobileDevices_doctors: Int
  allowedMobileDevices_secretary: Int
  documentTemplateConfiguration: String
  id: String
}

input SettingCreateallowedEventTypesInput {
  set: [EventTypes!]!
}

type SettingGroupBy {
  _avg: SettingAvgAggregate
  _count: SettingCountAggregate
  _max: SettingMaxAggregate
  _min: SettingMinAggregate
  _sum: SettingSumAggregate
  allowedDICOMmodalities: Int!
  allowedEventTypes: [EventTypes!]
  allowedMobileDevices_doctors: Int!
  allowedMobileDevices_secretary: Int!
  documentTemplateConfiguration: String
  id: String!
}

type SettingMaxAggregate {
  allowedDICOMmodalities: Int
  allowedMobileDevices_doctors: Int
  allowedMobileDevices_secretary: Int
  documentTemplateConfiguration: String
  id: String
}

input SettingMaxOrderByAggregateInput {
  allowedDICOMmodalities: SortOrder
  allowedMobileDevices_doctors: SortOrder
  allowedMobileDevices_secretary: SortOrder
  documentTemplateConfiguration: SortOrder
  id: SortOrder
}

type SettingMinAggregate {
  allowedDICOMmodalities: Int
  allowedMobileDevices_doctors: Int
  allowedMobileDevices_secretary: Int
  documentTemplateConfiguration: String
  id: String
}

input SettingMinOrderByAggregateInput {
  allowedDICOMmodalities: SortOrder
  allowedMobileDevices_doctors: SortOrder
  allowedMobileDevices_secretary: SortOrder
  documentTemplateConfiguration: SortOrder
  id: SortOrder
}

input SettingOrderByWithAggregationInput {
  _avg: SettingAvgOrderByAggregateInput
  _count: SettingCountOrderByAggregateInput
  _max: SettingMaxOrderByAggregateInput
  _min: SettingMinOrderByAggregateInput
  _sum: SettingSumOrderByAggregateInput
  allowedDICOMmodalities: SortOrder
  allowedEventTypes: SortOrder
  allowedMobileDevices_doctors: SortOrder
  allowedMobileDevices_secretary: SortOrder
  documentTemplateConfiguration: SortOrderInput
  id: SortOrder
}

input SettingOrderByWithRelationInput {
  allowedDICOMmodalities: SortOrder
  allowedEventTypes: SortOrder
  allowedMobileDevices_doctors: SortOrder
  allowedMobileDevices_secretary: SortOrder
  documentTemplateConfiguration: SortOrderInput
  id: SortOrder
}

enum SettingScalarFieldEnum {
  allowedDICOMmodalities
  allowedEventTypes
  allowedMobileDevices_doctors
  allowedMobileDevices_secretary
  documentTemplateConfiguration
  id
}

input SettingScalarWhereWithAggregatesInput {
  AND: [SettingScalarWhereWithAggregatesInput!]
  NOT: [SettingScalarWhereWithAggregatesInput!]
  OR: [SettingScalarWhereWithAggregatesInput!]
  allowedDICOMmodalities: IntWithAggregatesFilter
  allowedEventTypes: EnumEventTypesNullableListFilter
  allowedMobileDevices_doctors: IntWithAggregatesFilter
  allowedMobileDevices_secretary: IntWithAggregatesFilter
  documentTemplateConfiguration: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
}

type SettingSumAggregate {
  allowedDICOMmodalities: Int
  allowedMobileDevices_doctors: Int
  allowedMobileDevices_secretary: Int
}

input SettingSumOrderByAggregateInput {
  allowedDICOMmodalities: SortOrder
  allowedMobileDevices_doctors: SortOrder
  allowedMobileDevices_secretary: SortOrder
}

input SettingUpdateInput {
  allowedDICOMmodalities: IntFieldUpdateOperationsInput
  allowedEventTypes: SettingUpdateallowedEventTypesInput
  allowedMobileDevices_doctors: IntFieldUpdateOperationsInput
  allowedMobileDevices_secretary: IntFieldUpdateOperationsInput
  documentTemplateConfiguration: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input SettingUpdateManyMutationInput {
  allowedDICOMmodalities: IntFieldUpdateOperationsInput
  allowedEventTypes: SettingUpdateallowedEventTypesInput
  allowedMobileDevices_doctors: IntFieldUpdateOperationsInput
  allowedMobileDevices_secretary: IntFieldUpdateOperationsInput
  documentTemplateConfiguration: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input SettingUpdateallowedEventTypesInput {
  push: [EventTypes!]
  set: [EventTypes!]
}

input SettingWhereInput {
  AND: [SettingWhereInput!]
  NOT: [SettingWhereInput!]
  OR: [SettingWhereInput!]
  allowedDICOMmodalities: IntFilter
  allowedEventTypes: EnumEventTypesNullableListFilter
  allowedMobileDevices_doctors: IntFilter
  allowedMobileDevices_secretary: IntFilter
  documentTemplateConfiguration: StringNullableFilter
  id: StringFilter
}

input SettingWhereUniqueInput {
  AND: [SettingWhereInput!]
  NOT: [SettingWhereInput!]
  OR: [SettingWhereInput!]
  allowedDICOMmodalities: IntFilter
  allowedEventTypes: EnumEventTypesNullableListFilter
  allowedMobileDevices_doctors: IntFilter
  allowedMobileDevices_secretary: IntFilter
  documentTemplateConfiguration: StringNullableFilter
  id: String
}

enum Sexe {
  F
  M
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Subscription {
  appSubscription(subscriptionSpecificId: [String!]!, userId: String!): AppSubscriptionModel!
  insertDataSubscription(clinicalEventId: String!): InsertDataModel!
}

enum TemplateSpeciality {
  CARDIOLOGY
  GYNECOLOGY
}

type User {
  ClinicalEvent(cursor: ClinicalEventWhereUniqueInput, distinct: [ClinicalEventScalarFieldEnum!], orderBy: [ClinicalEventOrderByWithRelationInput!], skip: Int, take: Int, where: ClinicalEventWhereInput): [ClinicalEvent!]!
  WorkingList(cursor: WorkingListWhereUniqueInput, distinct: [WorkingListScalarFieldEnum!], orderBy: [WorkingListOrderByWithRelationInput!], skip: Int, take: Int, where: WorkingListWhereInput): [WorkingList!]!
  _count: UserCount
  avatarUrl: String
  createdAt: DateTimeISO!
  editorKey: String!
  email: String!
  firstName: String
  fullName: String
  id: String!
  lastConnection: DateTimeISO!
  lastName: String
  phoneNumbers: [String!]!
  role: Role!
  searchApiKey: String!
  searchApiKeyId: Int
  userId: String!
}

type UserAvgAggregate {
  searchApiKeyId: Float
}

input UserAvgOrderByAggregateInput {
  searchApiKeyId: SortOrder
}

type UserCount {
  ClinicalEvent(where: ClinicalEventWhereInput): Int!
  WorkingList(where: WorkingListWhereInput): Int!
}

type UserCountAggregate {
  _all: Int!
  avatarUrl: Int!
  createdAt: Int!
  editorKey: Int!
  email: Int!
  firstName: Int!
  fullName: Int!
  id: Int!
  lastConnection: Int!
  lastName: Int!
  phoneNumbers: Int!
  role: Int!
  searchApiKey: Int!
  searchApiKeyId: Int!
  userId: Int!
}

input UserCountOrderByAggregateInput {
  avatarUrl: SortOrder
  createdAt: SortOrder
  editorKey: SortOrder
  email: SortOrder
  firstName: SortOrder
  fullName: SortOrder
  id: SortOrder
  lastConnection: SortOrder
  lastName: SortOrder
  phoneNumbers: SortOrder
  role: SortOrder
  searchApiKey: SortOrder
  searchApiKeyId: SortOrder
  userId: SortOrder
}

input UserCreateInput {
  ClinicalEvent: ClinicalEventCreateNestedManyWithoutUserInput
  WorkingList: WorkingListCreateNestedManyWithoutUserInput
  avatarUrl: String
  createdAt: DateTimeISO
  editorKey: String
  email: String!
  firstName: String
  fullName: String
  id: String
  lastConnection: DateTimeISO
  lastName: String
  phoneNumbers: UserCreatephoneNumbersInput
  role: Role
  searchApiKey: String
  searchApiKeyId: Int
  userId: String!
}

input UserCreateManyInput {
  avatarUrl: String
  createdAt: DateTimeISO
  editorKey: String
  email: String!
  firstName: String
  fullName: String
  id: String
  lastConnection: DateTimeISO
  lastName: String
  phoneNumbers: UserCreatephoneNumbersInput
  role: Role
  searchApiKey: String
  searchApiKeyId: Int
  userId: String!
}

input UserCreateNestedOneWithoutClinicalEventInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutClinicalEventInput
  create: UserCreateWithoutClinicalEventInput
}

input UserCreateNestedOneWithoutWorkingListInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutWorkingListInput
  create: UserCreateWithoutWorkingListInput
}

input UserCreateOrConnectWithoutClinicalEventInput {
  create: UserCreateWithoutClinicalEventInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutWorkingListInput {
  create: UserCreateWithoutWorkingListInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutClinicalEventInput {
  WorkingList: WorkingListCreateNestedManyWithoutUserInput
  avatarUrl: String
  createdAt: DateTimeISO
  editorKey: String
  email: String!
  firstName: String
  fullName: String
  id: String
  lastConnection: DateTimeISO
  lastName: String
  phoneNumbers: UserCreatephoneNumbersInput
  role: Role
  searchApiKey: String
  searchApiKeyId: Int
  userId: String!
}

input UserCreateWithoutWorkingListInput {
  ClinicalEvent: ClinicalEventCreateNestedManyWithoutUserInput
  avatarUrl: String
  createdAt: DateTimeISO
  editorKey: String
  email: String!
  firstName: String
  fullName: String
  id: String
  lastConnection: DateTimeISO
  lastName: String
  phoneNumbers: UserCreatephoneNumbersInput
  role: Role
  searchApiKey: String
  searchApiKeyId: Int
  userId: String!
}

input UserCreatephoneNumbersInput {
  set: [String!]!
}

type UserGroupBy {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
  avatarUrl: String
  createdAt: DateTimeISO!
  editorKey: String!
  email: String!
  firstName: String
  fullName: String
  id: String!
  lastConnection: DateTimeISO!
  lastName: String
  phoneNumbers: [String!]
  role: Role!
  searchApiKey: String!
  searchApiKeyId: Int
  userId: String!
}

type UserMaxAggregate {
  avatarUrl: String
  createdAt: DateTimeISO
  editorKey: String
  email: String
  firstName: String
  fullName: String
  id: String
  lastConnection: DateTimeISO
  lastName: String
  role: Role
  searchApiKey: String
  searchApiKeyId: Int
  userId: String
}

input UserMaxOrderByAggregateInput {
  avatarUrl: SortOrder
  createdAt: SortOrder
  editorKey: SortOrder
  email: SortOrder
  firstName: SortOrder
  fullName: SortOrder
  id: SortOrder
  lastConnection: SortOrder
  lastName: SortOrder
  role: SortOrder
  searchApiKey: SortOrder
  searchApiKeyId: SortOrder
  userId: SortOrder
}

type UserMinAggregate {
  avatarUrl: String
  createdAt: DateTimeISO
  editorKey: String
  email: String
  firstName: String
  fullName: String
  id: String
  lastConnection: DateTimeISO
  lastName: String
  role: Role
  searchApiKey: String
  searchApiKeyId: Int
  userId: String
}

input UserMinOrderByAggregateInput {
  avatarUrl: SortOrder
  createdAt: SortOrder
  editorKey: SortOrder
  email: SortOrder
  firstName: SortOrder
  fullName: SortOrder
  id: SortOrder
  lastConnection: SortOrder
  lastName: SortOrder
  role: SortOrder
  searchApiKey: SortOrder
  searchApiKeyId: SortOrder
  userId: SortOrder
}

input UserOrderByWithAggregationInput {
  _avg: UserAvgOrderByAggregateInput
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
  avatarUrl: SortOrderInput
  createdAt: SortOrder
  editorKey: SortOrder
  email: SortOrder
  firstName: SortOrderInput
  fullName: SortOrderInput
  id: SortOrder
  lastConnection: SortOrder
  lastName: SortOrderInput
  phoneNumbers: SortOrder
  role: SortOrder
  searchApiKey: SortOrder
  searchApiKeyId: SortOrderInput
  userId: SortOrder
}

input UserOrderByWithRelationInput {
  ClinicalEvent: ClinicalEventOrderByRelationAggregateInput
  WorkingList: WorkingListOrderByRelationAggregateInput
  avatarUrl: SortOrderInput
  createdAt: SortOrder
  editorKey: SortOrder
  email: SortOrder
  firstName: SortOrderInput
  fullName: SortOrderInput
  id: SortOrder
  lastConnection: SortOrder
  lastName: SortOrderInput
  phoneNumbers: SortOrder
  role: SortOrder
  searchApiKey: SortOrder
  searchApiKeyId: SortOrderInput
  userId: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  avatarUrl
  createdAt
  editorKey
  email
  firstName
  fullName
  id
  lastConnection
  lastName
  phoneNumbers
  role
  searchApiKey
  searchApiKeyId
  userId
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  avatarUrl: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  editorKey: StringWithAggregatesFilter
  email: StringWithAggregatesFilter
  firstName: StringNullableWithAggregatesFilter
  fullName: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  lastConnection: DateTimeWithAggregatesFilter
  lastName: StringNullableWithAggregatesFilter
  phoneNumbers: StringNullableListFilter
  role: EnumRoleWithAggregatesFilter
  searchApiKey: StringWithAggregatesFilter
  searchApiKeyId: IntNullableWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type UserSumAggregate {
  searchApiKeyId: Int
}

input UserSumOrderByAggregateInput {
  searchApiKeyId: SortOrder
}

input UserUpdateInput {
  ClinicalEvent: ClinicalEventUpdateManyWithoutUserNestedInput
  WorkingList: WorkingListUpdateManyWithoutUserNestedInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editorKey: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastConnection: DateTimeFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  phoneNumbers: UserUpdatephoneNumbersInput
  role: EnumRoleFieldUpdateOperationsInput
  searchApiKey: StringFieldUpdateOperationsInput
  searchApiKeyId: NullableIntFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  avatarUrl: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editorKey: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastConnection: DateTimeFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  phoneNumbers: UserUpdatephoneNumbersInput
  role: EnumRoleFieldUpdateOperationsInput
  searchApiKey: StringFieldUpdateOperationsInput
  searchApiKeyId: NullableIntFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutClinicalEventNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutClinicalEventInput
  create: UserCreateWithoutClinicalEventInput
  update: UserUpdateToOneWithWhereWithoutClinicalEventInput
  upsert: UserUpsertWithoutClinicalEventInput
}

input UserUpdateOneRequiredWithoutWorkingListNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutWorkingListInput
  create: UserCreateWithoutWorkingListInput
  update: UserUpdateToOneWithWhereWithoutWorkingListInput
  upsert: UserUpsertWithoutWorkingListInput
}

input UserUpdateToOneWithWhereWithoutClinicalEventInput {
  data: UserUpdateWithoutClinicalEventInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutWorkingListInput {
  data: UserUpdateWithoutWorkingListInput!
  where: UserWhereInput
}

input UserUpdateWithoutClinicalEventInput {
  WorkingList: WorkingListUpdateManyWithoutUserNestedInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editorKey: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastConnection: DateTimeFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  phoneNumbers: UserUpdatephoneNumbersInput
  role: EnumRoleFieldUpdateOperationsInput
  searchApiKey: StringFieldUpdateOperationsInput
  searchApiKeyId: NullableIntFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutWorkingListInput {
  ClinicalEvent: ClinicalEventUpdateManyWithoutUserNestedInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  editorKey: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastConnection: DateTimeFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  phoneNumbers: UserUpdatephoneNumbersInput
  role: EnumRoleFieldUpdateOperationsInput
  searchApiKey: StringFieldUpdateOperationsInput
  searchApiKeyId: NullableIntFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input UserUpdatephoneNumbersInput {
  push: [String!]
  set: [String!]
}

input UserUpsertWithoutClinicalEventInput {
  create: UserCreateWithoutClinicalEventInput!
  update: UserUpdateWithoutClinicalEventInput!
  where: UserWhereInput
}

input UserUpsertWithoutWorkingListInput {
  create: UserCreateWithoutWorkingListInput!
  update: UserUpdateWithoutWorkingListInput!
  where: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  ClinicalEvent: ClinicalEventListRelationFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  WorkingList: WorkingListListRelationFilter
  avatarUrl: StringNullableFilter
  createdAt: DateTimeFilter
  editorKey: StringFilter
  email: StringFilter
  firstName: StringNullableFilter
  fullName: StringNullableFilter
  id: StringFilter
  lastConnection: DateTimeFilter
  lastName: StringNullableFilter
  phoneNumbers: StringNullableListFilter
  role: EnumRoleFilter
  searchApiKey: StringFilter
  searchApiKeyId: IntNullableFilter
  userId: StringFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  ClinicalEvent: ClinicalEventListRelationFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  WorkingList: WorkingListListRelationFilter
  avatarUrl: StringNullableFilter
  createdAt: DateTimeFilter
  editorKey: StringFilter
  email: String
  firstName: StringNullableFilter
  fullName: StringNullableFilter
  id: String
  lastConnection: DateTimeFilter
  lastName: StringNullableFilter
  phoneNumbers: StringNullableListFilter
  role: EnumRoleFilter
  searchApiKey: StringFilter
  searchApiKeyId: IntNullableFilter
  userId: String
}

""""""
enum WidgetTypesEnums {
  pictureGenerator
  table
}

union WidgetUnion = DataTableConfigModel | pictureGeneratorConfigModel

type WorkingList {
  clinicalEvent: ClinicalEvent!
  clinicalEventId: String!
  createdAt: DateTimeISO!
  id: String!
  linkId: String
  linked: Boolean!
  locked: Boolean!
  modality: Modality!
  modalityExamStatus: ModalityExamStatus!
  modalityId: String!
  patient: Patient!
  patientId: String!
  updatedAt: DateTimeISO!
  user: User!
  userId: String!
}

type WorkingListCountAggregate {
  _all: Int!
  clinicalEventId: Int!
  createdAt: Int!
  id: Int!
  linkId: Int!
  linked: Int!
  locked: Int!
  modalityExamStatus: Int!
  modalityId: Int!
  patientId: Int!
  updatedAt: Int!
  userId: Int!
}

input WorkingListCountOrderByAggregateInput {
  clinicalEventId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  linkId: SortOrder
  linked: SortOrder
  locked: SortOrder
  modalityExamStatus: SortOrder
  modalityId: SortOrder
  patientId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input WorkingListCreateInput {
  clinicalEvent: ClinicalEventCreateNestedOneWithoutWorkingListInput!
  createdAt: DateTimeISO
  id: String
  linkId: String
  linked: Boolean
  locked: Boolean
  modality: ModalityCreateNestedOneWithoutWorkingListInput!
  modalityExamStatus: ModalityExamStatus
  patient: PatientCreateNestedOneWithoutWorkingListInput!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutWorkingListInput!
}

input WorkingListCreateManyClinicalEventInput {
  createdAt: DateTimeISO
  id: String
  linkId: String
  linked: Boolean
  locked: Boolean
  modalityExamStatus: ModalityExamStatus
  modalityId: String!
  patientId: String!
  updatedAt: DateTimeISO
  userId: String!
}

input WorkingListCreateManyClinicalEventInputEnvelope {
  data: [WorkingListCreateManyClinicalEventInput!]!
  skipDuplicates: Boolean
}

input WorkingListCreateManyInput {
  clinicalEventId: String!
  createdAt: DateTimeISO
  id: String
  linkId: String
  linked: Boolean
  locked: Boolean
  modalityExamStatus: ModalityExamStatus
  modalityId: String!
  patientId: String!
  updatedAt: DateTimeISO
  userId: String!
}

input WorkingListCreateManyModalityInput {
  clinicalEventId: String!
  createdAt: DateTimeISO
  id: String
  linkId: String
  linked: Boolean
  locked: Boolean
  modalityExamStatus: ModalityExamStatus
  patientId: String!
  updatedAt: DateTimeISO
  userId: String!
}

input WorkingListCreateManyModalityInputEnvelope {
  data: [WorkingListCreateManyModalityInput!]!
  skipDuplicates: Boolean
}

input WorkingListCreateManyPatientInput {
  clinicalEventId: String!
  createdAt: DateTimeISO
  id: String
  linkId: String
  linked: Boolean
  locked: Boolean
  modalityExamStatus: ModalityExamStatus
  modalityId: String!
  updatedAt: DateTimeISO
  userId: String!
}

input WorkingListCreateManyPatientInputEnvelope {
  data: [WorkingListCreateManyPatientInput!]!
  skipDuplicates: Boolean
}

input WorkingListCreateManyUserInput {
  clinicalEventId: String!
  createdAt: DateTimeISO
  id: String
  linkId: String
  linked: Boolean
  locked: Boolean
  modalityExamStatus: ModalityExamStatus
  modalityId: String!
  patientId: String!
  updatedAt: DateTimeISO
}

input WorkingListCreateManyUserInputEnvelope {
  data: [WorkingListCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input WorkingListCreateNestedManyWithoutClinicalEventInput {
  connect: [WorkingListWhereUniqueInput!]
  connectOrCreate: [WorkingListCreateOrConnectWithoutClinicalEventInput!]
  create: [WorkingListCreateWithoutClinicalEventInput!]
  createMany: WorkingListCreateManyClinicalEventInputEnvelope
}

input WorkingListCreateNestedManyWithoutModalityInput {
  connect: [WorkingListWhereUniqueInput!]
  connectOrCreate: [WorkingListCreateOrConnectWithoutModalityInput!]
  create: [WorkingListCreateWithoutModalityInput!]
  createMany: WorkingListCreateManyModalityInputEnvelope
}

input WorkingListCreateNestedManyWithoutPatientInput {
  connect: [WorkingListWhereUniqueInput!]
  connectOrCreate: [WorkingListCreateOrConnectWithoutPatientInput!]
  create: [WorkingListCreateWithoutPatientInput!]
  createMany: WorkingListCreateManyPatientInputEnvelope
}

input WorkingListCreateNestedManyWithoutUserInput {
  connect: [WorkingListWhereUniqueInput!]
  connectOrCreate: [WorkingListCreateOrConnectWithoutUserInput!]
  create: [WorkingListCreateWithoutUserInput!]
  createMany: WorkingListCreateManyUserInputEnvelope
}

input WorkingListCreateOrConnectWithoutClinicalEventInput {
  create: WorkingListCreateWithoutClinicalEventInput!
  where: WorkingListWhereUniqueInput!
}

input WorkingListCreateOrConnectWithoutModalityInput {
  create: WorkingListCreateWithoutModalityInput!
  where: WorkingListWhereUniqueInput!
}

input WorkingListCreateOrConnectWithoutPatientInput {
  create: WorkingListCreateWithoutPatientInput!
  where: WorkingListWhereUniqueInput!
}

input WorkingListCreateOrConnectWithoutUserInput {
  create: WorkingListCreateWithoutUserInput!
  where: WorkingListWhereUniqueInput!
}

input WorkingListCreateWithoutClinicalEventInput {
  createdAt: DateTimeISO
  id: String
  linkId: String
  linked: Boolean
  locked: Boolean
  modality: ModalityCreateNestedOneWithoutWorkingListInput!
  modalityExamStatus: ModalityExamStatus
  patient: PatientCreateNestedOneWithoutWorkingListInput!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutWorkingListInput!
}

input WorkingListCreateWithoutModalityInput {
  clinicalEvent: ClinicalEventCreateNestedOneWithoutWorkingListInput!
  createdAt: DateTimeISO
  id: String
  linkId: String
  linked: Boolean
  locked: Boolean
  modalityExamStatus: ModalityExamStatus
  patient: PatientCreateNestedOneWithoutWorkingListInput!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutWorkingListInput!
}

input WorkingListCreateWithoutPatientInput {
  clinicalEvent: ClinicalEventCreateNestedOneWithoutWorkingListInput!
  createdAt: DateTimeISO
  id: String
  linkId: String
  linked: Boolean
  locked: Boolean
  modality: ModalityCreateNestedOneWithoutWorkingListInput!
  modalityExamStatus: ModalityExamStatus
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutWorkingListInput!
}

input WorkingListCreateWithoutUserInput {
  clinicalEvent: ClinicalEventCreateNestedOneWithoutWorkingListInput!
  createdAt: DateTimeISO
  id: String
  linkId: String
  linked: Boolean
  locked: Boolean
  modality: ModalityCreateNestedOneWithoutWorkingListInput!
  modalityExamStatus: ModalityExamStatus
  patient: PatientCreateNestedOneWithoutWorkingListInput!
  updatedAt: DateTimeISO
}

type WorkingListGroupBy {
  _count: WorkingListCountAggregate
  _max: WorkingListMaxAggregate
  _min: WorkingListMinAggregate
  clinicalEventId: String!
  createdAt: DateTimeISO!
  id: String!
  linkId: String
  linked: Boolean!
  locked: Boolean!
  modalityExamStatus: ModalityExamStatus!
  modalityId: String!
  patientId: String!
  updatedAt: DateTimeISO!
  userId: String!
}

input WorkingListListRelationFilter {
  every: WorkingListWhereInput
  none: WorkingListWhereInput
  some: WorkingListWhereInput
}

type WorkingListMaxAggregate {
  clinicalEventId: String
  createdAt: DateTimeISO
  id: String
  linkId: String
  linked: Boolean
  locked: Boolean
  modalityExamStatus: ModalityExamStatus
  modalityId: String
  patientId: String
  updatedAt: DateTimeISO
  userId: String
}

input WorkingListMaxOrderByAggregateInput {
  clinicalEventId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  linkId: SortOrder
  linked: SortOrder
  locked: SortOrder
  modalityExamStatus: SortOrder
  modalityId: SortOrder
  patientId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type WorkingListMinAggregate {
  clinicalEventId: String
  createdAt: DateTimeISO
  id: String
  linkId: String
  linked: Boolean
  locked: Boolean
  modalityExamStatus: ModalityExamStatus
  modalityId: String
  patientId: String
  updatedAt: DateTimeISO
  userId: String
}

input WorkingListMinOrderByAggregateInput {
  clinicalEventId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  linkId: SortOrder
  linked: SortOrder
  locked: SortOrder
  modalityExamStatus: SortOrder
  modalityId: SortOrder
  patientId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input WorkingListOrderByRelationAggregateInput {
  _count: SortOrder
}

input WorkingListOrderByWithAggregationInput {
  _count: WorkingListCountOrderByAggregateInput
  _max: WorkingListMaxOrderByAggregateInput
  _min: WorkingListMinOrderByAggregateInput
  clinicalEventId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  linkId: SortOrderInput
  linked: SortOrder
  locked: SortOrder
  modalityExamStatus: SortOrder
  modalityId: SortOrder
  patientId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input WorkingListOrderByWithRelationInput {
  clinicalEvent: ClinicalEventOrderByWithRelationInput
  clinicalEventId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  linkId: SortOrderInput
  linked: SortOrder
  locked: SortOrder
  modality: ModalityOrderByWithRelationInput
  modalityExamStatus: SortOrder
  modalityId: SortOrder
  patient: PatientOrderByWithRelationInput
  patientId: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum WorkingListScalarFieldEnum {
  clinicalEventId
  createdAt
  id
  linkId
  linked
  locked
  modalityExamStatus
  modalityId
  patientId
  updatedAt
  userId
}

input WorkingListScalarWhereInput {
  AND: [WorkingListScalarWhereInput!]
  NOT: [WorkingListScalarWhereInput!]
  OR: [WorkingListScalarWhereInput!]
  clinicalEventId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  linkId: StringNullableFilter
  linked: BoolFilter
  locked: BoolFilter
  modalityExamStatus: EnumModalityExamStatusFilter
  modalityId: StringFilter
  patientId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input WorkingListScalarWhereWithAggregatesInput {
  AND: [WorkingListScalarWhereWithAggregatesInput!]
  NOT: [WorkingListScalarWhereWithAggregatesInput!]
  OR: [WorkingListScalarWhereWithAggregatesInput!]
  clinicalEventId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  linkId: StringNullableWithAggregatesFilter
  linked: BoolWithAggregatesFilter
  locked: BoolWithAggregatesFilter
  modalityExamStatus: EnumModalityExamStatusWithAggregatesFilter
  modalityId: StringWithAggregatesFilter
  patientId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input WorkingListUpdateInput {
  clinicalEvent: ClinicalEventUpdateOneRequiredWithoutWorkingListNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  linkId: NullableStringFieldUpdateOperationsInput
  linked: BoolFieldUpdateOperationsInput
  locked: BoolFieldUpdateOperationsInput
  modality: ModalityUpdateOneRequiredWithoutWorkingListNestedInput
  modalityExamStatus: EnumModalityExamStatusFieldUpdateOperationsInput
  patient: PatientUpdateOneRequiredWithoutWorkingListNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutWorkingListNestedInput
}

input WorkingListUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  linkId: NullableStringFieldUpdateOperationsInput
  linked: BoolFieldUpdateOperationsInput
  locked: BoolFieldUpdateOperationsInput
  modalityExamStatus: EnumModalityExamStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input WorkingListUpdateManyWithWhereWithoutClinicalEventInput {
  data: WorkingListUpdateManyMutationInput!
  where: WorkingListScalarWhereInput!
}

input WorkingListUpdateManyWithWhereWithoutModalityInput {
  data: WorkingListUpdateManyMutationInput!
  where: WorkingListScalarWhereInput!
}

input WorkingListUpdateManyWithWhereWithoutPatientInput {
  data: WorkingListUpdateManyMutationInput!
  where: WorkingListScalarWhereInput!
}

input WorkingListUpdateManyWithWhereWithoutUserInput {
  data: WorkingListUpdateManyMutationInput!
  where: WorkingListScalarWhereInput!
}

input WorkingListUpdateManyWithoutClinicalEventNestedInput {
  connect: [WorkingListWhereUniqueInput!]
  connectOrCreate: [WorkingListCreateOrConnectWithoutClinicalEventInput!]
  create: [WorkingListCreateWithoutClinicalEventInput!]
  createMany: WorkingListCreateManyClinicalEventInputEnvelope
  delete: [WorkingListWhereUniqueInput!]
  deleteMany: [WorkingListScalarWhereInput!]
  disconnect: [WorkingListWhereUniqueInput!]
  set: [WorkingListWhereUniqueInput!]
  update: [WorkingListUpdateWithWhereUniqueWithoutClinicalEventInput!]
  updateMany: [WorkingListUpdateManyWithWhereWithoutClinicalEventInput!]
  upsert: [WorkingListUpsertWithWhereUniqueWithoutClinicalEventInput!]
}

input WorkingListUpdateManyWithoutModalityNestedInput {
  connect: [WorkingListWhereUniqueInput!]
  connectOrCreate: [WorkingListCreateOrConnectWithoutModalityInput!]
  create: [WorkingListCreateWithoutModalityInput!]
  createMany: WorkingListCreateManyModalityInputEnvelope
  delete: [WorkingListWhereUniqueInput!]
  deleteMany: [WorkingListScalarWhereInput!]
  disconnect: [WorkingListWhereUniqueInput!]
  set: [WorkingListWhereUniqueInput!]
  update: [WorkingListUpdateWithWhereUniqueWithoutModalityInput!]
  updateMany: [WorkingListUpdateManyWithWhereWithoutModalityInput!]
  upsert: [WorkingListUpsertWithWhereUniqueWithoutModalityInput!]
}

input WorkingListUpdateManyWithoutPatientNestedInput {
  connect: [WorkingListWhereUniqueInput!]
  connectOrCreate: [WorkingListCreateOrConnectWithoutPatientInput!]
  create: [WorkingListCreateWithoutPatientInput!]
  createMany: WorkingListCreateManyPatientInputEnvelope
  delete: [WorkingListWhereUniqueInput!]
  deleteMany: [WorkingListScalarWhereInput!]
  disconnect: [WorkingListWhereUniqueInput!]
  set: [WorkingListWhereUniqueInput!]
  update: [WorkingListUpdateWithWhereUniqueWithoutPatientInput!]
  updateMany: [WorkingListUpdateManyWithWhereWithoutPatientInput!]
  upsert: [WorkingListUpsertWithWhereUniqueWithoutPatientInput!]
}

input WorkingListUpdateManyWithoutUserNestedInput {
  connect: [WorkingListWhereUniqueInput!]
  connectOrCreate: [WorkingListCreateOrConnectWithoutUserInput!]
  create: [WorkingListCreateWithoutUserInput!]
  createMany: WorkingListCreateManyUserInputEnvelope
  delete: [WorkingListWhereUniqueInput!]
  deleteMany: [WorkingListScalarWhereInput!]
  disconnect: [WorkingListWhereUniqueInput!]
  set: [WorkingListWhereUniqueInput!]
  update: [WorkingListUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [WorkingListUpdateManyWithWhereWithoutUserInput!]
  upsert: [WorkingListUpsertWithWhereUniqueWithoutUserInput!]
}

input WorkingListUpdateWithWhereUniqueWithoutClinicalEventInput {
  data: WorkingListUpdateWithoutClinicalEventInput!
  where: WorkingListWhereUniqueInput!
}

input WorkingListUpdateWithWhereUniqueWithoutModalityInput {
  data: WorkingListUpdateWithoutModalityInput!
  where: WorkingListWhereUniqueInput!
}

input WorkingListUpdateWithWhereUniqueWithoutPatientInput {
  data: WorkingListUpdateWithoutPatientInput!
  where: WorkingListWhereUniqueInput!
}

input WorkingListUpdateWithWhereUniqueWithoutUserInput {
  data: WorkingListUpdateWithoutUserInput!
  where: WorkingListWhereUniqueInput!
}

input WorkingListUpdateWithoutClinicalEventInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  linkId: NullableStringFieldUpdateOperationsInput
  linked: BoolFieldUpdateOperationsInput
  locked: BoolFieldUpdateOperationsInput
  modality: ModalityUpdateOneRequiredWithoutWorkingListNestedInput
  modalityExamStatus: EnumModalityExamStatusFieldUpdateOperationsInput
  patient: PatientUpdateOneRequiredWithoutWorkingListNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutWorkingListNestedInput
}

input WorkingListUpdateWithoutModalityInput {
  clinicalEvent: ClinicalEventUpdateOneRequiredWithoutWorkingListNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  linkId: NullableStringFieldUpdateOperationsInput
  linked: BoolFieldUpdateOperationsInput
  locked: BoolFieldUpdateOperationsInput
  modalityExamStatus: EnumModalityExamStatusFieldUpdateOperationsInput
  patient: PatientUpdateOneRequiredWithoutWorkingListNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutWorkingListNestedInput
}

input WorkingListUpdateWithoutPatientInput {
  clinicalEvent: ClinicalEventUpdateOneRequiredWithoutWorkingListNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  linkId: NullableStringFieldUpdateOperationsInput
  linked: BoolFieldUpdateOperationsInput
  locked: BoolFieldUpdateOperationsInput
  modality: ModalityUpdateOneRequiredWithoutWorkingListNestedInput
  modalityExamStatus: EnumModalityExamStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutWorkingListNestedInput
}

input WorkingListUpdateWithoutUserInput {
  clinicalEvent: ClinicalEventUpdateOneRequiredWithoutWorkingListNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  linkId: NullableStringFieldUpdateOperationsInput
  linked: BoolFieldUpdateOperationsInput
  locked: BoolFieldUpdateOperationsInput
  modality: ModalityUpdateOneRequiredWithoutWorkingListNestedInput
  modalityExamStatus: EnumModalityExamStatusFieldUpdateOperationsInput
  patient: PatientUpdateOneRequiredWithoutWorkingListNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input WorkingListUpsertWithWhereUniqueWithoutClinicalEventInput {
  create: WorkingListCreateWithoutClinicalEventInput!
  update: WorkingListUpdateWithoutClinicalEventInput!
  where: WorkingListWhereUniqueInput!
}

input WorkingListUpsertWithWhereUniqueWithoutModalityInput {
  create: WorkingListCreateWithoutModalityInput!
  update: WorkingListUpdateWithoutModalityInput!
  where: WorkingListWhereUniqueInput!
}

input WorkingListUpsertWithWhereUniqueWithoutPatientInput {
  create: WorkingListCreateWithoutPatientInput!
  update: WorkingListUpdateWithoutPatientInput!
  where: WorkingListWhereUniqueInput!
}

input WorkingListUpsertWithWhereUniqueWithoutUserInput {
  create: WorkingListCreateWithoutUserInput!
  update: WorkingListUpdateWithoutUserInput!
  where: WorkingListWhereUniqueInput!
}

input WorkingListWhereInput {
  AND: [WorkingListWhereInput!]
  NOT: [WorkingListWhereInput!]
  OR: [WorkingListWhereInput!]
  clinicalEvent: ClinicalEventRelationFilter
  clinicalEventId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  linkId: StringNullableFilter
  linked: BoolFilter
  locked: BoolFilter
  modality: ModalityRelationFilter
  modalityExamStatus: EnumModalityExamStatusFilter
  modalityId: StringFilter
  patient: PatientRelationFilter
  patientId: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input WorkingListWhereUniqueInput {
  AND: [WorkingListWhereInput!]
  NOT: [WorkingListWhereInput!]
  OR: [WorkingListWhereInput!]
  clinicalEvent: ClinicalEventRelationFilter
  clinicalEventId: StringFilter
  createdAt: DateTimeFilter
  id: String
  linkId: StringNullableFilter
  linked: BoolFilter
  locked: BoolFilter
  modality: ModalityRelationFilter
  modalityExamStatus: EnumModalityExamStatusFilter
  modalityId: StringFilter
  patient: PatientRelationFilter
  patientId: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

type pictureGeneratorConfigModel {
  id: String!
  paramName: String!
  widgetName: String!
  widgetType: WidgetTypesEnums!
}