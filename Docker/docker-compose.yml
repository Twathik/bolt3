version: "3.9"

x-minio-common: &minio-common
  build: .
  command: server --console-address ":9001" http://minio{1...2}/data{1...2}
  expose:
    - "9000"
    - "9001"
  environment:
    MINIO_ROOT_USER: minio
    MINIO_ROOT_PASSWORD: minio123
    MINIO_API_CORS_ALLOW_ORIGIN: ${MINIO_HOSTNAMES}
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    interval: 30s
    timeout: 20s
    retries: 3

# starts 2 docker containers running minio server instances.
# using nginx reverse proxy, load balancing, you can access
# it through port 9000.

# More info at https://github.com/pi-hole/docker-pi-hole/ and https://docs.pi-hole.net/
services:
  traefik:
    image: "traefik:v2.6"
    container_name: "traefik"
    restart: unless-stopped
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "./traefik/conf.d:/etc/traefik/conf.d"
      - "./traefik/traefik.toml:/etc/traefik/traefik.toml"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  minio:
    image: minio/minio
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - data:/data
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server --console-address ":9001" /data


  postgres:
    image: postgres:13-alpine
    container_name: "postgres"
    ports:
      - "5432:5432"
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRESQL_DB}
      POSTGRES_USER: ${POSTGRESQL_USER}
      POSTGRES_PASSWORD: ${POSTGRESQL_PASS}
      POSTGRES_HOST: postgres
    volumes:
      - ./database:/var/lib/postgresql/data
    healthcheck:
      test: "exit 0"

  keycloak:
    image: "quay.io/keycloak/keycloak:${KC_VERSION}"
    command: ["start-dev"]
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health/ready"]
    depends_on:
      postgres:
        condition: service_healthy
    container_name: "keycloak"
    environment:
      KC_METRICS_ENABLED: false
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      AUTH_CLIENT_SECRET: ${AUTH_CLIENT_SECRET}
      REDIRECT_URI: ${REDIRECT_URI}
      KEYCLOAK_LOGLEVEL: DEBUG
      #GITHUB_APP_CLIENT_SECRET: ${GITHUB_APP_CLIENT_SECRET}
      #GITHUB_APP_CLIENT_ID: ${GITHUB_APP_CLIENT_ID}
      KEYCLOAK_PATH_PREFIX: keycloak
      PROXY_ADDRESS_FORWARDING: true
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: ${POSTGRESQL_USER}
      KC_DB_PASSWORD: ${POSTGRESQL_PASS}
      KC_DB_SCHEMA: public

    volumes:
      - ./keycloakTheme:/opt/jboss/keycloak/standalone/deployments/
      - ./keycloak/realm.json:/opt/keycloak/data/import/realm.json:ro
    ports:
      - "8082:8080"
      - "9990:9990"
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - "traefik.http.routers.keycloak-admin.entrypoints=web"
      - "traefik.http.routers.keycloak-admin.service=keycloak-docker"
      - "traefik.http.routers.keycloak-admin.rule=Host(`keycloak.local`)"
      - "traefik.http.services.keycloak-docker.loadbalancer.server.port=8080"
    security_opt:
      - no-new-privileges:true
  redis:
    image: redis:6.2-alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    #links:
    #  - redis-commander

  #redis-commander:
  #  container_name: redis-commander
  ## hostname: redis-commander
  ## image: rediscommander/redis-commander:latest
  # build: .
  # restart: always
  # environment:
  #   REDIS_HOSTS: redis
  #   REDIS_HOST: redis
  #   REDIS_PORT: redis:6379
  #   REDIS_PASSWORD: eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
  #   HTTP_USER: root
  #   HTTP_PASSWORD: root
  # ports:
  #   - 8088:8081

  postgres_orthanc:
    image: postgres:13-alpine
    container_name: "postgres_orthanc"
    ports:
      - "5433:5432"
    restart: unless-stopped
    environment:
      POSTGRES_DB: orthanc
      POSTGRES_USER: ${POSTGRESQL_USER}
      POSTGRES_PASSWORD: ${POSTGRESQL_PASS}
      POSTGRES_HOST: postgres
    volumes:
      - ./orthanc/postgres_database:/var/lib/postgresql/data
    healthcheck:
      test: "exit 0"

  orthanc:
    image: osimis/orthanc:bookworm-full
    container_name: orthanc
    restart: always
    ports:
      - 4242:4242
      - 8042:8042
    depends_on:
      postgres_orthanc:
        condition: service_healthy
    environment:
      OSIMIS_WEB_VIEWER1_PLUGIN_ENABLED: "true"
      VERBOSE_ENABLED: "true"
      ORTHANC__REGISTERED_USERS: |
        {"admin": "admin"}
      OHIF_PLUGIN_ENABLED: "true"
      ORTHANC_JSON: |
        {
          "PostgreSQL": {
            "EnableIndex": true,
            "EnableStorage": false,
            "Port": 5432,
            "Host": "postgres_orthanc",
            "Database": "orthanc",
            "Username": "${POSTGRESQL_USER}",
            "Password": "${POSTGRESQL_PASS}",
            "EnableSsl": false,
            "Lock": false
          },
          "Worklists": {
            "Enable": true,
            "Database": "/var/lib/orthanc/worklists"
          },
          "DicomModalities" : {
            "horos" : [ "HOROS", "192.168.0.8", 11112 ],
            "findscu" : [ "FINDSCU", "127.0.0.1", 1234 ],
            "modality" : [ "MODALITY", "192.168.175.209", 104 ],
            "echopac" : ["ADEL-PC", "192.168.1.10", 104],
            "inova730" : ["IGS730", "3.3.3.3", 4002],
            "inova730_sub1" : ["IGS730", "192.168.65.1", 4002],
            "vividE92" : ["VIVIDE9", "192.168.1.120", 104],
            "vividE91" : ["VIVIDE9-006630", "192.168.1.100", 104],
            "modality1" : ["AET", "0.0.0.0", 104],
            "modality2" : ["AET", "0.0.0.0", 104],
            "modality3" : ["AET", "0.0.0.0", 104],
            "modality4" : ["AET", "0.0.0.0", 104]
          }
        }
    #
    volumes:
      - ./orthanc/db:/var/lib/orthanc/db/
      - ./worklists:/var/lib/orthanc/worklists

  typesense:
    image: typesense/typesense:0.25.1
    restart: on-failure
    ports:
      - "8108:8108"
    environment:
      KC_URL: "http://keycloak.local"
      KC_REALM: "bolt3"
      KC_CLIENT_ID: "bolt3"
      KC_CLIENT_SECRET: "1fhL2zhsYlkc44StVfV0z4UsCRWZFm7x"

    volumes:
      - ./typesense-data:/data
      - ./typesense-config/typesense-server.ini:/etc/typesense/typesense-server.ini
    command: "--config=/etc/typesense/typesense-server.ini"
volumes:
  data:
