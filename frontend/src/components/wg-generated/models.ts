// Code generated by wunderctl. DO NOT EDIT.

import type function_WorkingListsLinkExam from "../../../../wundergraph-server/.wundergraph/operations/WorkingLists/linkExam";
import type function_WorkingListsRefreshLinkExam from "../../../../wundergraph-server/.wundergraph/operations/WorkingLists/refreshLinkExam";
import type function_UsersGet from "../../../../wundergraph-server/.wundergraph/operations/users/get";
import type function_UsersSubscribe from "../../../../wundergraph-server/.wundergraph/operations/users/subscribe";
import type function_UsersUpdate from "../../../../wundergraph-server/.wundergraph/operations/users/update";
import type { ExtractInput, ExtractResponse } from "@wundergraph/sdk/operations";
import type { OperationErrors } from "./ts-operation-errors";
import type { GraphQLError } from "@wundergraph/sdk/client";

export interface countries_CountryFilterInput {
	code?: countries_StringQueryOperatorInput;
	continent?: countries_StringQueryOperatorInput;
	currency?: countries_StringQueryOperatorInput;
	name?: countries_StringQueryOperatorInput;
}

export interface countries_StringQueryOperatorInput {
	eq?: string;
	in?: string[];
	ne?: string;
	nin?: string[];
	regex?: string;
}

export interface mainDb_ParamDataInputType {
	paramName: string;
	paramType: mainDb_DataTableParmTypeEnumValues;
}

export interface mainDb_StringFilter {
	contains?: string;
	endsWith?: string;
	equals?: string;
	gt?: string;
	gte?: string;
	in?: string[];
	lt?: string;
	lte?: string;
	mode?: mainDb_QueryModeValues;
	not?: mainDb_NestedStringFilter;
	notIn?: string[];
	startsWith?: string;
}

export interface mainDb_NestedStringFilter {
	contains?: string;
	endsWith?: string;
	equals?: string;
	gt?: string;
	gte?: string;
	in?: string[];
	lt?: string;
	lte?: string;
	not?: mainDb_NestedStringFilter;
	notIn?: string[];
	startsWith?: string;
}

export interface mainDb_UserCreateInput {
	ClinicalEvent?: mainDb_ClinicalEventCreateNestedManyWithoutUserInput;
	WorkingList?: mainDb_WorkingListCreateNestedManyWithoutUserInput;
	avatarUrl?: string;
	createdAt?: string;
	editorKey?: string;
	email: string;
	firstName?: string;
	fullName?: string;
	id?: string;
	lastConnection?: string;
	lastName?: string;
	phoneNumbers?: mainDb_UserCreatephoneNumbersInput;
	role?: mainDb_RoleValues;
	searchApiKey?: string;
	searchApiKeyId?: number;
	userId: string;
}

export interface mainDb_ClinicalEventCreateNestedManyWithoutUserInput {
	connect?: mainDb_ClinicalEventWhereUniqueInput[];
	connectOrCreate?: mainDb_ClinicalEventCreateOrConnectWithoutUserInput[];
	create?: mainDb_ClinicalEventCreateWithoutUserInput[];
	createMany?: mainDb_ClinicalEventCreateManyUserInputEnvelope;
}

export interface mainDb_ClinicalEventWhereUniqueInput {
	AND?: mainDb_ClinicalEventWhereInput[];
	NOT?: mainDb_ClinicalEventWhereInput[];
	OR?: mainDb_ClinicalEventWhereInput[];
	Prescription?: mainDb_PrescriptionNullableRelationFilter;
	WorkingList?: mainDb_WorkingListListRelationFilter;
	clinicalDiagnosticId?: mainDb_StringNullableFilter;
	createdAt?: mainDb_DateTimeFilter;
	deleted?: mainDb_BoolFilter;
	deletedReport?: mainDb_StringNullableFilter;
	dicom?: mainDb_BoolFilter;
	dicomId?: mainDb_StringNullableFilter;
	eventCategory?: mainDb_EnumEventCategoryFilter;
	eventType?: mainDb_EnumEventTypesFilter;
	id?: string;
	patient?: mainDb_PatientRelationFilter;
	patientId?: mainDb_StringFilter;
	updatedAt?: mainDb_DateTimeFilter;
	user?: mainDb_UserRelationFilter;
	userId?: mainDb_StringFilter;
}

export interface mainDb_ClinicalEventWhereInput {
	AND?: mainDb_ClinicalEventWhereInput[];
	NOT?: mainDb_ClinicalEventWhereInput[];
	OR?: mainDb_ClinicalEventWhereInput[];
	Prescription?: mainDb_PrescriptionNullableRelationFilter;
	WorkingList?: mainDb_WorkingListListRelationFilter;
	clinicalDiagnosticId?: mainDb_StringNullableFilter;
	createdAt?: mainDb_DateTimeFilter;
	deleted?: mainDb_BoolFilter;
	deletedReport?: mainDb_StringNullableFilter;
	dicom?: mainDb_BoolFilter;
	dicomId?: mainDb_StringNullableFilter;
	eventCategory?: mainDb_EnumEventCategoryFilter;
	eventType?: mainDb_EnumEventTypesFilter;
	id?: mainDb_StringFilter;
	patient?: mainDb_PatientRelationFilter;
	patientId?: mainDb_StringFilter;
	updatedAt?: mainDb_DateTimeFilter;
	user?: mainDb_UserRelationFilter;
	userId?: mainDb_StringFilter;
}

export interface mainDb_PrescriptionNullableRelationFilter {
	is?: mainDb_PrescriptionWhereInput;
	isNot?: mainDb_PrescriptionWhereInput;
}

export interface mainDb_PrescriptionWhereInput {
	AND?: mainDb_PrescriptionWhereInput[];
	NOT?: mainDb_PrescriptionWhereInput[];
	OR?: mainDb_PrescriptionWhereInput[];
	clinicalEvent?: mainDb_ClinicalEventRelationFilter;
	clinicalEventId?: mainDb_StringFilter;
	createdAt?: mainDb_DateTimeFilter;
	id?: mainDb_StringFilter;
	savedPrescription?: mainDb_JsonFilter;
	updatedAt?: mainDb_DateTimeFilter;
}

export interface mainDb_ClinicalEventRelationFilter {
	is?: mainDb_ClinicalEventWhereInput;
	isNot?: mainDb_ClinicalEventWhereInput;
}

export interface mainDb_DateTimeFilter {
	equals?: string;
	gt?: string;
	gte?: string;
	in?: string[];
	lt?: string;
	lte?: string;
	not?: mainDb_NestedDateTimeFilter;
	notIn?: string[];
}

export interface mainDb_NestedDateTimeFilter {
	equals?: string;
	gt?: string;
	gte?: string;
	in?: string[];
	lt?: string;
	lte?: string;
	not?: mainDb_NestedDateTimeFilter;
	notIn?: string[];
}

export interface mainDb_JsonFilter {
	array_contains?: JSONValue;
	array_ends_with?: JSONValue;
	array_starts_with?: JSONValue;
	equals?: JSONValue;
	gt?: JSONValue;
	gte?: JSONValue;
	lt?: JSONValue;
	lte?: JSONValue;
	not?: JSONValue;
	path?: string[];
	string_contains?: string;
	string_ends_with?: string;
	string_starts_with?: string;
}

export interface mainDb_WorkingListListRelationFilter {
	every?: mainDb_WorkingListWhereInput;
	none?: mainDb_WorkingListWhereInput;
	some?: mainDb_WorkingListWhereInput;
}

export interface mainDb_WorkingListWhereInput {
	AND?: mainDb_WorkingListWhereInput[];
	NOT?: mainDb_WorkingListWhereInput[];
	OR?: mainDb_WorkingListWhereInput[];
	clinicalEvent?: mainDb_ClinicalEventRelationFilter;
	clinicalEventId?: mainDb_StringFilter;
	createdAt?: mainDb_DateTimeFilter;
	id?: mainDb_StringFilter;
	linkId?: mainDb_StringNullableFilter;
	linked?: mainDb_BoolFilter;
	locked?: mainDb_BoolFilter;
	modality?: mainDb_ModalityRelationFilter;
	modalityExamStatus?: mainDb_EnumModalityExamStatusFilter;
	modalityId?: mainDb_StringFilter;
	patient?: mainDb_PatientRelationFilter;
	patientId?: mainDb_StringFilter;
	updatedAt?: mainDb_DateTimeFilter;
	user?: mainDb_UserRelationFilter;
	userId?: mainDb_StringFilter;
}

export interface mainDb_StringNullableFilter {
	contains?: string;
	endsWith?: string;
	equals?: string;
	gt?: string;
	gte?: string;
	in?: string[];
	lt?: string;
	lte?: string;
	mode?: mainDb_QueryModeValues;
	not?: mainDb_NestedStringNullableFilter;
	notIn?: string[];
	startsWith?: string;
}

export interface mainDb_NestedStringNullableFilter {
	contains?: string;
	endsWith?: string;
	equals?: string;
	gt?: string;
	gte?: string;
	in?: string[];
	lt?: string;
	lte?: string;
	not?: mainDb_NestedStringNullableFilter;
	notIn?: string[];
	startsWith?: string;
}

export interface mainDb_BoolFilter {
	equals?: boolean;
	not?: mainDb_NestedBoolFilter;
}

export interface mainDb_NestedBoolFilter {
	equals?: boolean;
	not?: mainDb_NestedBoolFilter;
}

export interface mainDb_ModalityRelationFilter {
	is?: mainDb_ModalityWhereInput;
	isNot?: mainDb_ModalityWhereInput;
}

export interface mainDb_ModalityWhereInput {
	AND?: mainDb_ModalityWhereInput[];
	NOT?: mainDb_ModalityWhereInput[];
	OR?: mainDb_ModalityWhereInput[];
	WorkingList?: mainDb_WorkingListListRelationFilter;
	activated?: mainDb_BoolFilter;
	deleted?: mainDb_BoolFilter;
	enabled?: mainDb_BoolFilter;
	id?: mainDb_StringFilter;
	modalityAETitle?: mainDb_StringFilter;
	modalityIpAddress?: mainDb_StringFilter;
	modalityName?: mainDb_StringFilter;
	modalityPort?: mainDb_IntFilter;
	modalityPseudo?: mainDb_StringNullableFilter;
	modalityType?: mainDb_EnumModalityTypeFilter;
}

export interface mainDb_IntFilter {
	equals?: number;
	gt?: number;
	gte?: number;
	in?: number[];
	lt?: number;
	lte?: number;
	not?: mainDb_NestedIntFilter;
	notIn?: number[];
}

export interface mainDb_NestedIntFilter {
	equals?: number;
	gt?: number;
	gte?: number;
	in?: number[];
	lt?: number;
	lte?: number;
	not?: mainDb_NestedIntFilter;
	notIn?: number[];
}

export interface mainDb_EnumModalityTypeFilter {
	equals?: mainDb_ModalityTypeValues;
	in?: mainDb_ModalityTypeValues[];
	not?: mainDb_NestedEnumModalityTypeFilter;
	notIn?: mainDb_ModalityTypeValues[];
}

export interface mainDb_NestedEnumModalityTypeFilter {
	equals?: mainDb_ModalityTypeValues;
	in?: mainDb_ModalityTypeValues[];
	not?: mainDb_NestedEnumModalityTypeFilter;
	notIn?: mainDb_ModalityTypeValues[];
}

export interface mainDb_EnumModalityExamStatusFilter {
	equals?: mainDb_ModalityExamStatusValues;
	in?: mainDb_ModalityExamStatusValues[];
	not?: mainDb_NestedEnumModalityExamStatusFilter;
	notIn?: mainDb_ModalityExamStatusValues[];
}

export interface mainDb_NestedEnumModalityExamStatusFilter {
	equals?: mainDb_ModalityExamStatusValues;
	in?: mainDb_ModalityExamStatusValues[];
	not?: mainDb_NestedEnumModalityExamStatusFilter;
	notIn?: mainDb_ModalityExamStatusValues[];
}

export interface mainDb_PatientRelationFilter {
	is?: mainDb_PatientWhereInput;
	isNot?: mainDb_PatientWhereInput;
}

export interface mainDb_PatientWhereInput {
	AND?: mainDb_PatientWhereInput[];
	ClinicalEvent?: mainDb_ClinicalEventListRelationFilter;
	ConsultationList?: mainDb_ConsultationListListRelationFilter;
	DocumentStore?: mainDb_DocumentStoreListRelationFilter;
	NOT?: mainDb_PatientWhereInput[];
	OR?: mainDb_PatientWhereInput[];
	WorkingList?: mainDb_WorkingListListRelationFilter;
	address?: mainDb_StringNullableFilter;
	createdAt?: mainDb_DateTimeFilter;
	ddn?: mainDb_DateTimeFilter;
	deleted?: mainDb_BoolFilter;
	firstName?: mainDb_StringFilter;
	height?: mainDb_FloatNullableFilter;
	id?: mainDb_StringFilter;
	informationsConfirmed?: mainDb_BoolFilter;
	lastName?: mainDb_StringFilter;
	nTel?: mainDb_StringNullableFilter;
	onTrash?: mainDb_BoolFilter;
	sexe?: mainDb_EnumSexeFilter;
	updated?: mainDb_DateTimeFilter;
	weight?: mainDb_FloatNullableFilter;
}

export interface mainDb_ClinicalEventListRelationFilter {
	every?: mainDb_ClinicalEventWhereInput;
	none?: mainDb_ClinicalEventWhereInput;
	some?: mainDb_ClinicalEventWhereInput;
}

export interface mainDb_ConsultationListListRelationFilter {
	every?: mainDb_ConsultationListWhereInput;
	none?: mainDb_ConsultationListWhereInput;
	some?: mainDb_ConsultationListWhereInput;
}

export interface mainDb_ConsultationListWhereInput {
	AND?: mainDb_ConsultationListWhereInput[];
	NOT?: mainDb_ConsultationListWhereInput[];
	OR?: mainDb_ConsultationListWhereInput[];
	active?: mainDb_BoolFilter;
	consultation?: mainDb_ConsultationRelationFilter;
	consultationId?: mainDb_StringFilter;
	createdAt?: mainDb_DateTimeFilter;
	id?: mainDb_StringFilter;
	patient?: mainDb_PatientRelationFilter;
	patientId?: mainDb_StringFilter;
	updatedAt?: mainDb_DateTimeFilter;
}

export interface mainDb_ConsultationRelationFilter {
	is?: mainDb_ConsultationWhereInput;
	isNot?: mainDb_ConsultationWhereInput;
}

export interface mainDb_ConsultationWhereInput {
	AND?: mainDb_ConsultationWhereInput[];
	ConsultationList?: mainDb_ConsultationListListRelationFilter;
	NOT?: mainDb_ConsultationWhereInput[];
	OR?: mainDb_ConsultationWhereInput[];
	createdAt?: mainDb_DateTimeFilter;
	day?: mainDb_IntFilter;
	id?: mainDb_StringFilter;
	month?: mainDb_IntFilter;
	year?: mainDb_IntFilter;
}

export interface mainDb_DocumentStoreListRelationFilter {
	every?: mainDb_DocumentStoreWhereInput;
	none?: mainDb_DocumentStoreWhereInput;
	some?: mainDb_DocumentStoreWhereInput;
}

export interface mainDb_DocumentStoreWhereInput {
	AND?: mainDb_DocumentStoreWhereInput[];
	NOT?: mainDb_DocumentStoreWhereInput[];
	OR?: mainDb_DocumentStoreWhereInput[];
	content?: mainDb_BytesNullableFilter;
	id?: mainDb_StringFilter;
	patient?: mainDb_PatientRelationFilter;
	patientDocumentType?: mainDb_EnumPatientDocumentTypeFilter;
	patientId?: mainDb_StringFilter;
	textContent?: mainDb_StringNullableFilter;
}

export interface mainDb_BytesNullableFilter {
	equals?: string;
	in?: string[];
	not?: mainDb_NestedBytesNullableFilter;
	notIn?: string[];
}

export interface mainDb_NestedBytesNullableFilter {
	equals?: string;
	in?: string[];
	not?: mainDb_NestedBytesNullableFilter;
	notIn?: string[];
}

export interface mainDb_EnumPatientDocumentTypeFilter {
	equals?: mainDb_PatientDocumentTypeValues;
	in?: mainDb_PatientDocumentTypeValues[];
	not?: mainDb_NestedEnumPatientDocumentTypeFilter;
	notIn?: mainDb_PatientDocumentTypeValues[];
}

export interface mainDb_NestedEnumPatientDocumentTypeFilter {
	equals?: mainDb_PatientDocumentTypeValues;
	in?: mainDb_PatientDocumentTypeValues[];
	not?: mainDb_NestedEnumPatientDocumentTypeFilter;
	notIn?: mainDb_PatientDocumentTypeValues[];
}

export interface mainDb_FloatNullableFilter {
	equals?: number;
	gt?: number;
	gte?: number;
	in?: number[];
	lt?: number;
	lte?: number;
	not?: mainDb_NestedFloatNullableFilter;
	notIn?: number[];
}

export interface mainDb_NestedFloatNullableFilter {
	equals?: number;
	gt?: number;
	gte?: number;
	in?: number[];
	lt?: number;
	lte?: number;
	not?: mainDb_NestedFloatNullableFilter;
	notIn?: number[];
}

export interface mainDb_EnumSexeFilter {
	equals?: mainDb_SexeValues;
	in?: mainDb_SexeValues[];
	not?: mainDb_NestedEnumSexeFilter;
	notIn?: mainDb_SexeValues[];
}

export interface mainDb_NestedEnumSexeFilter {
	equals?: mainDb_SexeValues;
	in?: mainDb_SexeValues[];
	not?: mainDb_NestedEnumSexeFilter;
	notIn?: mainDb_SexeValues[];
}

export interface mainDb_UserRelationFilter {
	is?: mainDb_UserWhereInput;
	isNot?: mainDb_UserWhereInput;
}

export interface mainDb_UserWhereInput {
	AND?: mainDb_UserWhereInput[];
	ClinicalEvent?: mainDb_ClinicalEventListRelationFilter;
	NOT?: mainDb_UserWhereInput[];
	OR?: mainDb_UserWhereInput[];
	WorkingList?: mainDb_WorkingListListRelationFilter;
	avatarUrl?: mainDb_StringNullableFilter;
	createdAt?: mainDb_DateTimeFilter;
	editorKey?: mainDb_StringFilter;
	email?: mainDb_StringFilter;
	firstName?: mainDb_StringNullableFilter;
	fullName?: mainDb_StringNullableFilter;
	id?: mainDb_StringFilter;
	lastConnection?: mainDb_DateTimeFilter;
	lastName?: mainDb_StringNullableFilter;
	phoneNumbers?: mainDb_StringNullableListFilter;
	role?: mainDb_EnumRoleFilter;
	searchApiKey?: mainDb_StringFilter;
	searchApiKeyId?: mainDb_IntNullableFilter;
	userId?: mainDb_StringFilter;
}

export interface mainDb_StringNullableListFilter {
	equals?: string[];
	has?: string;
	hasEvery?: string[];
	hasSome?: string[];
	isEmpty?: boolean;
}

export interface mainDb_EnumRoleFilter {
	equals?: mainDb_RoleValues;
	in?: mainDb_RoleValues[];
	not?: mainDb_NestedEnumRoleFilter;
	notIn?: mainDb_RoleValues[];
}

export interface mainDb_NestedEnumRoleFilter {
	equals?: mainDb_RoleValues;
	in?: mainDb_RoleValues[];
	not?: mainDb_NestedEnumRoleFilter;
	notIn?: mainDb_RoleValues[];
}

export interface mainDb_IntNullableFilter {
	equals?: number;
	gt?: number;
	gte?: number;
	in?: number[];
	lt?: number;
	lte?: number;
	not?: mainDb_NestedIntNullableFilter;
	notIn?: number[];
}

export interface mainDb_NestedIntNullableFilter {
	equals?: number;
	gt?: number;
	gte?: number;
	in?: number[];
	lt?: number;
	lte?: number;
	not?: mainDb_NestedIntNullableFilter;
	notIn?: number[];
}

export interface mainDb_EnumEventCategoryFilter {
	equals?: mainDb_EventCategoryValues;
	in?: mainDb_EventCategoryValues[];
	not?: mainDb_NestedEnumEventCategoryFilter;
	notIn?: mainDb_EventCategoryValues[];
}

export interface mainDb_NestedEnumEventCategoryFilter {
	equals?: mainDb_EventCategoryValues;
	in?: mainDb_EventCategoryValues[];
	not?: mainDb_NestedEnumEventCategoryFilter;
	notIn?: mainDb_EventCategoryValues[];
}

export interface mainDb_EnumEventTypesFilter {
	equals?: mainDb_EventTypesValues;
	in?: mainDb_EventTypesValues[];
	not?: mainDb_NestedEnumEventTypesFilter;
	notIn?: mainDb_EventTypesValues[];
}

export interface mainDb_NestedEnumEventTypesFilter {
	equals?: mainDb_EventTypesValues;
	in?: mainDb_EventTypesValues[];
	not?: mainDb_NestedEnumEventTypesFilter;
	notIn?: mainDb_EventTypesValues[];
}

export interface mainDb_ClinicalEventCreateOrConnectWithoutUserInput {
	create: mainDb_ClinicalEventCreateWithoutUserInput;
	where: mainDb_ClinicalEventWhereUniqueInput;
}

export interface mainDb_ClinicalEventCreateWithoutUserInput {
	Prescription?: mainDb_PrescriptionCreateNestedOneWithoutClinicalEventInput;
	WorkingList?: mainDb_WorkingListCreateNestedManyWithoutClinicalEventInput;
	clinicalDiagnosticId?: string;
	createdAt?: string;
	deleted?: boolean;
	deletedReport?: string;
	dicom?: boolean;
	dicomId?: string;
	eventCategory?: mainDb_EventCategoryValues;
	eventType: mainDb_EventTypesValues;
	id?: string;
	patient: mainDb_PatientCreateNestedOneWithoutClinicalEventInput;
	updatedAt?: string;
}

export interface mainDb_PrescriptionCreateNestedOneWithoutClinicalEventInput {
	connect?: mainDb_PrescriptionWhereUniqueInput;
	connectOrCreate?: mainDb_PrescriptionCreateOrConnectWithoutClinicalEventInput;
	create?: mainDb_PrescriptionCreateWithoutClinicalEventInput;
}

export interface mainDb_PrescriptionWhereUniqueInput {
	AND?: mainDb_PrescriptionWhereInput[];
	NOT?: mainDb_PrescriptionWhereInput[];
	OR?: mainDb_PrescriptionWhereInput[];
	clinicalEvent?: mainDb_ClinicalEventRelationFilter;
	clinicalEventId?: string;
	createdAt?: mainDb_DateTimeFilter;
	id?: string;
	savedPrescription?: mainDb_JsonFilter;
	updatedAt?: mainDb_DateTimeFilter;
}

export interface mainDb_PrescriptionCreateOrConnectWithoutClinicalEventInput {
	create?: mainDb_PrescriptionCreateWithoutClinicalEventInput;
	where?: mainDb_PrescriptionWhereUniqueInput;
}

export interface mainDb_PrescriptionCreateWithoutClinicalEventInput {
	createdAt?: string;
	id?: string;
	savedPrescription?: JSONValue;
	updatedAt?: string;
}

export interface mainDb_WorkingListCreateNestedManyWithoutClinicalEventInput {
	connect?: mainDb_WorkingListWhereUniqueInput[];
	connectOrCreate?: mainDb_WorkingListCreateOrConnectWithoutClinicalEventInput[];
	create?: mainDb_WorkingListCreateWithoutClinicalEventInput[];
	createMany?: mainDb_WorkingListCreateManyClinicalEventInputEnvelope;
}

export interface mainDb_WorkingListWhereUniqueInput {
	AND?: mainDb_WorkingListWhereInput[];
	NOT?: mainDb_WorkingListWhereInput[];
	OR?: mainDb_WorkingListWhereInput[];
	clinicalEvent?: mainDb_ClinicalEventRelationFilter;
	clinicalEventId?: mainDb_StringFilter;
	createdAt?: mainDb_DateTimeFilter;
	id?: string;
	linkId?: mainDb_StringNullableFilter;
	linked?: mainDb_BoolFilter;
	locked?: mainDb_BoolFilter;
	modality?: mainDb_ModalityRelationFilter;
	modalityExamStatus?: mainDb_EnumModalityExamStatusFilter;
	modalityId?: mainDb_StringFilter;
	patient?: mainDb_PatientRelationFilter;
	patientId?: mainDb_StringFilter;
	updatedAt?: mainDb_DateTimeFilter;
	user?: mainDb_UserRelationFilter;
	userId?: mainDb_StringFilter;
}

export interface mainDb_WorkingListCreateOrConnectWithoutClinicalEventInput {
	create: mainDb_WorkingListCreateWithoutClinicalEventInput;
	where: mainDb_WorkingListWhereUniqueInput;
}

export interface mainDb_WorkingListCreateWithoutClinicalEventInput {
	createdAt?: string;
	id?: string;
	linkId?: string;
	linked?: boolean;
	locked?: boolean;
	modality: mainDb_ModalityCreateNestedOneWithoutWorkingListInput;
	modalityExamStatus?: mainDb_ModalityExamStatusValues;
	patient: mainDb_PatientCreateNestedOneWithoutWorkingListInput;
	updatedAt?: string;
	user: mainDb_UserCreateNestedOneWithoutWorkingListInput;
}

export interface mainDb_ModalityCreateNestedOneWithoutWorkingListInput {
	connect?: mainDb_ModalityWhereUniqueInput;
	connectOrCreate?: mainDb_ModalityCreateOrConnectWithoutWorkingListInput;
	create?: mainDb_ModalityCreateWithoutWorkingListInput;
}

export interface mainDb_ModalityWhereUniqueInput {
	AND?: mainDb_ModalityWhereInput[];
	NOT?: mainDb_ModalityWhereInput[];
	OR?: mainDb_ModalityWhereInput[];
	WorkingList?: mainDb_WorkingListListRelationFilter;
	activated?: mainDb_BoolFilter;
	deleted?: mainDb_BoolFilter;
	enabled?: mainDb_BoolFilter;
	id?: string;
	modalityAETitle?: mainDb_StringFilter;
	modalityIpAddress?: mainDb_StringFilter;
	modalityName?: string;
	modalityPort?: mainDb_IntFilter;
	modalityPseudo?: mainDb_StringNullableFilter;
	modalityType?: mainDb_EnumModalityTypeFilter;
}

export interface mainDb_ModalityCreateOrConnectWithoutWorkingListInput {
	create?: mainDb_ModalityCreateWithoutWorkingListInput;
	where?: mainDb_ModalityWhereUniqueInput;
}

export interface mainDb_ModalityCreateWithoutWorkingListInput {
	activated?: boolean;
	deleted?: boolean;
	enabled?: boolean;
	id?: string;
	modalityAETitle: string;
	modalityIpAddress: string;
	modalityName: string;
	modalityPort: number;
	modalityPseudo?: string;
	modalityType: mainDb_ModalityTypeValues;
}

export interface mainDb_PatientCreateNestedOneWithoutWorkingListInput {
	connect?: mainDb_PatientWhereUniqueInput;
	connectOrCreate?: mainDb_PatientCreateOrConnectWithoutWorkingListInput;
	create?: mainDb_PatientCreateWithoutWorkingListInput;
}

export interface mainDb_PatientWhereUniqueInput {
	AND?: mainDb_PatientWhereInput[];
	ClinicalEvent?: mainDb_ClinicalEventListRelationFilter;
	ConsultationList?: mainDb_ConsultationListListRelationFilter;
	DocumentStore?: mainDb_DocumentStoreListRelationFilter;
	NOT?: mainDb_PatientWhereInput[];
	OR?: mainDb_PatientWhereInput[];
	WorkingList?: mainDb_WorkingListListRelationFilter;
	address?: mainDb_StringNullableFilter;
	createdAt?: mainDb_DateTimeFilter;
	ddn?: mainDb_DateTimeFilter;
	deleted?: mainDb_BoolFilter;
	firstName?: mainDb_StringFilter;
	height?: mainDb_FloatNullableFilter;
	id?: string;
	informationsConfirmed?: mainDb_BoolFilter;
	lastName?: mainDb_StringFilter;
	nTel?: mainDb_StringNullableFilter;
	onTrash?: mainDb_BoolFilter;
	sexe?: mainDb_EnumSexeFilter;
	updated?: mainDb_DateTimeFilter;
	weight?: mainDb_FloatNullableFilter;
}

export interface mainDb_PatientCreateOrConnectWithoutWorkingListInput {
	create?: mainDb_PatientCreateWithoutWorkingListInput;
	where?: mainDb_PatientWhereUniqueInput;
}

export interface mainDb_PatientCreateWithoutWorkingListInput {
	ClinicalEvent?: mainDb_ClinicalEventCreateNestedManyWithoutPatientInput;
	ConsultationList?: mainDb_ConsultationListCreateNestedManyWithoutPatientInput;
	DocumentStore?: mainDb_DocumentStoreCreateNestedManyWithoutPatientInput;
	address?: string;
	createdAt?: string;
	ddn: string;
	deleted?: boolean;
	firstName: string;
	height?: number;
	id?: string;
	informationsConfirmed?: boolean;
	lastName: string;
	nTel?: string;
	onTrash?: boolean;
	sexe: mainDb_SexeValues;
	updated?: string;
	weight?: number;
}

export interface mainDb_ClinicalEventCreateNestedManyWithoutPatientInput {
	connect?: mainDb_ClinicalEventWhereUniqueInput[];
	connectOrCreate?: mainDb_ClinicalEventCreateOrConnectWithoutPatientInput[];
	create?: mainDb_ClinicalEventCreateWithoutPatientInput[];
	createMany?: mainDb_ClinicalEventCreateManyPatientInputEnvelope;
}

export interface mainDb_ClinicalEventCreateOrConnectWithoutPatientInput {
	create: mainDb_ClinicalEventCreateWithoutPatientInput;
	where: mainDb_ClinicalEventWhereUniqueInput;
}

export interface mainDb_ClinicalEventCreateWithoutPatientInput {
	Prescription?: mainDb_PrescriptionCreateNestedOneWithoutClinicalEventInput;
	WorkingList?: mainDb_WorkingListCreateNestedManyWithoutClinicalEventInput;
	clinicalDiagnosticId?: string;
	createdAt?: string;
	deleted?: boolean;
	deletedReport?: string;
	dicom?: boolean;
	dicomId?: string;
	eventCategory?: mainDb_EventCategoryValues;
	eventType: mainDb_EventTypesValues;
	id?: string;
	updatedAt?: string;
	user: mainDb_UserCreateNestedOneWithoutClinicalEventInput;
}

export interface mainDb_UserCreateNestedOneWithoutClinicalEventInput {
	connect?: mainDb_UserWhereUniqueInput;
	connectOrCreate?: mainDb_UserCreateOrConnectWithoutClinicalEventInput;
	create?: mainDb_UserCreateWithoutClinicalEventInput;
}

export interface mainDb_UserWhereUniqueInput {
	AND?: mainDb_UserWhereInput[];
	ClinicalEvent?: mainDb_ClinicalEventListRelationFilter;
	NOT?: mainDb_UserWhereInput[];
	OR?: mainDb_UserWhereInput[];
	WorkingList?: mainDb_WorkingListListRelationFilter;
	avatarUrl?: mainDb_StringNullableFilter;
	createdAt?: mainDb_DateTimeFilter;
	editorKey?: mainDb_StringFilter;
	email?: string;
	firstName?: mainDb_StringNullableFilter;
	fullName?: mainDb_StringNullableFilter;
	id?: string;
	lastConnection?: mainDb_DateTimeFilter;
	lastName?: mainDb_StringNullableFilter;
	phoneNumbers?: mainDb_StringNullableListFilter;
	role?: mainDb_EnumRoleFilter;
	searchApiKey?: mainDb_StringFilter;
	searchApiKeyId?: mainDb_IntNullableFilter;
	userId?: string;
}

export interface mainDb_UserCreateOrConnectWithoutClinicalEventInput {
	create?: mainDb_UserCreateWithoutClinicalEventInput;
	where?: mainDb_UserWhereUniqueInput;
}

export interface mainDb_UserCreateWithoutClinicalEventInput {
	WorkingList?: mainDb_WorkingListCreateNestedManyWithoutUserInput;
	avatarUrl?: string;
	createdAt?: string;
	editorKey?: string;
	email: string;
	firstName?: string;
	fullName?: string;
	id?: string;
	lastConnection?: string;
	lastName?: string;
	phoneNumbers?: mainDb_UserCreatephoneNumbersInput;
	role?: mainDb_RoleValues;
	searchApiKey?: string;
	searchApiKeyId?: number;
	userId: string;
}

export interface mainDb_WorkingListCreateNestedManyWithoutUserInput {
	connect?: mainDb_WorkingListWhereUniqueInput[];
	connectOrCreate?: mainDb_WorkingListCreateOrConnectWithoutUserInput[];
	create?: mainDb_WorkingListCreateWithoutUserInput[];
	createMany?: mainDb_WorkingListCreateManyUserInputEnvelope;
}

export interface mainDb_WorkingListCreateOrConnectWithoutUserInput {
	create: mainDb_WorkingListCreateWithoutUserInput;
	where: mainDb_WorkingListWhereUniqueInput;
}

export interface mainDb_WorkingListCreateWithoutUserInput {
	clinicalEvent: mainDb_ClinicalEventCreateNestedOneWithoutWorkingListInput;
	createdAt?: string;
	id?: string;
	linkId?: string;
	linked?: boolean;
	locked?: boolean;
	modality: mainDb_ModalityCreateNestedOneWithoutWorkingListInput;
	modalityExamStatus?: mainDb_ModalityExamStatusValues;
	patient: mainDb_PatientCreateNestedOneWithoutWorkingListInput;
	updatedAt?: string;
}

export interface mainDb_ClinicalEventCreateNestedOneWithoutWorkingListInput {
	connect?: mainDb_ClinicalEventWhereUniqueInput;
	connectOrCreate?: mainDb_ClinicalEventCreateOrConnectWithoutWorkingListInput;
	create?: mainDb_ClinicalEventCreateWithoutWorkingListInput;
}

export interface mainDb_ClinicalEventCreateOrConnectWithoutWorkingListInput {
	create?: mainDb_ClinicalEventCreateWithoutWorkingListInput;
	where?: mainDb_ClinicalEventWhereUniqueInput;
}

export interface mainDb_ClinicalEventCreateWithoutWorkingListInput {
	Prescription?: mainDb_PrescriptionCreateNestedOneWithoutClinicalEventInput;
	clinicalDiagnosticId?: string;
	createdAt?: string;
	deleted?: boolean;
	deletedReport?: string;
	dicom?: boolean;
	dicomId?: string;
	eventCategory?: mainDb_EventCategoryValues;
	eventType: mainDb_EventTypesValues;
	id?: string;
	patient: mainDb_PatientCreateNestedOneWithoutClinicalEventInput;
	updatedAt?: string;
	user: mainDb_UserCreateNestedOneWithoutClinicalEventInput;
}

export interface mainDb_PatientCreateNestedOneWithoutClinicalEventInput {
	connect?: mainDb_PatientWhereUniqueInput;
	connectOrCreate?: mainDb_PatientCreateOrConnectWithoutClinicalEventInput;
	create?: mainDb_PatientCreateWithoutClinicalEventInput;
}

export interface mainDb_PatientCreateOrConnectWithoutClinicalEventInput {
	create?: mainDb_PatientCreateWithoutClinicalEventInput;
	where?: mainDb_PatientWhereUniqueInput;
}

export interface mainDb_PatientCreateWithoutClinicalEventInput {
	ConsultationList?: mainDb_ConsultationListCreateNestedManyWithoutPatientInput;
	DocumentStore?: mainDb_DocumentStoreCreateNestedManyWithoutPatientInput;
	WorkingList?: mainDb_WorkingListCreateNestedManyWithoutPatientInput;
	address?: string;
	createdAt?: string;
	ddn: string;
	deleted?: boolean;
	firstName: string;
	height?: number;
	id?: string;
	informationsConfirmed?: boolean;
	lastName: string;
	nTel?: string;
	onTrash?: boolean;
	sexe: mainDb_SexeValues;
	updated?: string;
	weight?: number;
}

export interface mainDb_ConsultationListCreateNestedManyWithoutPatientInput {
	connect?: mainDb_ConsultationListWhereUniqueInput[];
	connectOrCreate?: mainDb_ConsultationListCreateOrConnectWithoutPatientInput[];
	create?: mainDb_ConsultationListCreateWithoutPatientInput[];
	createMany?: mainDb_ConsultationListCreateManyPatientInputEnvelope;
}

export interface mainDb_ConsultationListWhereUniqueInput {
	AND?: mainDb_ConsultationListWhereInput[];
	NOT?: mainDb_ConsultationListWhereInput[];
	OR?: mainDb_ConsultationListWhereInput[];
	active?: mainDb_BoolFilter;
	consultation?: mainDb_ConsultationRelationFilter;
	consultationId?: mainDb_StringFilter;
	createdAt?: mainDb_DateTimeFilter;
	id?: string;
	patient?: mainDb_PatientRelationFilter;
	patientId?: mainDb_StringFilter;
	patientId_consultationId?: mainDb_ConsultationListPatientIdConsultationIdCompoundUniqueInput;
	updatedAt?: mainDb_DateTimeFilter;
}

export interface mainDb_ConsultationListPatientIdConsultationIdCompoundUniqueInput {
	consultationId?: string;
	patientId?: string;
}

export interface mainDb_ConsultationListCreateOrConnectWithoutPatientInput {
	create: mainDb_ConsultationListCreateWithoutPatientInput;
	where: mainDb_ConsultationListWhereUniqueInput;
}

export interface mainDb_ConsultationListCreateWithoutPatientInput {
	active?: boolean;
	consultation: mainDb_ConsultationCreateNestedOneWithoutConsultationListInput;
	createdAt?: string;
	id?: string;
	updatedAt?: string;
}

export interface mainDb_ConsultationCreateNestedOneWithoutConsultationListInput {
	connect?: mainDb_ConsultationWhereUniqueInput;
	connectOrCreate?: mainDb_ConsultationCreateOrConnectWithoutConsultationListInput;
	create?: mainDb_ConsultationCreateWithoutConsultationListInput;
}

export interface mainDb_ConsultationWhereUniqueInput {
	AND?: mainDb_ConsultationWhereInput[];
	ConsultationList?: mainDb_ConsultationListListRelationFilter;
	NOT?: mainDb_ConsultationWhereInput[];
	OR?: mainDb_ConsultationWhereInput[];
	createdAt?: mainDb_DateTimeFilter;
	day?: mainDb_IntFilter;
	day_month_year?: mainDb_ConsultationDayMonthYearCompoundUniqueInput;
	id?: string;
	month?: mainDb_IntFilter;
	year?: mainDb_IntFilter;
}

export interface mainDb_ConsultationDayMonthYearCompoundUniqueInput {
	day?: number;
	month?: number;
	year?: number;
}

export interface mainDb_ConsultationCreateOrConnectWithoutConsultationListInput {
	create?: mainDb_ConsultationCreateWithoutConsultationListInput;
	where?: mainDb_ConsultationWhereUniqueInput;
}

export interface mainDb_ConsultationCreateWithoutConsultationListInput {
	createdAt?: string;
	day: number;
	id?: string;
	month: number;
	year: number;
}

export interface mainDb_ConsultationListCreateManyPatientInputEnvelope {
	data?: mainDb_ConsultationListCreateManyPatientInput[];
	skipDuplicates?: boolean;
}

export interface mainDb_ConsultationListCreateManyPatientInput {
	active?: boolean;
	consultationId: string;
	createdAt?: string;
	id?: string;
	updatedAt?: string;
}

export interface mainDb_DocumentStoreCreateNestedManyWithoutPatientInput {
	connect?: mainDb_DocumentStoreWhereUniqueInput[];
	connectOrCreate?: mainDb_DocumentStoreCreateOrConnectWithoutPatientInput[];
	create?: mainDb_DocumentStoreCreateWithoutPatientInput[];
	createMany?: mainDb_DocumentStoreCreateManyPatientInputEnvelope;
}

export interface mainDb_DocumentStoreWhereUniqueInput {
	AND?: mainDb_DocumentStoreWhereInput[];
	NOT?: mainDb_DocumentStoreWhereInput[];
	OR?: mainDb_DocumentStoreWhereInput[];
	content?: mainDb_BytesNullableFilter;
	id?: string;
	patient?: mainDb_PatientRelationFilter;
	patientDocumentType?: mainDb_EnumPatientDocumentTypeFilter;
	patientId?: mainDb_StringFilter;
	patientId_patientDocumentType?: mainDb_DocumentStorePatientIdPatientDocumentTypeCompoundUniqueInput;
	textContent?: mainDb_StringNullableFilter;
}

export interface mainDb_DocumentStorePatientIdPatientDocumentTypeCompoundUniqueInput {
	patientDocumentType?: mainDb_PatientDocumentTypeValues;
	patientId?: string;
}

export interface mainDb_DocumentStoreCreateOrConnectWithoutPatientInput {
	create: mainDb_DocumentStoreCreateWithoutPatientInput;
	where: mainDb_DocumentStoreWhereUniqueInput;
}

export interface mainDb_DocumentStoreCreateWithoutPatientInput {
	content?: string;
	id?: string;
	patientDocumentType: mainDb_PatientDocumentTypeValues;
	textContent?: string;
}

export interface mainDb_DocumentStoreCreateManyPatientInputEnvelope {
	data?: mainDb_DocumentStoreCreateManyPatientInput[];
	skipDuplicates?: boolean;
}

export interface mainDb_DocumentStoreCreateManyPatientInput {
	content?: string;
	id?: string;
	patientDocumentType: mainDb_PatientDocumentTypeValues;
	textContent?: string;
}

export interface mainDb_WorkingListCreateNestedManyWithoutPatientInput {
	connect?: mainDb_WorkingListWhereUniqueInput[];
	connectOrCreate?: mainDb_WorkingListCreateOrConnectWithoutPatientInput[];
	create?: mainDb_WorkingListCreateWithoutPatientInput[];
	createMany?: mainDb_WorkingListCreateManyPatientInputEnvelope;
}

export interface mainDb_WorkingListCreateOrConnectWithoutPatientInput {
	create: mainDb_WorkingListCreateWithoutPatientInput;
	where: mainDb_WorkingListWhereUniqueInput;
}

export interface mainDb_WorkingListCreateWithoutPatientInput {
	clinicalEvent: mainDb_ClinicalEventCreateNestedOneWithoutWorkingListInput;
	createdAt?: string;
	id?: string;
	linkId?: string;
	linked?: boolean;
	locked?: boolean;
	modality: mainDb_ModalityCreateNestedOneWithoutWorkingListInput;
	modalityExamStatus?: mainDb_ModalityExamStatusValues;
	updatedAt?: string;
	user: mainDb_UserCreateNestedOneWithoutWorkingListInput;
}

export interface mainDb_UserCreateNestedOneWithoutWorkingListInput {
	connect?: mainDb_UserWhereUniqueInput;
	connectOrCreate?: mainDb_UserCreateOrConnectWithoutWorkingListInput;
	create?: mainDb_UserCreateWithoutWorkingListInput;
}

export interface mainDb_UserCreateOrConnectWithoutWorkingListInput {
	create?: mainDb_UserCreateWithoutWorkingListInput;
	where?: mainDb_UserWhereUniqueInput;
}

export interface mainDb_UserCreateWithoutWorkingListInput {
	ClinicalEvent?: mainDb_ClinicalEventCreateNestedManyWithoutUserInput;
	avatarUrl?: string;
	createdAt?: string;
	editorKey?: string;
	email: string;
	firstName?: string;
	fullName?: string;
	id?: string;
	lastConnection?: string;
	lastName?: string;
	phoneNumbers?: mainDb_UserCreatephoneNumbersInput;
	role?: mainDb_RoleValues;
	searchApiKey?: string;
	searchApiKeyId?: number;
	userId: string;
}

export interface mainDb_UserCreatephoneNumbersInput {
	set?: string[];
}

export interface mainDb_WorkingListCreateManyPatientInputEnvelope {
	data?: mainDb_WorkingListCreateManyPatientInput[];
	skipDuplicates?: boolean;
}

export interface mainDb_WorkingListCreateManyPatientInput {
	clinicalEventId: string;
	createdAt?: string;
	id?: string;
	linkId?: string;
	linked?: boolean;
	locked?: boolean;
	modalityExamStatus?: mainDb_ModalityExamStatusValues;
	modalityId: string;
	updatedAt?: string;
	userId: string;
}

export interface mainDb_WorkingListCreateManyUserInputEnvelope {
	data?: mainDb_WorkingListCreateManyUserInput[];
	skipDuplicates?: boolean;
}

export interface mainDb_WorkingListCreateManyUserInput {
	clinicalEventId: string;
	createdAt?: string;
	id?: string;
	linkId?: string;
	linked?: boolean;
	locked?: boolean;
	modalityExamStatus?: mainDb_ModalityExamStatusValues;
	modalityId: string;
	patientId: string;
	updatedAt?: string;
}

export interface mainDb_ClinicalEventCreateManyPatientInputEnvelope {
	data?: mainDb_ClinicalEventCreateManyPatientInput[];
	skipDuplicates?: boolean;
}

export interface mainDb_ClinicalEventCreateManyPatientInput {
	clinicalDiagnosticId?: string;
	createdAt?: string;
	deleted?: boolean;
	deletedReport?: string;
	dicom?: boolean;
	dicomId?: string;
	eventCategory?: mainDb_EventCategoryValues;
	eventType: mainDb_EventTypesValues;
	id?: string;
	updatedAt?: string;
	userId: string;
}

export interface mainDb_WorkingListCreateManyClinicalEventInputEnvelope {
	data?: mainDb_WorkingListCreateManyClinicalEventInput[];
	skipDuplicates?: boolean;
}

export interface mainDb_WorkingListCreateManyClinicalEventInput {
	createdAt?: string;
	id?: string;
	linkId?: string;
	linked?: boolean;
	locked?: boolean;
	modalityExamStatus?: mainDb_ModalityExamStatusValues;
	modalityId: string;
	patientId: string;
	updatedAt?: string;
	userId: string;
}

export interface mainDb_ClinicalEventCreateManyUserInputEnvelope {
	data?: mainDb_ClinicalEventCreateManyUserInput[];
	skipDuplicates?: boolean;
}

export interface mainDb_ClinicalEventCreateManyUserInput {
	clinicalDiagnosticId?: string;
	createdAt?: string;
	deleted?: boolean;
	deletedReport?: string;
	dicom?: boolean;
	dicomId?: string;
	eventCategory?: mainDb_EventCategoryValues;
	eventType: mainDb_EventTypesValues;
	id?: string;
	patientId: string;
	updatedAt?: string;
}

export interface mainDb_UserUpdateInput {
	ClinicalEvent?: mainDb_ClinicalEventUpdateManyWithoutUserNestedInput;
	WorkingList?: mainDb_WorkingListUpdateManyWithoutUserNestedInput;
	avatarUrl?: mainDb_NullableStringFieldUpdateOperationsInput;
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	editorKey?: mainDb_StringFieldUpdateOperationsInput;
	email?: mainDb_StringFieldUpdateOperationsInput;
	firstName?: mainDb_NullableStringFieldUpdateOperationsInput;
	fullName?: mainDb_NullableStringFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	lastConnection?: mainDb_DateTimeFieldUpdateOperationsInput;
	lastName?: mainDb_NullableStringFieldUpdateOperationsInput;
	phoneNumbers?: mainDb_UserUpdatephoneNumbersInput;
	role?: mainDb_EnumRoleFieldUpdateOperationsInput;
	searchApiKey?: mainDb_StringFieldUpdateOperationsInput;
	searchApiKeyId?: mainDb_NullableIntFieldUpdateOperationsInput;
	userId?: mainDb_StringFieldUpdateOperationsInput;
}

export interface mainDb_ClinicalEventUpdateManyWithoutUserNestedInput {
	connect?: mainDb_ClinicalEventWhereUniqueInput[];
	connectOrCreate?: mainDb_ClinicalEventCreateOrConnectWithoutUserInput[];
	create?: mainDb_ClinicalEventCreateWithoutUserInput[];
	createMany?: mainDb_ClinicalEventCreateManyUserInputEnvelope;
	delete?: mainDb_ClinicalEventWhereUniqueInput[];
	deleteMany?: mainDb_ClinicalEventScalarWhereInput[];
	disconnect?: mainDb_ClinicalEventWhereUniqueInput[];
	set?: mainDb_ClinicalEventWhereUniqueInput[];
	update?: mainDb_ClinicalEventUpdateWithWhereUniqueWithoutUserInput[];
	updateMany?: mainDb_ClinicalEventUpdateManyWithWhereWithoutUserInput[];
	upsert?: mainDb_ClinicalEventUpsertWithWhereUniqueWithoutUserInput[];
}

export interface mainDb_ClinicalEventScalarWhereInput {
	AND?: mainDb_ClinicalEventScalarWhereInput[];
	NOT?: mainDb_ClinicalEventScalarWhereInput[];
	OR?: mainDb_ClinicalEventScalarWhereInput[];
	clinicalDiagnosticId?: mainDb_StringNullableFilter;
	createdAt?: mainDb_DateTimeFilter;
	deleted?: mainDb_BoolFilter;
	deletedReport?: mainDb_StringNullableFilter;
	dicom?: mainDb_BoolFilter;
	dicomId?: mainDb_StringNullableFilter;
	eventCategory?: mainDb_EnumEventCategoryFilter;
	eventType?: mainDb_EnumEventTypesFilter;
	id?: mainDb_StringFilter;
	patientId?: mainDb_StringFilter;
	updatedAt?: mainDb_DateTimeFilter;
	userId?: mainDb_StringFilter;
}

export interface mainDb_ClinicalEventUpdateWithWhereUniqueWithoutUserInput {
	data: mainDb_ClinicalEventUpdateWithoutUserInput;
	where: mainDb_ClinicalEventWhereUniqueInput;
}

export interface mainDb_ClinicalEventUpdateWithoutUserInput {
	Prescription?: mainDb_PrescriptionUpdateOneWithoutClinicalEventNestedInput;
	WorkingList?: mainDb_WorkingListUpdateManyWithoutClinicalEventNestedInput;
	clinicalDiagnosticId?: mainDb_NullableStringFieldUpdateOperationsInput;
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	deleted?: mainDb_BoolFieldUpdateOperationsInput;
	deletedReport?: mainDb_NullableStringFieldUpdateOperationsInput;
	dicom?: mainDb_BoolFieldUpdateOperationsInput;
	dicomId?: mainDb_NullableStringFieldUpdateOperationsInput;
	eventCategory?: mainDb_EnumEventCategoryFieldUpdateOperationsInput;
	eventType?: mainDb_EnumEventTypesFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	patient?: mainDb_PatientUpdateOneRequiredWithoutClinicalEventNestedInput;
	updatedAt?: mainDb_DateTimeFieldUpdateOperationsInput;
}

export interface mainDb_PrescriptionUpdateOneWithoutClinicalEventNestedInput {
	connect?: mainDb_PrescriptionWhereUniqueInput;
	connectOrCreate?: mainDb_PrescriptionCreateOrConnectWithoutClinicalEventInput;
	create?: mainDb_PrescriptionCreateWithoutClinicalEventInput;
	delete?: mainDb_PrescriptionWhereInput;
	disconnect?: mainDb_PrescriptionWhereInput;
	update?: mainDb_PrescriptionUpdateToOneWithWhereWithoutClinicalEventInput;
	upsert?: mainDb_PrescriptionUpsertWithoutClinicalEventInput;
}

export interface mainDb_PrescriptionUpdateToOneWithWhereWithoutClinicalEventInput {
	data?: mainDb_PrescriptionUpdateWithoutClinicalEventInput;
	where?: mainDb_PrescriptionWhereInput;
}

export interface mainDb_PrescriptionUpdateWithoutClinicalEventInput {
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	savedPrescription?: JSONValue;
	updatedAt?: mainDb_DateTimeFieldUpdateOperationsInput;
}

export interface mainDb_DateTimeFieldUpdateOperationsInput {
	set?: string;
}

export interface mainDb_StringFieldUpdateOperationsInput {
	set?: string;
}

export interface mainDb_PrescriptionUpsertWithoutClinicalEventInput {
	create?: mainDb_PrescriptionCreateWithoutClinicalEventInput;
	update?: mainDb_PrescriptionUpdateWithoutClinicalEventInput;
	where?: mainDb_PrescriptionWhereInput;
}

export interface mainDb_WorkingListUpdateManyWithoutClinicalEventNestedInput {
	connect?: mainDb_WorkingListWhereUniqueInput[];
	connectOrCreate?: mainDb_WorkingListCreateOrConnectWithoutClinicalEventInput[];
	create?: mainDb_WorkingListCreateWithoutClinicalEventInput[];
	createMany?: mainDb_WorkingListCreateManyClinicalEventInputEnvelope;
	delete?: mainDb_WorkingListWhereUniqueInput[];
	deleteMany?: mainDb_WorkingListScalarWhereInput[];
	disconnect?: mainDb_WorkingListWhereUniqueInput[];
	set?: mainDb_WorkingListWhereUniqueInput[];
	update?: mainDb_WorkingListUpdateWithWhereUniqueWithoutClinicalEventInput[];
	updateMany?: mainDb_WorkingListUpdateManyWithWhereWithoutClinicalEventInput[];
	upsert?: mainDb_WorkingListUpsertWithWhereUniqueWithoutClinicalEventInput[];
}

export interface mainDb_WorkingListScalarWhereInput {
	AND?: mainDb_WorkingListScalarWhereInput[];
	NOT?: mainDb_WorkingListScalarWhereInput[];
	OR?: mainDb_WorkingListScalarWhereInput[];
	clinicalEventId?: mainDb_StringFilter;
	createdAt?: mainDb_DateTimeFilter;
	id?: mainDb_StringFilter;
	linkId?: mainDb_StringNullableFilter;
	linked?: mainDb_BoolFilter;
	locked?: mainDb_BoolFilter;
	modalityExamStatus?: mainDb_EnumModalityExamStatusFilter;
	modalityId?: mainDb_StringFilter;
	patientId?: mainDb_StringFilter;
	updatedAt?: mainDb_DateTimeFilter;
	userId?: mainDb_StringFilter;
}

export interface mainDb_WorkingListUpdateWithWhereUniqueWithoutClinicalEventInput {
	data: mainDb_WorkingListUpdateWithoutClinicalEventInput;
	where: mainDb_WorkingListWhereUniqueInput;
}

export interface mainDb_WorkingListUpdateWithoutClinicalEventInput {
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	linkId?: mainDb_NullableStringFieldUpdateOperationsInput;
	linked?: mainDb_BoolFieldUpdateOperationsInput;
	locked?: mainDb_BoolFieldUpdateOperationsInput;
	modality?: mainDb_ModalityUpdateOneRequiredWithoutWorkingListNestedInput;
	modalityExamStatus?: mainDb_EnumModalityExamStatusFieldUpdateOperationsInput;
	patient?: mainDb_PatientUpdateOneRequiredWithoutWorkingListNestedInput;
	updatedAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	user?: mainDb_UserUpdateOneRequiredWithoutWorkingListNestedInput;
}

export interface mainDb_NullableStringFieldUpdateOperationsInput {
	set?: string;
}

export interface mainDb_BoolFieldUpdateOperationsInput {
	set?: boolean;
}

export interface mainDb_ModalityUpdateOneRequiredWithoutWorkingListNestedInput {
	connect?: mainDb_ModalityWhereUniqueInput;
	connectOrCreate?: mainDb_ModalityCreateOrConnectWithoutWorkingListInput;
	create?: mainDb_ModalityCreateWithoutWorkingListInput;
	update?: mainDb_ModalityUpdateToOneWithWhereWithoutWorkingListInput;
	upsert?: mainDb_ModalityUpsertWithoutWorkingListInput;
}

export interface mainDb_ModalityUpdateToOneWithWhereWithoutWorkingListInput {
	data?: mainDb_ModalityUpdateWithoutWorkingListInput;
	where?: mainDb_ModalityWhereInput;
}

export interface mainDb_ModalityUpdateWithoutWorkingListInput {
	activated?: mainDb_BoolFieldUpdateOperationsInput;
	deleted?: mainDb_BoolFieldUpdateOperationsInput;
	enabled?: mainDb_BoolFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	modalityAETitle?: mainDb_StringFieldUpdateOperationsInput;
	modalityIpAddress?: mainDb_StringFieldUpdateOperationsInput;
	modalityName?: mainDb_StringFieldUpdateOperationsInput;
	modalityPort?: mainDb_IntFieldUpdateOperationsInput;
	modalityPseudo?: mainDb_NullableStringFieldUpdateOperationsInput;
	modalityType?: mainDb_EnumModalityTypeFieldUpdateOperationsInput;
}

export interface mainDb_IntFieldUpdateOperationsInput {
	decrement?: number;
	divide?: number;
	increment?: number;
	multiply?: number;
	set?: number;
}

export interface mainDb_EnumModalityTypeFieldUpdateOperationsInput {
	set?: mainDb_ModalityTypeValues;
}

export interface mainDb_ModalityUpsertWithoutWorkingListInput {
	create?: mainDb_ModalityCreateWithoutWorkingListInput;
	update?: mainDb_ModalityUpdateWithoutWorkingListInput;
	where?: mainDb_ModalityWhereInput;
}

export interface mainDb_EnumModalityExamStatusFieldUpdateOperationsInput {
	set?: mainDb_ModalityExamStatusValues;
}

export interface mainDb_PatientUpdateOneRequiredWithoutWorkingListNestedInput {
	connect?: mainDb_PatientWhereUniqueInput;
	connectOrCreate?: mainDb_PatientCreateOrConnectWithoutWorkingListInput;
	create?: mainDb_PatientCreateWithoutWorkingListInput;
	update?: mainDb_PatientUpdateToOneWithWhereWithoutWorkingListInput;
	upsert?: mainDb_PatientUpsertWithoutWorkingListInput;
}

export interface mainDb_PatientUpdateToOneWithWhereWithoutWorkingListInput {
	data?: mainDb_PatientUpdateWithoutWorkingListInput;
	where?: mainDb_PatientWhereInput;
}

export interface mainDb_PatientUpdateWithoutWorkingListInput {
	ClinicalEvent?: mainDb_ClinicalEventUpdateManyWithoutPatientNestedInput;
	ConsultationList?: mainDb_ConsultationListUpdateManyWithoutPatientNestedInput;
	DocumentStore?: mainDb_DocumentStoreUpdateManyWithoutPatientNestedInput;
	address?: mainDb_NullableStringFieldUpdateOperationsInput;
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	ddn?: mainDb_DateTimeFieldUpdateOperationsInput;
	deleted?: mainDb_BoolFieldUpdateOperationsInput;
	firstName?: mainDb_StringFieldUpdateOperationsInput;
	height?: mainDb_NullableFloatFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	informationsConfirmed?: mainDb_BoolFieldUpdateOperationsInput;
	lastName?: mainDb_StringFieldUpdateOperationsInput;
	nTel?: mainDb_NullableStringFieldUpdateOperationsInput;
	onTrash?: mainDb_BoolFieldUpdateOperationsInput;
	sexe?: mainDb_EnumSexeFieldUpdateOperationsInput;
	updated?: mainDb_DateTimeFieldUpdateOperationsInput;
	weight?: mainDb_NullableFloatFieldUpdateOperationsInput;
}

export interface mainDb_ClinicalEventUpdateManyWithoutPatientNestedInput {
	connect?: mainDb_ClinicalEventWhereUniqueInput[];
	connectOrCreate?: mainDb_ClinicalEventCreateOrConnectWithoutPatientInput[];
	create?: mainDb_ClinicalEventCreateWithoutPatientInput[];
	createMany?: mainDb_ClinicalEventCreateManyPatientInputEnvelope;
	delete?: mainDb_ClinicalEventWhereUniqueInput[];
	deleteMany?: mainDb_ClinicalEventScalarWhereInput[];
	disconnect?: mainDb_ClinicalEventWhereUniqueInput[];
	set?: mainDb_ClinicalEventWhereUniqueInput[];
	update?: mainDb_ClinicalEventUpdateWithWhereUniqueWithoutPatientInput[];
	updateMany?: mainDb_ClinicalEventUpdateManyWithWhereWithoutPatientInput[];
	upsert?: mainDb_ClinicalEventUpsertWithWhereUniqueWithoutPatientInput[];
}

export interface mainDb_ClinicalEventUpdateWithWhereUniqueWithoutPatientInput {
	data: mainDb_ClinicalEventUpdateWithoutPatientInput;
	where: mainDb_ClinicalEventWhereUniqueInput;
}

export interface mainDb_ClinicalEventUpdateWithoutPatientInput {
	Prescription?: mainDb_PrescriptionUpdateOneWithoutClinicalEventNestedInput;
	WorkingList?: mainDb_WorkingListUpdateManyWithoutClinicalEventNestedInput;
	clinicalDiagnosticId?: mainDb_NullableStringFieldUpdateOperationsInput;
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	deleted?: mainDb_BoolFieldUpdateOperationsInput;
	deletedReport?: mainDb_NullableStringFieldUpdateOperationsInput;
	dicom?: mainDb_BoolFieldUpdateOperationsInput;
	dicomId?: mainDb_NullableStringFieldUpdateOperationsInput;
	eventCategory?: mainDb_EnumEventCategoryFieldUpdateOperationsInput;
	eventType?: mainDb_EnumEventTypesFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	updatedAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	user?: mainDb_UserUpdateOneRequiredWithoutClinicalEventNestedInput;
}

export interface mainDb_EnumEventCategoryFieldUpdateOperationsInput {
	set?: mainDb_EventCategoryValues;
}

export interface mainDb_EnumEventTypesFieldUpdateOperationsInput {
	set?: mainDb_EventTypesValues;
}

export interface mainDb_UserUpdateOneRequiredWithoutClinicalEventNestedInput {
	connect?: mainDb_UserWhereUniqueInput;
	connectOrCreate?: mainDb_UserCreateOrConnectWithoutClinicalEventInput;
	create?: mainDb_UserCreateWithoutClinicalEventInput;
	update?: mainDb_UserUpdateToOneWithWhereWithoutClinicalEventInput;
	upsert?: mainDb_UserUpsertWithoutClinicalEventInput;
}

export interface mainDb_UserUpdateToOneWithWhereWithoutClinicalEventInput {
	data?: mainDb_UserUpdateWithoutClinicalEventInput;
	where?: mainDb_UserWhereInput;
}

export interface mainDb_UserUpdateWithoutClinicalEventInput {
	WorkingList?: mainDb_WorkingListUpdateManyWithoutUserNestedInput;
	avatarUrl?: mainDb_NullableStringFieldUpdateOperationsInput;
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	editorKey?: mainDb_StringFieldUpdateOperationsInput;
	email?: mainDb_StringFieldUpdateOperationsInput;
	firstName?: mainDb_NullableStringFieldUpdateOperationsInput;
	fullName?: mainDb_NullableStringFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	lastConnection?: mainDb_DateTimeFieldUpdateOperationsInput;
	lastName?: mainDb_NullableStringFieldUpdateOperationsInput;
	phoneNumbers?: mainDb_UserUpdatephoneNumbersInput;
	role?: mainDb_EnumRoleFieldUpdateOperationsInput;
	searchApiKey?: mainDb_StringFieldUpdateOperationsInput;
	searchApiKeyId?: mainDb_NullableIntFieldUpdateOperationsInput;
	userId?: mainDb_StringFieldUpdateOperationsInput;
}

export interface mainDb_WorkingListUpdateManyWithoutUserNestedInput {
	connect?: mainDb_WorkingListWhereUniqueInput[];
	connectOrCreate?: mainDb_WorkingListCreateOrConnectWithoutUserInput[];
	create?: mainDb_WorkingListCreateWithoutUserInput[];
	createMany?: mainDb_WorkingListCreateManyUserInputEnvelope;
	delete?: mainDb_WorkingListWhereUniqueInput[];
	deleteMany?: mainDb_WorkingListScalarWhereInput[];
	disconnect?: mainDb_WorkingListWhereUniqueInput[];
	set?: mainDb_WorkingListWhereUniqueInput[];
	update?: mainDb_WorkingListUpdateWithWhereUniqueWithoutUserInput[];
	updateMany?: mainDb_WorkingListUpdateManyWithWhereWithoutUserInput[];
	upsert?: mainDb_WorkingListUpsertWithWhereUniqueWithoutUserInput[];
}

export interface mainDb_WorkingListUpdateWithWhereUniqueWithoutUserInput {
	data: mainDb_WorkingListUpdateWithoutUserInput;
	where: mainDb_WorkingListWhereUniqueInput;
}

export interface mainDb_WorkingListUpdateWithoutUserInput {
	clinicalEvent?: mainDb_ClinicalEventUpdateOneRequiredWithoutWorkingListNestedInput;
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	linkId?: mainDb_NullableStringFieldUpdateOperationsInput;
	linked?: mainDb_BoolFieldUpdateOperationsInput;
	locked?: mainDb_BoolFieldUpdateOperationsInput;
	modality?: mainDb_ModalityUpdateOneRequiredWithoutWorkingListNestedInput;
	modalityExamStatus?: mainDb_EnumModalityExamStatusFieldUpdateOperationsInput;
	patient?: mainDb_PatientUpdateOneRequiredWithoutWorkingListNestedInput;
	updatedAt?: mainDb_DateTimeFieldUpdateOperationsInput;
}

export interface mainDb_ClinicalEventUpdateOneRequiredWithoutWorkingListNestedInput {
	connect?: mainDb_ClinicalEventWhereUniqueInput;
	connectOrCreate?: mainDb_ClinicalEventCreateOrConnectWithoutWorkingListInput;
	create?: mainDb_ClinicalEventCreateWithoutWorkingListInput;
	update?: mainDb_ClinicalEventUpdateToOneWithWhereWithoutWorkingListInput;
	upsert?: mainDb_ClinicalEventUpsertWithoutWorkingListInput;
}

export interface mainDb_ClinicalEventUpdateToOneWithWhereWithoutWorkingListInput {
	data?: mainDb_ClinicalEventUpdateWithoutWorkingListInput;
	where?: mainDb_ClinicalEventWhereInput;
}

export interface mainDb_ClinicalEventUpdateWithoutWorkingListInput {
	Prescription?: mainDb_PrescriptionUpdateOneWithoutClinicalEventNestedInput;
	clinicalDiagnosticId?: mainDb_NullableStringFieldUpdateOperationsInput;
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	deleted?: mainDb_BoolFieldUpdateOperationsInput;
	deletedReport?: mainDb_NullableStringFieldUpdateOperationsInput;
	dicom?: mainDb_BoolFieldUpdateOperationsInput;
	dicomId?: mainDb_NullableStringFieldUpdateOperationsInput;
	eventCategory?: mainDb_EnumEventCategoryFieldUpdateOperationsInput;
	eventType?: mainDb_EnumEventTypesFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	patient?: mainDb_PatientUpdateOneRequiredWithoutClinicalEventNestedInput;
	updatedAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	user?: mainDb_UserUpdateOneRequiredWithoutClinicalEventNestedInput;
}

export interface mainDb_PatientUpdateOneRequiredWithoutClinicalEventNestedInput {
	connect?: mainDb_PatientWhereUniqueInput;
	connectOrCreate?: mainDb_PatientCreateOrConnectWithoutClinicalEventInput;
	create?: mainDb_PatientCreateWithoutClinicalEventInput;
	update?: mainDb_PatientUpdateToOneWithWhereWithoutClinicalEventInput;
	upsert?: mainDb_PatientUpsertWithoutClinicalEventInput;
}

export interface mainDb_PatientUpdateToOneWithWhereWithoutClinicalEventInput {
	data?: mainDb_PatientUpdateWithoutClinicalEventInput;
	where?: mainDb_PatientWhereInput;
}

export interface mainDb_PatientUpdateWithoutClinicalEventInput {
	ConsultationList?: mainDb_ConsultationListUpdateManyWithoutPatientNestedInput;
	DocumentStore?: mainDb_DocumentStoreUpdateManyWithoutPatientNestedInput;
	WorkingList?: mainDb_WorkingListUpdateManyWithoutPatientNestedInput;
	address?: mainDb_NullableStringFieldUpdateOperationsInput;
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	ddn?: mainDb_DateTimeFieldUpdateOperationsInput;
	deleted?: mainDb_BoolFieldUpdateOperationsInput;
	firstName?: mainDb_StringFieldUpdateOperationsInput;
	height?: mainDb_NullableFloatFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	informationsConfirmed?: mainDb_BoolFieldUpdateOperationsInput;
	lastName?: mainDb_StringFieldUpdateOperationsInput;
	nTel?: mainDb_NullableStringFieldUpdateOperationsInput;
	onTrash?: mainDb_BoolFieldUpdateOperationsInput;
	sexe?: mainDb_EnumSexeFieldUpdateOperationsInput;
	updated?: mainDb_DateTimeFieldUpdateOperationsInput;
	weight?: mainDb_NullableFloatFieldUpdateOperationsInput;
}

export interface mainDb_ConsultationListUpdateManyWithoutPatientNestedInput {
	connect?: mainDb_ConsultationListWhereUniqueInput[];
	connectOrCreate?: mainDb_ConsultationListCreateOrConnectWithoutPatientInput[];
	create?: mainDb_ConsultationListCreateWithoutPatientInput[];
	createMany?: mainDb_ConsultationListCreateManyPatientInputEnvelope;
	delete?: mainDb_ConsultationListWhereUniqueInput[];
	deleteMany?: mainDb_ConsultationListScalarWhereInput[];
	disconnect?: mainDb_ConsultationListWhereUniqueInput[];
	set?: mainDb_ConsultationListWhereUniqueInput[];
	update?: mainDb_ConsultationListUpdateWithWhereUniqueWithoutPatientInput[];
	updateMany?: mainDb_ConsultationListUpdateManyWithWhereWithoutPatientInput[];
	upsert?: mainDb_ConsultationListUpsertWithWhereUniqueWithoutPatientInput[];
}

export interface mainDb_ConsultationListScalarWhereInput {
	AND?: mainDb_ConsultationListScalarWhereInput[];
	NOT?: mainDb_ConsultationListScalarWhereInput[];
	OR?: mainDb_ConsultationListScalarWhereInput[];
	active?: mainDb_BoolFilter;
	consultationId?: mainDb_StringFilter;
	createdAt?: mainDb_DateTimeFilter;
	id?: mainDb_StringFilter;
	patientId?: mainDb_StringFilter;
	updatedAt?: mainDb_DateTimeFilter;
}

export interface mainDb_ConsultationListUpdateWithWhereUniqueWithoutPatientInput {
	data: mainDb_ConsultationListUpdateWithoutPatientInput;
	where: mainDb_ConsultationListWhereUniqueInput;
}

export interface mainDb_ConsultationListUpdateWithoutPatientInput {
	active?: mainDb_BoolFieldUpdateOperationsInput;
	consultation?: mainDb_ConsultationUpdateOneRequiredWithoutConsultationListNestedInput;
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	updatedAt?: mainDb_DateTimeFieldUpdateOperationsInput;
}

export interface mainDb_ConsultationUpdateOneRequiredWithoutConsultationListNestedInput {
	connect?: mainDb_ConsultationWhereUniqueInput;
	connectOrCreate?: mainDb_ConsultationCreateOrConnectWithoutConsultationListInput;
	create?: mainDb_ConsultationCreateWithoutConsultationListInput;
	update?: mainDb_ConsultationUpdateToOneWithWhereWithoutConsultationListInput;
	upsert?: mainDb_ConsultationUpsertWithoutConsultationListInput;
}

export interface mainDb_ConsultationUpdateToOneWithWhereWithoutConsultationListInput {
	data?: mainDb_ConsultationUpdateWithoutConsultationListInput;
	where?: mainDb_ConsultationWhereInput;
}

export interface mainDb_ConsultationUpdateWithoutConsultationListInput {
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	day?: mainDb_IntFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	month?: mainDb_IntFieldUpdateOperationsInput;
	year?: mainDb_IntFieldUpdateOperationsInput;
}

export interface mainDb_ConsultationUpsertWithoutConsultationListInput {
	create?: mainDb_ConsultationCreateWithoutConsultationListInput;
	update?: mainDb_ConsultationUpdateWithoutConsultationListInput;
	where?: mainDb_ConsultationWhereInput;
}

export interface mainDb_ConsultationListUpdateManyWithWhereWithoutPatientInput {
	data: mainDb_ConsultationListUpdateManyMutationInput;
	where: mainDb_ConsultationListScalarWhereInput;
}

export interface mainDb_ConsultationListUpdateManyMutationInput {
	active?: mainDb_BoolFieldUpdateOperationsInput;
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	updatedAt?: mainDb_DateTimeFieldUpdateOperationsInput;
}

export interface mainDb_ConsultationListUpsertWithWhereUniqueWithoutPatientInput {
	create: mainDb_ConsultationListCreateWithoutPatientInput;
	update: mainDb_ConsultationListUpdateWithoutPatientInput;
	where: mainDb_ConsultationListWhereUniqueInput;
}

export interface mainDb_DocumentStoreUpdateManyWithoutPatientNestedInput {
	connect?: mainDb_DocumentStoreWhereUniqueInput[];
	connectOrCreate?: mainDb_DocumentStoreCreateOrConnectWithoutPatientInput[];
	create?: mainDb_DocumentStoreCreateWithoutPatientInput[];
	createMany?: mainDb_DocumentStoreCreateManyPatientInputEnvelope;
	delete?: mainDb_DocumentStoreWhereUniqueInput[];
	deleteMany?: mainDb_DocumentStoreScalarWhereInput[];
	disconnect?: mainDb_DocumentStoreWhereUniqueInput[];
	set?: mainDb_DocumentStoreWhereUniqueInput[];
	update?: mainDb_DocumentStoreUpdateWithWhereUniqueWithoutPatientInput[];
	updateMany?: mainDb_DocumentStoreUpdateManyWithWhereWithoutPatientInput[];
	upsert?: mainDb_DocumentStoreUpsertWithWhereUniqueWithoutPatientInput[];
}

export interface mainDb_DocumentStoreScalarWhereInput {
	AND?: mainDb_DocumentStoreScalarWhereInput[];
	NOT?: mainDb_DocumentStoreScalarWhereInput[];
	OR?: mainDb_DocumentStoreScalarWhereInput[];
	content?: mainDb_BytesNullableFilter;
	id?: mainDb_StringFilter;
	patientDocumentType?: mainDb_EnumPatientDocumentTypeFilter;
	patientId?: mainDb_StringFilter;
	textContent?: mainDb_StringNullableFilter;
}

export interface mainDb_DocumentStoreUpdateWithWhereUniqueWithoutPatientInput {
	data: mainDb_DocumentStoreUpdateWithoutPatientInput;
	where: mainDb_DocumentStoreWhereUniqueInput;
}

export interface mainDb_DocumentStoreUpdateWithoutPatientInput {
	content?: mainDb_NullableBytesFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	patientDocumentType?: mainDb_EnumPatientDocumentTypeFieldUpdateOperationsInput;
	textContent?: mainDb_NullableStringFieldUpdateOperationsInput;
}

export interface mainDb_NullableBytesFieldUpdateOperationsInput {
	set?: string;
}

export interface mainDb_EnumPatientDocumentTypeFieldUpdateOperationsInput {
	set?: mainDb_PatientDocumentTypeValues;
}

export interface mainDb_DocumentStoreUpdateManyWithWhereWithoutPatientInput {
	data: mainDb_DocumentStoreUpdateManyMutationInput;
	where: mainDb_DocumentStoreScalarWhereInput;
}

export interface mainDb_DocumentStoreUpdateManyMutationInput {
	content?: mainDb_NullableBytesFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	patientDocumentType?: mainDb_EnumPatientDocumentTypeFieldUpdateOperationsInput;
	textContent?: mainDb_NullableStringFieldUpdateOperationsInput;
}

export interface mainDb_DocumentStoreUpsertWithWhereUniqueWithoutPatientInput {
	create: mainDb_DocumentStoreCreateWithoutPatientInput;
	update: mainDb_DocumentStoreUpdateWithoutPatientInput;
	where: mainDb_DocumentStoreWhereUniqueInput;
}

export interface mainDb_WorkingListUpdateManyWithoutPatientNestedInput {
	connect?: mainDb_WorkingListWhereUniqueInput[];
	connectOrCreate?: mainDb_WorkingListCreateOrConnectWithoutPatientInput[];
	create?: mainDb_WorkingListCreateWithoutPatientInput[];
	createMany?: mainDb_WorkingListCreateManyPatientInputEnvelope;
	delete?: mainDb_WorkingListWhereUniqueInput[];
	deleteMany?: mainDb_WorkingListScalarWhereInput[];
	disconnect?: mainDb_WorkingListWhereUniqueInput[];
	set?: mainDb_WorkingListWhereUniqueInput[];
	update?: mainDb_WorkingListUpdateWithWhereUniqueWithoutPatientInput[];
	updateMany?: mainDb_WorkingListUpdateManyWithWhereWithoutPatientInput[];
	upsert?: mainDb_WorkingListUpsertWithWhereUniqueWithoutPatientInput[];
}

export interface mainDb_WorkingListUpdateWithWhereUniqueWithoutPatientInput {
	data: mainDb_WorkingListUpdateWithoutPatientInput;
	where: mainDb_WorkingListWhereUniqueInput;
}

export interface mainDb_WorkingListUpdateWithoutPatientInput {
	clinicalEvent?: mainDb_ClinicalEventUpdateOneRequiredWithoutWorkingListNestedInput;
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	linkId?: mainDb_NullableStringFieldUpdateOperationsInput;
	linked?: mainDb_BoolFieldUpdateOperationsInput;
	locked?: mainDb_BoolFieldUpdateOperationsInput;
	modality?: mainDb_ModalityUpdateOneRequiredWithoutWorkingListNestedInput;
	modalityExamStatus?: mainDb_EnumModalityExamStatusFieldUpdateOperationsInput;
	updatedAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	user?: mainDb_UserUpdateOneRequiredWithoutWorkingListNestedInput;
}

export interface mainDb_UserUpdateOneRequiredWithoutWorkingListNestedInput {
	connect?: mainDb_UserWhereUniqueInput;
	connectOrCreate?: mainDb_UserCreateOrConnectWithoutWorkingListInput;
	create?: mainDb_UserCreateWithoutWorkingListInput;
	update?: mainDb_UserUpdateToOneWithWhereWithoutWorkingListInput;
	upsert?: mainDb_UserUpsertWithoutWorkingListInput;
}

export interface mainDb_UserUpdateToOneWithWhereWithoutWorkingListInput {
	data?: mainDb_UserUpdateWithoutWorkingListInput;
	where?: mainDb_UserWhereInput;
}

export interface mainDb_UserUpdateWithoutWorkingListInput {
	ClinicalEvent?: mainDb_ClinicalEventUpdateManyWithoutUserNestedInput;
	avatarUrl?: mainDb_NullableStringFieldUpdateOperationsInput;
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	editorKey?: mainDb_StringFieldUpdateOperationsInput;
	email?: mainDb_StringFieldUpdateOperationsInput;
	firstName?: mainDb_NullableStringFieldUpdateOperationsInput;
	fullName?: mainDb_NullableStringFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	lastConnection?: mainDb_DateTimeFieldUpdateOperationsInput;
	lastName?: mainDb_NullableStringFieldUpdateOperationsInput;
	phoneNumbers?: mainDb_UserUpdatephoneNumbersInput;
	role?: mainDb_EnumRoleFieldUpdateOperationsInput;
	searchApiKey?: mainDb_StringFieldUpdateOperationsInput;
	searchApiKeyId?: mainDb_NullableIntFieldUpdateOperationsInput;
	userId?: mainDb_StringFieldUpdateOperationsInput;
}

export interface mainDb_UserUpdatephoneNumbersInput {
	push?: string[];
	set?: string[];
}

export interface mainDb_EnumRoleFieldUpdateOperationsInput {
	set?: mainDb_RoleValues;
}

export interface mainDb_NullableIntFieldUpdateOperationsInput {
	decrement?: number;
	divide?: number;
	increment?: number;
	multiply?: number;
	set?: number;
}

export interface mainDb_UserUpsertWithoutWorkingListInput {
	create?: mainDb_UserCreateWithoutWorkingListInput;
	update?: mainDb_UserUpdateWithoutWorkingListInput;
	where?: mainDb_UserWhereInput;
}

export interface mainDb_WorkingListUpdateManyWithWhereWithoutPatientInput {
	data: mainDb_WorkingListUpdateManyMutationInput;
	where: mainDb_WorkingListScalarWhereInput;
}

export interface mainDb_WorkingListUpdateManyMutationInput {
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	linkId?: mainDb_NullableStringFieldUpdateOperationsInput;
	linked?: mainDb_BoolFieldUpdateOperationsInput;
	locked?: mainDb_BoolFieldUpdateOperationsInput;
	modalityExamStatus?: mainDb_EnumModalityExamStatusFieldUpdateOperationsInput;
	updatedAt?: mainDb_DateTimeFieldUpdateOperationsInput;
}

export interface mainDb_WorkingListUpsertWithWhereUniqueWithoutPatientInput {
	create: mainDb_WorkingListCreateWithoutPatientInput;
	update: mainDb_WorkingListUpdateWithoutPatientInput;
	where: mainDb_WorkingListWhereUniqueInput;
}

export interface mainDb_NullableFloatFieldUpdateOperationsInput {
	decrement?: number;
	divide?: number;
	increment?: number;
	multiply?: number;
	set?: number;
}

export interface mainDb_EnumSexeFieldUpdateOperationsInput {
	set?: mainDb_SexeValues;
}

export interface mainDb_PatientUpsertWithoutClinicalEventInput {
	create?: mainDb_PatientCreateWithoutClinicalEventInput;
	update?: mainDb_PatientUpdateWithoutClinicalEventInput;
	where?: mainDb_PatientWhereInput;
}

export interface mainDb_ClinicalEventUpsertWithoutWorkingListInput {
	create?: mainDb_ClinicalEventCreateWithoutWorkingListInput;
	update?: mainDb_ClinicalEventUpdateWithoutWorkingListInput;
	where?: mainDb_ClinicalEventWhereInput;
}

export interface mainDb_WorkingListUpdateManyWithWhereWithoutUserInput {
	data: mainDb_WorkingListUpdateManyMutationInput;
	where: mainDb_WorkingListScalarWhereInput;
}

export interface mainDb_WorkingListUpsertWithWhereUniqueWithoutUserInput {
	create: mainDb_WorkingListCreateWithoutUserInput;
	update: mainDb_WorkingListUpdateWithoutUserInput;
	where: mainDb_WorkingListWhereUniqueInput;
}

export interface mainDb_UserUpsertWithoutClinicalEventInput {
	create?: mainDb_UserCreateWithoutClinicalEventInput;
	update?: mainDb_UserUpdateWithoutClinicalEventInput;
	where?: mainDb_UserWhereInput;
}

export interface mainDb_ClinicalEventUpdateManyWithWhereWithoutPatientInput {
	data: mainDb_ClinicalEventUpdateManyMutationInput;
	where: mainDb_ClinicalEventScalarWhereInput;
}

export interface mainDb_ClinicalEventUpdateManyMutationInput {
	clinicalDiagnosticId?: mainDb_NullableStringFieldUpdateOperationsInput;
	createdAt?: mainDb_DateTimeFieldUpdateOperationsInput;
	deleted?: mainDb_BoolFieldUpdateOperationsInput;
	deletedReport?: mainDb_NullableStringFieldUpdateOperationsInput;
	dicom?: mainDb_BoolFieldUpdateOperationsInput;
	dicomId?: mainDb_NullableStringFieldUpdateOperationsInput;
	eventCategory?: mainDb_EnumEventCategoryFieldUpdateOperationsInput;
	eventType?: mainDb_EnumEventTypesFieldUpdateOperationsInput;
	id?: mainDb_StringFieldUpdateOperationsInput;
	updatedAt?: mainDb_DateTimeFieldUpdateOperationsInput;
}

export interface mainDb_ClinicalEventUpsertWithWhereUniqueWithoutPatientInput {
	create: mainDb_ClinicalEventCreateWithoutPatientInput;
	update: mainDb_ClinicalEventUpdateWithoutPatientInput;
	where: mainDb_ClinicalEventWhereUniqueInput;
}

export interface mainDb_PatientUpsertWithoutWorkingListInput {
	create?: mainDb_PatientCreateWithoutWorkingListInput;
	update?: mainDb_PatientUpdateWithoutWorkingListInput;
	where?: mainDb_PatientWhereInput;
}

export interface mainDb_WorkingListUpdateManyWithWhereWithoutClinicalEventInput {
	data: mainDb_WorkingListUpdateManyMutationInput;
	where: mainDb_WorkingListScalarWhereInput;
}

export interface mainDb_WorkingListUpsertWithWhereUniqueWithoutClinicalEventInput {
	create: mainDb_WorkingListCreateWithoutClinicalEventInput;
	update: mainDb_WorkingListUpdateWithoutClinicalEventInput;
	where: mainDb_WorkingListWhereUniqueInput;
}

export interface mainDb_ClinicalEventUpdateManyWithWhereWithoutUserInput {
	data: mainDb_ClinicalEventUpdateManyMutationInput;
	where: mainDb_ClinicalEventScalarWhereInput;
}

export interface mainDb_ClinicalEventUpsertWithWhereUniqueWithoutUserInput {
	create: mainDb_ClinicalEventCreateWithoutUserInput;
	update: mainDb_ClinicalEventUpdateWithoutUserInput;
	where: mainDb_ClinicalEventWhereUniqueInput;
}

export type JSONValue = string | number | boolean | JSONObject | Array<JSONValue>;

export type JSONObject = { [key: string]: JSONValue };

export const mainDb_AppSubscriptionPayloadType = {
	closeAllTabs: "closeAllTabs",
	consultationLists: "consultationLists",
	emptyTrash: "emptyTrash",
	focusedDocument: "focusedDocument",
	mobileDeviceUpdate: "mobileDeviceUpdate",
	modalityUpdate: "modalityUpdate",
	patientUpdate: "patientUpdate",
	secondaryDisplay: "secondaryDisplay",
	workingLists: "workingLists",
} as const;

export type mainDb_AppSubscriptionPayloadTypeValues =
	(typeof mainDb_AppSubscriptionPayloadType)[keyof typeof mainDb_AppSubscriptionPayloadType];

export const mainDb_EventTypes = {
	BIOLOGY: "BIOLOGY",
	CERTIFICAT: "CERTIFICAT",
	CLINICALEXAM: "CLINICALEXAM",
	DIAGNOSTIC: "DIAGNOSTIC",
	ECG: "ECG",
	HISTORY: "HISTORY",
	MEDICAL_REPORT: "MEDICAL_REPORT",
	PRESCRIPTION: "PRESCRIPTION",
	SONOGRAPHY: "SONOGRAPHY",
} as const;

export type mainDb_EventTypesValues = (typeof mainDb_EventTypes)[keyof typeof mainDb_EventTypes];

export const mainDb_DataTableParmTypeEnum = {
	number: "number",
	string: "string",
} as const;

export type mainDb_DataTableParmTypeEnumValues =
	(typeof mainDb_DataTableParmTypeEnum)[keyof typeof mainDb_DataTableParmTypeEnum];

export const mainDb_ModalityType = {
	AR: "AR",
	ASMT: "ASMT",
	AU: "AU",
	BDUS: "BDUS",
	BI: "BI",
	BMD: "BMD",
	CR: "CR",
	CT: "CT",
	CTPROTOCOL: "CTPROTOCOL",
	DG: "DG",
	DOC: "DOC",
	DX: "DX",
	ECG: "ECG",
	EPS: "EPS",
	ES: "ES",
	FID: "FID",
	GM: "GM",
	HC: "HC",
	HD: "HD",
	IO: "IO",
	IOL: "IOL",
	IVOCT: "IVOCT",
	IVUS: "IVUS",
	KER: "KER",
	KO: "KO",
	LEN: "LEN",
	LS: "LS",
	M3D: "M3D",
	MG: "MG",
	MR: "MR",
	NM: "NM",
	OAM: "OAM",
	OCT: "OCT",
	OP: "OP",
	OPM: "OPM",
	OPT: "OPT",
	OPTBSV: "OPTBSV",
	OPTENF: "OPTENF",
	OPV: "OPV",
	OSS: "OSS",
	OT: "OT",
	PLAN: "PLAN",
	PR: "PR",
	PT: "PT",
	PX: "PX",
	REG: "REG",
	RESP: "RESP",
	RF: "RF",
	RG: "RG",
	RTDOSE: "RTDOSE",
	RTIMAGE: "RTIMAGE",
	RTINTENT: "RTINTENT",
	RTPLAN: "RTPLAN",
	RTRAD: "RTRAD",
	RTRECORD: "RTRECORD",
	RTSEGANN: "RTSEGANN",
	RTSTRUCT: "RTSTRUCT",
	RWV: "RWV",
	SEG: "SEG",
	SM: "SM",
	SMR: "SMR",
	SR: "SR",
	SRF: "SRF",
	STAIN: "STAIN",
	TEXTUREMAP: "TEXTUREMAP",
	TG: "TG",
	US: "US",
	VA: "VA",
	XA: "XA",
	XC: "XC",
} as const;

export type mainDb_ModalityTypeValues = (typeof mainDb_ModalityType)[keyof typeof mainDb_ModalityType];

export const mainDb_EventCategory = {
	DOCUMENT: "DOCUMENT",
	FOLDER: "FOLDER",
} as const;

export type mainDb_EventCategoryValues = (typeof mainDb_EventCategory)[keyof typeof mainDb_EventCategory];

export const mainDb_MobileDeviceType = {
	DOCTOR: "DOCTOR",
	SECRETARY: "SECRETARY",
} as const;

export type mainDb_MobileDeviceTypeValues = (typeof mainDb_MobileDeviceType)[keyof typeof mainDb_MobileDeviceType];

export const mainDb_Sexe = {
	F: "F",
	M: "M",
} as const;

export type mainDb_SexeValues = (typeof mainDb_Sexe)[keyof typeof mainDb_Sexe];

export const mainDb_PatientDocumentType = {
	document: "document",
	folder: "folder",
} as const;

export type mainDb_PatientDocumentTypeValues =
	(typeof mainDb_PatientDocumentType)[keyof typeof mainDb_PatientDocumentType];

export const mainDb_QueryMode = {
	default: "default",
	insensitive: "insensitive",
} as const;

export type mainDb_QueryModeValues = (typeof mainDb_QueryMode)[keyof typeof mainDb_QueryMode];

export const mainDb_ModalityExamStatus = {
	CLOSED: "CLOSED",
	CREATED: "CREATED",
	INPROGRESS: "INPROGRESS",
	REALIZED: "REALIZED",
	REPORT_DONE: "REPORT_DONE",
} as const;

export type mainDb_ModalityExamStatusValues =
	(typeof mainDb_ModalityExamStatus)[keyof typeof mainDb_ModalityExamStatus];

export const mainDb_Role = {
	ADMIN: "ADMIN",
	USER: "USER",
} as const;

export type mainDb_RoleValues = (typeof mainDb_Role)[keyof typeof mainDb_Role];

export interface AppSubscriptionGlobalSubscriptionInput {
	subscriptionSpecificId: string[];
}

export interface AppSubscriptionTriggerAppSubscriptionInput {
	appPayload: string;
	appType: mainDb_AppSubscriptionPayloadTypeValues;
	subscriptionSpecificId?: string;
	global: boolean;
}

export interface CountriesInput {
	filter?: countries_CountryFilterInput;
}

export interface DataTableGetDataTableConfigurationsInput {
	eventType: mainDb_EventTypesValues;
}

export interface DataTableInsertDataSubscriptionInput {
	clinicalEventId: string;
}

export interface DataTableTriggerInsertDataSubscriptionInput {
	clinicalEventId: string;
	tableContentType: string;
	paramData: mainDb_ParamDataInputType;
	value: string;
}

export interface EconomizersCreateEconomizerInput {
	name: string;
	eventType: mainDb_EventTypesValues;
	template: string;
}

export interface EconomizersDeleteEconomizerInput {
	id: string;
}

export interface EconomizersEconomizerTemplateInput {
	id: string;
}

export interface EconomizersEconomizersInput {
	eventType?: mainDb_EventTypesValues;
}

export interface EconomizersUpdateEconomizerInput {
	id: string;
	template: string;
}

export interface ModalityGetOneModalityInput {
	id: string;
}

export interface ModalityGetSpecificModalitiesInput {
	modalityType: mainDb_ModalityTypeValues;
}

export interface ModalitySwitchModalityInput {
	id: string;
	enabled: boolean;
}

export interface ModalityUpdateOneModalityInput {
	id: string;
	modalityPseudo: string;
	modalityAETitle: string;
	modalityIpAddress: string;
	modalityPort: number;
	modalityType: mainDb_ModalityTypeValues;
}

export interface WorkingListsCreateOneWorkingListInput {
	clinicalEventId: string;
	modalityId: string;
	patientId: string;
}

export interface WorkingListsDeleteOneWorkingListInput {
	id: string;
}

export interface WorkingListsLinkWorkingListInput {
	id: string;
	linkId: string;
}

export interface WorkingListsToggleLockWorkingListInput {
	id: string;
}

export interface WorkingListsWorkingListsInput {
	clinicalEventId: string;
}

export interface ClinicalEventsCreateOneClinicalEventInput {
	eventType: mainDb_EventTypesValues;
	eventCategory: mainDb_EventCategoryValues;
	patientId: string;
}

export interface ClinicalEventsDeleteOneClinicalEventInput {
	id: string;
	deletedReport: string;
}

export interface ClinicalEventsGetClinicalEventInput {
	id: string;
}

export interface ClinicalEventsGetClinicalEventWithConfigurationInput {
	id: string;
}

export interface ClinicalEventsGetClinicalEventsInput {
	patientId: string;
}

export interface ConsultationListCheckIfRegistredInput {
	consultationId: string;
	patientId: string;
}

export interface ConsultationListCloseConsultationInput {
	id: string;
}

export interface ConsultationListRegisterPatientInput {
	patient_id: string;
}

export interface ConsultationListTodayConsultationInput {
	day: number;
	month: number;
	year: number;
}

export interface ConsultationListTodayListsInput {
	consultationId: string;
}

export interface ConsultationListToggleActivePatientInput {
	id: string;
	active: boolean;
}

export interface ConsultationListUnregisterPatientInput {
	consultationId: string;
	patientId: string;
}

export interface MobileDevicesAddMobileDeviceMutationInput {
	uuid: string;
	accessToken: string;
	expireAt: string;
	mobileDeviceType: mainDb_MobileDeviceTypeValues;
}

export interface MobileDevicesRegisterOneMobileDeviceInput {
	accessToken: string;
	uuid: string;
}

export interface MobileDevicesRemoveMobileDeviceInput {
	id: string;
}

export interface MobileDevicesResetMobileDeviceInput {
	id: string;
	accessToken: string;
}

export interface MobileDevicesSwitchMobileDeviceInput {
	id: string;
	mobileDeviceType: mainDb_MobileDeviceTypeValues;
}

export interface MobileDevicesUpdateMobileDeviceExpirationInput {
	id: string;
	Months: number;
}

export interface PatientsMovePatientFolderToTrashInput {
	id: string;
	onTrash: boolean;
}

export interface PatientsAdd_One_patient_to_indexInput {
	firstName: string;
	lastName: string;
	ddn: string;
	sexe: mainDb_SexeValues;
}

export interface PatientsGetDocumentHeadersInput {
	patientId: string;
	patientDocumentType: mainDb_PatientDocumentTypeValues;
}

export interface PatientsGetOnePatientInput {
	patientId: string;
}

export interface PatientsGetOnePatientInfoInput {
	patientId: string;
}

export interface PatientsToggleSelectedTrashPatientInput {
	id: mainDb_StringFilter;
	delete: boolean;
	onTrash: boolean;
}

export interface PatientsUpdateOnePatientInput {
	id: string;
	firstName?: string;
	lastName?: string;
	sexe?: mainDb_SexeValues;
	ddn?: string;
	address?: string;
	nTel?: string;
}

export interface TemplatesFetchTemplateInput {
	id: string;
}

export interface TemplatesUpdateTemplateInput {
	id: string;
	template: string;
}

export interface UsersInternalGetUserInput {
	email: string;
}

export interface UsersInternalUpdateAuthenticatedUserInput {
	create: mainDb_UserCreateInput;
	update: mainDb_UserUpdateInput;
	where: mainDb_UserWhereUniqueInput;
}

export type WorkingListsLinkExamInput = ExtractInput<typeof function_WorkingListsLinkExam>;

export type WorkingListsRefreshLinkExamInput = ExtractInput<typeof function_WorkingListsRefreshLinkExam>;

export type UsersSubscribeInput = ExtractInput<typeof function_UsersSubscribe>;

export type UsersUpdateInput = ExtractInput<typeof function_UsersUpdate>;

export interface AppSubscriptionGlobalSubscriptionInputInternal {
	subscriptionSpecificId: string[];
	userId: string;
}

export interface AppSubscriptionTriggerAppSubscriptionInputInternal {
	appPayload: string;
	appType: mainDb_AppSubscriptionPayloadTypeValues;
	subscriptionSpecificId?: string;
	global: boolean;
	userId: string;
}

export interface CountriesInputInternal {
	filter?: countries_CountryFilterInput;
}

export interface DataTableGetDataTableConfigurationsInputInternal {
	eventType: mainDb_EventTypesValues;
}

export interface DataTableInsertDataSubscriptionInputInternal {
	clinicalEventId: string;
}

export interface DataTableTriggerInsertDataSubscriptionInputInternal {
	clinicalEventId: string;
	tableContentType: string;
	paramData: mainDb_ParamDataInputType;
	value: string;
}

export interface EconomizersCreateEconomizerInputInternal {
	name: string;
	eventType: mainDb_EventTypesValues;
	template: string;
}

export interface EconomizersDeleteEconomizerInputInternal {
	id: string;
}

export interface EconomizersEconomizerTemplateInputInternal {
	id: string;
}

export interface EconomizersEconomizersInputInternal {
	eventType?: mainDb_EventTypesValues;
}

export interface EconomizersUpdateEconomizerInputInternal {
	id: string;
	template: string;
}

export interface ModalityGetOneModalityInputInternal {
	id: string;
}

export interface ModalityGetSpecificModalitiesInputInternal {
	modalityType: mainDb_ModalityTypeValues;
}

export interface ModalitySwitchModalityInputInternal {
	id: string;
	enabled: boolean;
	userId: string;
}

export interface ModalityUpdateOneModalityInputInternal {
	id: string;
	modalityPseudo: string;
	modalityAETitle: string;
	modalityIpAddress: string;
	modalityPort: number;
	modalityType: mainDb_ModalityTypeValues;
	userId: string;
}

export interface WorkingListsCreateOneWorkingListInputInternal {
	clinicalEventId: string;
	modalityId: string;
	patientId: string;
	userId: string;
}

export interface WorkingListsDeleteOneWorkingListInputInternal {
	id: string;
	userId: string;
}

export interface WorkingListsLinkWorkingListInputInternal {
	id: string;
	linkId: string;
	userId: string;
}

export interface WorkingListsToggleLockWorkingListInputInternal {
	id: string;
	userId: string;
}

export interface WorkingListsWorkingListsInputInternal {
	clinicalEventId: string;
}

export interface ClinicalEventsCreateOneClinicalEventInputInternal {
	eventType: mainDb_EventTypesValues;
	eventCategory: mainDb_EventCategoryValues;
	patientId: string;
	userId: string;
}

export interface ClinicalEventsDeleteOneClinicalEventInputInternal {
	id: string;
	deletedReport: string;
	userId: string;
}

export interface ClinicalEventsGetClinicalEventInputInternal {
	id: string;
}

export interface ClinicalEventsGetClinicalEventWithConfigurationInputInternal {
	id: string;
}

export interface ClinicalEventsGetClinicalEventsInputInternal {
	patientId: string;
}

export interface ConsultationListCheckIfRegistredInputInternal {
	consultationId: string;
	patientId: string;
}

export interface ConsultationListCloseConsultationInputInternal {
	id: string;
	userId: string;
}

export interface ConsultationListRegisterPatientInputInternal {
	patient_id: string;
	userId: string;
}

export interface ConsultationListTodayConsultationInputInternal {
	day: number;
	month: number;
	year: number;
}

export interface ConsultationListTodayListsInputInternal {
	consultationId: string;
}

export interface ConsultationListToggleActivePatientInputInternal {
	id: string;
	userId: string;
	active: boolean;
}

export interface ConsultationListUnregisterPatientInputInternal {
	consultationId: string;
	patientId: string;
	userId: string;
}

export interface MobileDevicesAddMobileDeviceMutationInputInternal {
	uuid: string;
	accessToken: string;
	expireAt: string;
	mobileDeviceType: mainDb_MobileDeviceTypeValues;
	userId: string;
}

export interface MobileDevicesRegisterOneMobileDeviceInputInternal {
	accessToken: string;
	uuid: string;
	userId: string;
}

export interface MobileDevicesRemoveMobileDeviceInputInternal {
	id: string;
	userId: string;
}

export interface MobileDevicesResetMobileDeviceInputInternal {
	id: string;
	accessToken: string;
	userId: string;
}

export interface MobileDevicesSwitchMobileDeviceInputInternal {
	id: string;
	mobileDeviceType: mainDb_MobileDeviceTypeValues;
	userId: string;
}

export interface MobileDevicesUpdateMobileDeviceExpirationInputInternal {
	id: string;
	Months: number;
	userId: string;
}

export interface PatientsMovePatientFolderToTrashInputInternal {
	id: string;
	onTrash: boolean;
	userId: string;
}

export interface PatientsAdd_One_patient_to_indexInputInternal {
	firstName: string;
	lastName: string;
	ddn: string;
	sexe: mainDb_SexeValues;
	userId: string;
}

export interface PatientsGetDocumentHeadersInputInternal {
	patientId: string;
	patientDocumentType: mainDb_PatientDocumentTypeValues;
}

export interface PatientsGetOnePatientInputInternal {
	patientId: string;
}

export interface PatientsGetOnePatientInfoInputInternal {
	patientId: string;
}

export interface PatientsToggleSelectedTrashPatientInputInternal {
	id: mainDb_StringFilter;
	delete: boolean;
	onTrash: boolean;
}

export interface PatientsUpdateOnePatientInputInternal {
	id: string;
	firstName?: string;
	lastName?: string;
	sexe?: mainDb_SexeValues;
	ddn?: string;
	address?: string;
	nTel?: string;
	userId: string;
}

export interface TemplatesFetchTemplateInputInternal {
	id: string;
}

export interface TemplatesUpdateTemplateInputInternal {
	id: string;
	template: string;
}

export interface UsersGetUserInputInternal {
	userId: string;
}

export interface UsersInternalGetUserInputInternal {
	email: string;
}

export interface UsersInternalUpdateAuthenticatedUserInputInternal {
	create: mainDb_UserCreateInput;
	update: mainDb_UserUpdateInput;
	where: mainDb_UserWhereUniqueInput;
}

export interface WorkingListsLinkExamInputInternal {
	workingListId: string;
}

export interface WorkingListsRefreshLinkExamInputInternal {
	workingListId: string;
}

export interface UsersSubscribeInputInternal {
	id: string;
}

export interface UsersUpdateInputInternal {
	id: string;
	name: string;
	bio: string;
}

export interface AppSubscriptionGlobalSubscriptionInputInjected {
	subscriptionSpecificId: string[];
	userId: string;
}

export interface AppSubscriptionTriggerAppSubscriptionInputInjected {
	appPayload: string;
	appType: mainDb_AppSubscriptionPayloadTypeValues;
	subscriptionSpecificId?: string;
	global: boolean;
	userId: string;
}

export interface CountriesInputInjected {
	filter?: countries_CountryFilterInput;
}

export interface DataTableGetDataTableConfigurationsInputInjected {
	eventType: mainDb_EventTypesValues;
}

export interface DataTableInsertDataSubscriptionInputInjected {
	clinicalEventId: string;
}

export interface DataTableTriggerInsertDataSubscriptionInputInjected {
	clinicalEventId: string;
	tableContentType: string;
	paramData: mainDb_ParamDataInputType;
	value: string;
}

export interface EconomizersCreateEconomizerInputInjected {
	name: string;
	eventType: mainDb_EventTypesValues;
	template: string;
}

export interface EconomizersDeleteEconomizerInputInjected {
	id: string;
}

export interface EconomizersEconomizerTemplateInputInjected {
	id: string;
}

export interface EconomizersEconomizersInputInjected {
	eventType?: mainDb_EventTypesValues;
}

export interface EconomizersUpdateEconomizerInputInjected {
	id: string;
	template: string;
}

export interface ModalityGetOneModalityInputInjected {
	id: string;
}

export interface ModalityGetSpecificModalitiesInputInjected {
	modalityType: mainDb_ModalityTypeValues;
}

export interface ModalitySwitchModalityInputInjected {
	id: string;
	enabled: boolean;
	userId: string;
}

export interface ModalityUpdateOneModalityInputInjected {
	id: string;
	modalityPseudo: string;
	modalityAETitle: string;
	modalityIpAddress: string;
	modalityPort: number;
	modalityType: mainDb_ModalityTypeValues;
	userId: string;
}

export interface WorkingListsCreateOneWorkingListInputInjected {
	clinicalEventId: string;
	modalityId: string;
	patientId: string;
	userId: string;
}

export interface WorkingListsDeleteOneWorkingListInputInjected {
	id: string;
	userId: string;
}

export interface WorkingListsLinkWorkingListInputInjected {
	id: string;
	linkId: string;
	userId: string;
}

export interface WorkingListsToggleLockWorkingListInputInjected {
	id: string;
	userId: string;
}

export interface WorkingListsWorkingListsInputInjected {
	clinicalEventId: string;
}

export interface ClinicalEventsCreateOneClinicalEventInputInjected {
	eventType: mainDb_EventTypesValues;
	eventCategory: mainDb_EventCategoryValues;
	patientId: string;
	userId: string;
}

export interface ClinicalEventsDeleteOneClinicalEventInputInjected {
	id: string;
	deletedReport: string;
	userId: string;
}

export interface ClinicalEventsGetClinicalEventInputInjected {
	id: string;
}

export interface ClinicalEventsGetClinicalEventWithConfigurationInputInjected {
	id: string;
}

export interface ClinicalEventsGetClinicalEventsInputInjected {
	patientId: string;
}

export interface ConsultationListCheckIfRegistredInputInjected {
	consultationId: string;
	patientId: string;
}

export interface ConsultationListCloseConsultationInputInjected {
	id: string;
	userId: string;
}

export interface ConsultationListRegisterPatientInputInjected {
	patient_id: string;
	userId: string;
}

export interface ConsultationListTodayConsultationInputInjected {
	day: number;
	month: number;
	year: number;
}

export interface ConsultationListTodayListsInputInjected {
	consultationId: string;
}

export interface ConsultationListToggleActivePatientInputInjected {
	id: string;
	userId: string;
	active: boolean;
}

export interface ConsultationListUnregisterPatientInputInjected {
	consultationId: string;
	patientId: string;
	userId: string;
}

export interface MobileDevicesAddMobileDeviceMutationInputInjected {
	uuid: string;
	accessToken: string;
	expireAt: string;
	mobileDeviceType: mainDb_MobileDeviceTypeValues;
	userId: string;
}

export interface MobileDevicesRegisterOneMobileDeviceInputInjected {
	accessToken: string;
	uuid: string;
	userId: string;
}

export interface MobileDevicesRemoveMobileDeviceInputInjected {
	id: string;
	userId: string;
}

export interface MobileDevicesResetMobileDeviceInputInjected {
	id: string;
	accessToken: string;
	userId: string;
}

export interface MobileDevicesSwitchMobileDeviceInputInjected {
	id: string;
	mobileDeviceType: mainDb_MobileDeviceTypeValues;
	userId: string;
}

export interface MobileDevicesUpdateMobileDeviceExpirationInputInjected {
	id: string;
	Months: number;
	userId: string;
}

export interface PatientsMovePatientFolderToTrashInputInjected {
	id: string;
	onTrash: boolean;
	userId: string;
}

export interface PatientsAdd_One_patient_to_indexInputInjected {
	firstName: string;
	lastName: string;
	ddn: string;
	sexe: mainDb_SexeValues;
	userId: string;
}

export interface PatientsGetDocumentHeadersInputInjected {
	patientId: string;
	patientDocumentType: mainDb_PatientDocumentTypeValues;
}

export interface PatientsGetOnePatientInputInjected {
	patientId: string;
}

export interface PatientsGetOnePatientInfoInputInjected {
	patientId: string;
}

export interface PatientsToggleSelectedTrashPatientInputInjected {
	id: mainDb_StringFilter;
	delete: boolean;
	onTrash: boolean;
}

export interface PatientsUpdateOnePatientInputInjected {
	id: string;
	firstName?: string;
	lastName?: string;
	sexe?: mainDb_SexeValues;
	ddn?: string;
	address?: string;
	nTel?: string;
	userId: string;
}

export interface TemplatesFetchTemplateInputInjected {
	id: string;
}

export interface TemplatesUpdateTemplateInputInjected {
	id: string;
	template: string;
}

export interface UsersGetUserInputInjected {
	userId: string;
}

export interface UsersInternalGetUserInputInjected {
	email: string;
}

export interface UsersInternalUpdateAuthenticatedUserInputInjected {
	create: mainDb_UserCreateInput;
	update: mainDb_UserUpdateInput;
	where: mainDb_UserWhereUniqueInput;
}

export interface AppSubscriptionGlobalSubscriptionResponse {
	data?: AppSubscriptionGlobalSubscriptionResponseData;
	errors?: GraphQLError[];
}

export interface AppSubscriptionTriggerAppSubscriptionResponse {
	data?: AppSubscriptionTriggerAppSubscriptionResponseData;
	errors?: GraphQLError[];
}

export interface CountriesResponse {
	data?: CountriesResponseData;
	errors?: GraphQLError[];
}

export interface DataTableGetDataTableConfigurationsResponse {
	data?: DataTableGetDataTableConfigurationsResponseData;
	errors?: GraphQLError[];
}

export interface DataTableInsertDataSubscriptionResponse {
	data?: DataTableInsertDataSubscriptionResponseData;
	errors?: GraphQLError[];
}

export interface DataTableTriggerInsertDataSubscriptionResponse {
	data?: DataTableTriggerInsertDataSubscriptionResponseData;
	errors?: GraphQLError[];
}

export interface DrugsIndexDrugsResponse {
	data?: DrugsIndexDrugsResponseData;
	errors?: GraphQLError[];
}

export interface EconomizersCreateEconomizerResponse {
	data?: EconomizersCreateEconomizerResponseData;
	errors?: GraphQLError[];
}

export interface EconomizersDeleteEconomizerResponse {
	data?: EconomizersDeleteEconomizerResponseData;
	errors?: GraphQLError[];
}

export interface EconomizersEconomizerTemplateResponse {
	data?: EconomizersEconomizerTemplateResponseData;
	errors?: GraphQLError[];
}

export interface EconomizersEconomizersResponse {
	data?: EconomizersEconomizersResponseData;
	errors?: GraphQLError[];
}

export interface EconomizersUpdateEconomizerResponse {
	data?: EconomizersUpdateEconomizerResponseData;
	errors?: GraphQLError[];
}

export interface ModalityGetOneModalityResponse {
	data?: ModalityGetOneModalityResponseData;
	errors?: GraphQLError[];
}

export interface ModalityGetSpecificModalitiesResponse {
	data?: ModalityGetSpecificModalitiesResponseData;
	errors?: GraphQLError[];
}

export interface ModalityModalitiesResponse {
	data?: ModalityModalitiesResponseData;
	errors?: GraphQLError[];
}

export interface ModalitySwitchModalityResponse {
	data?: ModalitySwitchModalityResponseData;
	errors?: GraphQLError[];
}

export interface ModalityUpdateOneModalityResponse {
	data?: ModalityUpdateOneModalityResponseData;
	errors?: GraphQLError[];
}

export interface WorkingListsCreateOneWorkingListResponse {
	data?: WorkingListsCreateOneWorkingListResponseData;
	errors?: GraphQLError[];
}

export interface WorkingListsDeleteOneWorkingListResponse {
	data?: WorkingListsDeleteOneWorkingListResponseData;
	errors?: GraphQLError[];
}

export interface WorkingListsLinkWorkingListResponse {
	data?: WorkingListsLinkWorkingListResponseData;
	errors?: GraphQLError[];
}

export interface WorkingListsToggleLockWorkingListResponse {
	data?: WorkingListsToggleLockWorkingListResponseData;
	errors?: GraphQLError[];
}

export interface WorkingListsWorkingListsResponse {
	data?: WorkingListsWorkingListsResponseData;
	errors?: GraphQLError[];
}

export interface ClinicalDiagnosticsIndexClinicalDiagnosticResponse {
	data?: ClinicalDiagnosticsIndexClinicalDiagnosticResponseData;
	errors?: GraphQLError[];
}

export interface ClinicalEventsCreateOneClinicalEventResponse {
	data?: ClinicalEventsCreateOneClinicalEventResponseData;
	errors?: GraphQLError[];
}

export interface ClinicalEventsDeleteOneClinicalEventResponse {
	data?: ClinicalEventsDeleteOneClinicalEventResponseData;
	errors?: GraphQLError[];
}

export interface ClinicalEventsGetClinicalEventResponse {
	data?: ClinicalEventsGetClinicalEventResponseData;
	errors?: GraphQLError[];
}

export interface ClinicalEventsGetClinicalEventWithConfigurationResponse {
	data?: ClinicalEventsGetClinicalEventWithConfigurationResponseData;
	errors?: GraphQLError[];
}

export interface ClinicalEventsGetClinicalEventsResponse {
	data?: ClinicalEventsGetClinicalEventsResponseData;
	errors?: GraphQLError[];
}

export interface ConsultationListCheckIfRegistredResponse {
	data?: ConsultationListCheckIfRegistredResponseData;
	errors?: GraphQLError[];
}

export interface ConsultationListCloseConsultationResponse {
	data?: ConsultationListCloseConsultationResponseData;
	errors?: GraphQLError[];
}

export interface ConsultationListRegisterPatientResponse {
	data?: ConsultationListRegisterPatientResponseData;
	errors?: GraphQLError[];
}

export interface ConsultationListTodayConsultationResponse {
	data?: ConsultationListTodayConsultationResponseData;
	errors?: GraphQLError[];
}

export interface ConsultationListTodayListsResponse {
	data?: ConsultationListTodayListsResponseData;
	errors?: GraphQLError[];
}

export interface ConsultationListToggleActivePatientResponse {
	data?: ConsultationListToggleActivePatientResponseData;
	errors?: GraphQLError[];
}

export interface ConsultationListUnregisterPatientResponse {
	data?: ConsultationListUnregisterPatientResponseData;
	errors?: GraphQLError[];
}

export interface MobileDevicesMobileDevicesQueryResponse {
	data?: MobileDevicesMobileDevicesQueryResponseData;
	errors?: GraphQLError[];
}

export interface MobileDevicesAddMobileDeviceMutationResponse {
	data?: MobileDevicesAddMobileDeviceMutationResponseData;
	errors?: GraphQLError[];
}

export interface MobileDevicesRegisterOneMobileDeviceResponse {
	data?: MobileDevicesRegisterOneMobileDeviceResponseData;
	errors?: GraphQLError[];
}

export interface MobileDevicesRemoveMobileDeviceResponse {
	data?: MobileDevicesRemoveMobileDeviceResponseData;
	errors?: GraphQLError[];
}

export interface MobileDevicesResetMobileDeviceResponse {
	data?: MobileDevicesResetMobileDeviceResponseData;
	errors?: GraphQLError[];
}

export interface MobileDevicesSwitchMobileDeviceResponse {
	data?: MobileDevicesSwitchMobileDeviceResponseData;
	errors?: GraphQLError[];
}

export interface MobileDevicesUpdateMobileDeviceExpirationResponse {
	data?: MobileDevicesUpdateMobileDeviceExpirationResponseData;
	errors?: GraphQLError[];
}

export interface PatientsMovePatientFolderToTrashResponse {
	data?: PatientsMovePatientFolderToTrashResponseData;
	errors?: GraphQLError[];
}

export interface PatientsAdd_One_patient_to_indexResponse {
	data?: PatientsAdd_One_patient_to_indexResponseData;
	errors?: GraphQLError[];
}

export interface PatientsGetDocumentHeadersResponse {
	data?: PatientsGetDocumentHeadersResponseData;
	errors?: GraphQLError[];
}

export interface PatientsGetOnTrashPatientsResponse {
	data?: PatientsGetOnTrashPatientsResponseData;
	errors?: GraphQLError[];
}

export interface PatientsGetOnePatientResponse {
	data?: PatientsGetOnePatientResponseData;
	errors?: GraphQLError[];
}

export interface PatientsGetOnePatientInfoResponse {
	data?: PatientsGetOnePatientInfoResponseData;
	errors?: GraphQLError[];
}

export interface PatientsIndex_patientsResponse {
	data?: PatientsIndex_patientsResponseData;
	errors?: GraphQLError[];
}

export interface PatientsToggleSelectedTrashPatientResponse {
	data?: PatientsToggleSelectedTrashPatientResponseData;
	errors?: GraphQLError[];
}

export interface PatientsUpdateOnePatientResponse {
	data?: PatientsUpdateOnePatientResponseData;
	errors?: GraphQLError[];
}

export interface TemplatesFetchTemplateResponse {
	data?: TemplatesFetchTemplateResponseData;
	errors?: GraphQLError[];
}

export interface TemplatesGetTemplatesResponse {
	data?: TemplatesGetTemplatesResponseData;
	errors?: GraphQLError[];
}

export interface TemplatesUpdateTemplateResponse {
	data?: TemplatesUpdateTemplateResponseData;
	errors?: GraphQLError[];
}

export interface UsersGetUserResponse {
	data?: UsersGetUserResponseData;
	errors?: GraphQLError[];
}

export interface UsersInternalGetUserResponse {
	data?: UsersInternalGetUserResponseData;
	errors?: GraphQLError[];
}

export interface UsersInternalUpdateAuthenticatedUserResponse {
	data?: UsersInternalUpdateAuthenticatedUserResponseData;
	errors?: GraphQLError[];
}

export interface WorkingListsLinkExamResponse {
	data?: WorkingListsLinkExamResponseData;
	errors?: GraphQLError[];
}

export interface WorkingListsRefreshLinkExamResponse {
	data?: WorkingListsRefreshLinkExamResponseData;
	errors?: GraphQLError[];
}

export interface UsersGetResponse {
	data?: UsersGetResponseData;
	errors?: GraphQLError[];
}

export interface UsersSubscribeResponse {
	data?: UsersSubscribeResponseData;
	errors?: GraphQLError[];
}

export interface UsersUpdateResponse {
	data?: UsersUpdateResponseData;
	errors?: GraphQLError[];
}

export interface AppSubscriptionGlobalSubscriptionResponseData {
	mainDb_appSubscription: {
		appPayload: string;
		messageId: string;
		type:
			| "closeAllTabs"
			| "consultationLists"
			| "emptyTrash"
			| "focusedDocument"
			| "mobileDeviceUpdate"
			| "modalityUpdate"
			| "patientUpdate"
			| "secondaryDisplay"
			| "workingLists";
	};
}

export interface AppSubscriptionTriggerAppSubscriptionResponseData {
	mainDb_triggerAppSubscription: boolean;
}

export interface CountriesResponseData {
	countries_countries: {
		code: string;
		name: string;
		capital?: string;
	}[];
}

export interface DataTableGetDataTableConfigurationsResponseData {
	mainDb_getDataTableConfiguration: {
		id: string;
		sectionName: string;
		tableContentType: string;
		widgets: {
			id?: string;
			widgetType?: "pictureGenerator" | "table";
			tableName?: string;
			config?: {
				columnWidth: number;
				paramHeader: string;
				data: {
					paramName: string;
					paramType: "number" | "string";
				};
				value?: string;
			}[];
			widgetName?: string;
		}[];
	}[];
}

export interface DataTableInsertDataSubscriptionResponseData {
	mainDb_insertDataSubscription: {
		paramData: {
			paramName: string;
			paramType: "number" | "string";
		};
		columnWidth: number;
		tableContentType: string;
		value: string;
		widget: {
			id?: string;
			widgetType?: "pictureGenerator" | "table";
			tableName?: string;
			config?: {
				columnWidth: number;
				paramHeader: string;
				data: {
					paramName: string;
					paramType: "number" | "string";
				};
				value?: string;
			}[];
			widgetName?: string;
		};
	};
}

export interface DataTableTriggerInsertDataSubscriptionResponseData {
	mainDb_triggerInsertDataSubscription: boolean;
}

export interface DrugsIndexDrugsResponseData {
	mainDb_indexDrugs?: boolean;
}

export interface EconomizersCreateEconomizerResponseData {
	mainDb_createOneEconomizer: {
		id: string;
		name: string;
		eventType:
			| "BIOLOGY"
			| "CERTIFICAT"
			| "CLINICALEXAM"
			| "DIAGNOSTIC"
			| "ECG"
			| "HISTORY"
			| "MEDICAL_REPORT"
			| "PRESCRIPTION"
			| "SONOGRAPHY";
		template: string;
	};
}

export interface EconomizersDeleteEconomizerResponseData {
	mainDb_deleteOneEconomizer?: {
		id: string;
	};
}

export interface EconomizersEconomizerTemplateResponseData {
	mainDb_economizer?: {
		template: string;
	};
}

export interface EconomizersEconomizersResponseData {
	mainDb_economizers: {
		id: string;
		name: string;
	}[];
}

export interface EconomizersUpdateEconomizerResponseData {
	mainDb_updateOneEconomizer?: {
		id: string;
		name: string;
		eventType:
			| "BIOLOGY"
			| "CERTIFICAT"
			| "CLINICALEXAM"
			| "DIAGNOSTIC"
			| "ECG"
			| "HISTORY"
			| "MEDICAL_REPORT"
			| "PRESCRIPTION"
			| "SONOGRAPHY";
		template: string;
	};
}

export interface ModalityGetOneModalityResponseData {
	mainDb_modality?: {
		id: string;
		modalityAETitle: string;
		modalityIpAddress: string;
		modalityPseudo?: string;
		modalityPort: number;
		modalityType:
			| "AR"
			| "ASMT"
			| "AU"
			| "BDUS"
			| "BI"
			| "BMD"
			| "CR"
			| "CT"
			| "CTPROTOCOL"
			| "DG"
			| "DOC"
			| "DX"
			| "ECG"
			| "EPS"
			| "ES"
			| "FID"
			| "GM"
			| "HC"
			| "HD"
			| "IO"
			| "IOL"
			| "IVOCT"
			| "IVUS"
			| "KER"
			| "KO"
			| "LEN"
			| "LS"
			| "M3D"
			| "MG"
			| "MR"
			| "NM"
			| "OAM"
			| "OCT"
			| "OP"
			| "OPM"
			| "OPT"
			| "OPTBSV"
			| "OPTENF"
			| "OPV"
			| "OSS"
			| "OT"
			| "PLAN"
			| "PR"
			| "PT"
			| "PX"
			| "REG"
			| "RESP"
			| "RF"
			| "RG"
			| "RTDOSE"
			| "RTIMAGE"
			| "RTINTENT"
			| "RTPLAN"
			| "RTRAD"
			| "RTRECORD"
			| "RTSEGANN"
			| "RTSTRUCT"
			| "RWV"
			| "SEG"
			| "SM"
			| "SMR"
			| "SR"
			| "SRF"
			| "STAIN"
			| "TEXTUREMAP"
			| "TG"
			| "US"
			| "VA"
			| "XA"
			| "XC";
		enabled: boolean;
	};
}

export interface ModalityGetSpecificModalitiesResponseData {
	mainDb_modalities: {
		id: string;
		modalityAETitle: string;
		modalityIpAddress: string;
		modalityPseudo?: string;
		modalityPort: number;
		modalityType:
			| "AR"
			| "ASMT"
			| "AU"
			| "BDUS"
			| "BI"
			| "BMD"
			| "CR"
			| "CT"
			| "CTPROTOCOL"
			| "DG"
			| "DOC"
			| "DX"
			| "ECG"
			| "EPS"
			| "ES"
			| "FID"
			| "GM"
			| "HC"
			| "HD"
			| "IO"
			| "IOL"
			| "IVOCT"
			| "IVUS"
			| "KER"
			| "KO"
			| "LEN"
			| "LS"
			| "M3D"
			| "MG"
			| "MR"
			| "NM"
			| "OAM"
			| "OCT"
			| "OP"
			| "OPM"
			| "OPT"
			| "OPTBSV"
			| "OPTENF"
			| "OPV"
			| "OSS"
			| "OT"
			| "PLAN"
			| "PR"
			| "PT"
			| "PX"
			| "REG"
			| "RESP"
			| "RF"
			| "RG"
			| "RTDOSE"
			| "RTIMAGE"
			| "RTINTENT"
			| "RTPLAN"
			| "RTRAD"
			| "RTRECORD"
			| "RTSEGANN"
			| "RTSTRUCT"
			| "RWV"
			| "SEG"
			| "SM"
			| "SMR"
			| "SR"
			| "SRF"
			| "STAIN"
			| "TEXTUREMAP"
			| "TG"
			| "US"
			| "VA"
			| "XA"
			| "XC";
		enabled: boolean;
	}[];
}

export interface ModalityModalitiesResponseData {
	mainDb_modalities: {
		id: string;
		modalityAETitle: string;
		modalityIpAddress: string;
		modalityPseudo?: string;
		modalityPort: number;
		modalityType:
			| "AR"
			| "ASMT"
			| "AU"
			| "BDUS"
			| "BI"
			| "BMD"
			| "CR"
			| "CT"
			| "CTPROTOCOL"
			| "DG"
			| "DOC"
			| "DX"
			| "ECG"
			| "EPS"
			| "ES"
			| "FID"
			| "GM"
			| "HC"
			| "HD"
			| "IO"
			| "IOL"
			| "IVOCT"
			| "IVUS"
			| "KER"
			| "KO"
			| "LEN"
			| "LS"
			| "M3D"
			| "MG"
			| "MR"
			| "NM"
			| "OAM"
			| "OCT"
			| "OP"
			| "OPM"
			| "OPT"
			| "OPTBSV"
			| "OPTENF"
			| "OPV"
			| "OSS"
			| "OT"
			| "PLAN"
			| "PR"
			| "PT"
			| "PX"
			| "REG"
			| "RESP"
			| "RF"
			| "RG"
			| "RTDOSE"
			| "RTIMAGE"
			| "RTINTENT"
			| "RTPLAN"
			| "RTRAD"
			| "RTRECORD"
			| "RTSEGANN"
			| "RTSTRUCT"
			| "RWV"
			| "SEG"
			| "SM"
			| "SMR"
			| "SR"
			| "SRF"
			| "STAIN"
			| "TEXTUREMAP"
			| "TG"
			| "US"
			| "VA"
			| "XA"
			| "XC";
		enabled: boolean;
	}[];
}

export interface ModalitySwitchModalityResponseData {
	mainDb_updateOneModality?: {
		id: string;
	};
}

export interface ModalityUpdateOneModalityResponseData {
	mainDb_updateOneModality?: {
		id: string;
		modalityAETitle: string;
		modalityIpAddress: string;
		modalityPseudo?: string;
		modalityPort: number;
		modalityType:
			| "AR"
			| "ASMT"
			| "AU"
			| "BDUS"
			| "BI"
			| "BMD"
			| "CR"
			| "CT"
			| "CTPROTOCOL"
			| "DG"
			| "DOC"
			| "DX"
			| "ECG"
			| "EPS"
			| "ES"
			| "FID"
			| "GM"
			| "HC"
			| "HD"
			| "IO"
			| "IOL"
			| "IVOCT"
			| "IVUS"
			| "KER"
			| "KO"
			| "LEN"
			| "LS"
			| "M3D"
			| "MG"
			| "MR"
			| "NM"
			| "OAM"
			| "OCT"
			| "OP"
			| "OPM"
			| "OPT"
			| "OPTBSV"
			| "OPTENF"
			| "OPV"
			| "OSS"
			| "OT"
			| "PLAN"
			| "PR"
			| "PT"
			| "PX"
			| "REG"
			| "RESP"
			| "RF"
			| "RG"
			| "RTDOSE"
			| "RTIMAGE"
			| "RTINTENT"
			| "RTPLAN"
			| "RTRAD"
			| "RTRECORD"
			| "RTSEGANN"
			| "RTSTRUCT"
			| "RWV"
			| "SEG"
			| "SM"
			| "SMR"
			| "SR"
			| "SRF"
			| "STAIN"
			| "TEXTUREMAP"
			| "TG"
			| "US"
			| "VA"
			| "XA"
			| "XC";
		enabled: boolean;
	};
}

export interface WorkingListsCreateOneWorkingListResponseData {
	mainDb_createOneWorkingList: {
		id: string;
	};
}

export interface WorkingListsDeleteOneWorkingListResponseData {
	mainDb_deleteOneWorkingList?: {
		id: string;
	};
}

export interface WorkingListsLinkWorkingListResponseData {
	mainDb_updateOneWorkingList?: {
		id: string;
	};
}

export interface WorkingListsToggleLockWorkingListResponseData {
	mainDb_toggleLockWorkingList: {
		id: string;
	};
}

export interface WorkingListsWorkingListsResponseData {
	mainDb_workingLists: {
		id: string;
		modality: {
			id: string;
			modalityPseudo?: string;
			modalityType:
				| "AR"
				| "ASMT"
				| "AU"
				| "BDUS"
				| "BI"
				| "BMD"
				| "CR"
				| "CT"
				| "CTPROTOCOL"
				| "DG"
				| "DOC"
				| "DX"
				| "ECG"
				| "EPS"
				| "ES"
				| "FID"
				| "GM"
				| "HC"
				| "HD"
				| "IO"
				| "IOL"
				| "IVOCT"
				| "IVUS"
				| "KER"
				| "KO"
				| "LEN"
				| "LS"
				| "M3D"
				| "MG"
				| "MR"
				| "NM"
				| "OAM"
				| "OCT"
				| "OP"
				| "OPM"
				| "OPT"
				| "OPTBSV"
				| "OPTENF"
				| "OPV"
				| "OSS"
				| "OT"
				| "PLAN"
				| "PR"
				| "PT"
				| "PX"
				| "REG"
				| "RESP"
				| "RF"
				| "RG"
				| "RTDOSE"
				| "RTIMAGE"
				| "RTINTENT"
				| "RTPLAN"
				| "RTRAD"
				| "RTRECORD"
				| "RTSEGANN"
				| "RTSTRUCT"
				| "RWV"
				| "SEG"
				| "SM"
				| "SMR"
				| "SR"
				| "SRF"
				| "STAIN"
				| "TEXTUREMAP"
				| "TG"
				| "US"
				| "VA"
				| "XA"
				| "XC";
			modalityAETitle: string;
		};
		patient: {
			patientFullName: string;
		};
		user: {
			fullName?: string;
		};
		clinicalEventId: string;
		createdAt: string;
		modalityExamStatus: "CLOSED" | "CREATED" | "INPROGRESS" | "REALIZED" | "REPORT_DONE";
		linkId?: string;
		linked: boolean;
		locked: boolean;
	}[];
}

export interface ClinicalDiagnosticsIndexClinicalDiagnosticResponseData {
	mainDb_indexClinicalDiagnostics?: boolean;
}

export interface ClinicalEventsCreateOneClinicalEventResponseData {
	mainDb_createOneClinicalEvent: {
		id: string;
	};
}

export interface ClinicalEventsDeleteOneClinicalEventResponseData {
	mainDb_deleteOneClinicalEvent?: {
		id: string;
	};
}

export interface ClinicalEventsGetClinicalEventResponseData {
	mainDb_clinicalEvent?: {
		id: string;
		eventType:
			| "BIOLOGY"
			| "CERTIFICAT"
			| "CLINICALEXAM"
			| "DIAGNOSTIC"
			| "ECG"
			| "HISTORY"
			| "MEDICAL_REPORT"
			| "PRESCRIPTION"
			| "SONOGRAPHY";
		eventCategory: "DOCUMENT" | "FOLDER";
		updatedAt: string;
		createdAt: string;
		dicomId?: string;
		dicom: boolean;
		deleted: boolean;
		user: {
			id: string;
			fullName?: string;
		};
		patientId: string;
	};
}

export interface ClinicalEventsGetClinicalEventWithConfigurationResponseData {
	mainDb_clinicalEvent?: {
		id: string;
		eventType:
			| "BIOLOGY"
			| "CERTIFICAT"
			| "CLINICALEXAM"
			| "DIAGNOSTIC"
			| "ECG"
			| "HISTORY"
			| "MEDICAL_REPORT"
			| "PRESCRIPTION"
			| "SONOGRAPHY";
		eventCategory: "DOCUMENT" | "FOLDER";
		updatedAt: string;
		createdAt: string;
		dicomId?: string;
		dicom: boolean;
		deleted: boolean;
		user: {
			id: string;
			fullName?: string;
		};
		patientId: string;
		getModalities: {
			id: string;
			modalityAETitle: string;
			modalityIpAddress: string;
			modalityPseudo?: string;
			modalityPort: number;
			modalityType:
				| "AR"
				| "ASMT"
				| "AU"
				| "BDUS"
				| "BI"
				| "BMD"
				| "CR"
				| "CT"
				| "CTPROTOCOL"
				| "DG"
				| "DOC"
				| "DX"
				| "ECG"
				| "EPS"
				| "ES"
				| "FID"
				| "GM"
				| "HC"
				| "HD"
				| "IO"
				| "IOL"
				| "IVOCT"
				| "IVUS"
				| "KER"
				| "KO"
				| "LEN"
				| "LS"
				| "M3D"
				| "MG"
				| "MR"
				| "NM"
				| "OAM"
				| "OCT"
				| "OP"
				| "OPM"
				| "OPT"
				| "OPTBSV"
				| "OPTENF"
				| "OPV"
				| "OSS"
				| "OT"
				| "PLAN"
				| "PR"
				| "PT"
				| "PX"
				| "REG"
				| "RESP"
				| "RF"
				| "RG"
				| "RTDOSE"
				| "RTIMAGE"
				| "RTINTENT"
				| "RTPLAN"
				| "RTRAD"
				| "RTRECORD"
				| "RTSEGANN"
				| "RTSTRUCT"
				| "RWV"
				| "SEG"
				| "SM"
				| "SMR"
				| "SR"
				| "SRF"
				| "STAIN"
				| "TEXTUREMAP"
				| "TG"
				| "US"
				| "VA"
				| "XA"
				| "XC";
			enabled: boolean;
		}[];
		WorkingList: {
			id: string;
			modality: {
				id: string;
				modalityPseudo?: string;
				modalityType:
					| "AR"
					| "ASMT"
					| "AU"
					| "BDUS"
					| "BI"
					| "BMD"
					| "CR"
					| "CT"
					| "CTPROTOCOL"
					| "DG"
					| "DOC"
					| "DX"
					| "ECG"
					| "EPS"
					| "ES"
					| "FID"
					| "GM"
					| "HC"
					| "HD"
					| "IO"
					| "IOL"
					| "IVOCT"
					| "IVUS"
					| "KER"
					| "KO"
					| "LEN"
					| "LS"
					| "M3D"
					| "MG"
					| "MR"
					| "NM"
					| "OAM"
					| "OCT"
					| "OP"
					| "OPM"
					| "OPT"
					| "OPTBSV"
					| "OPTENF"
					| "OPV"
					| "OSS"
					| "OT"
					| "PLAN"
					| "PR"
					| "PT"
					| "PX"
					| "REG"
					| "RESP"
					| "RF"
					| "RG"
					| "RTDOSE"
					| "RTIMAGE"
					| "RTINTENT"
					| "RTPLAN"
					| "RTRAD"
					| "RTRECORD"
					| "RTSEGANN"
					| "RTSTRUCT"
					| "RWV"
					| "SEG"
					| "SM"
					| "SMR"
					| "SR"
					| "SRF"
					| "STAIN"
					| "TEXTUREMAP"
					| "TG"
					| "US"
					| "VA"
					| "XA"
					| "XC";
				modalityAETitle: string;
			};
			patient: {
				patientFullName: string;
			};
			user: {
				fullName?: string;
			};
			clinicalEventId: string;
			createdAt: string;
			modalityExamStatus: "CLOSED" | "CREATED" | "INPROGRESS" | "REALIZED" | "REPORT_DONE";
			linkId?: string;
			linked: boolean;
			locked: boolean;
		}[];
		getEconomizers: {
			id: string;
			name: string;
		}[];
	};
}

export interface ClinicalEventsGetClinicalEventsResponseData {
	mainDb_clinicalEvents: {
		id: string;
		eventType:
			| "BIOLOGY"
			| "CERTIFICAT"
			| "CLINICALEXAM"
			| "DIAGNOSTIC"
			| "ECG"
			| "HISTORY"
			| "MEDICAL_REPORT"
			| "PRESCRIPTION"
			| "SONOGRAPHY";
		eventCategory: "DOCUMENT" | "FOLDER";
		updatedAt: string;
		createdAt: string;
		dicomId?: string;
		dicom: boolean;
		deleted: boolean;
		user: {
			id: string;
			fullName?: string;
		};
		patientId: string;
	}[];
}

export interface ConsultationListCheckIfRegistredResponseData {
	mainDb_consultationList?: {
		id: string;
	};
}

export interface ConsultationListCloseConsultationResponseData {
	mainDb_updateOneConsultationList?: {
		id: string;
		active: boolean;
		consultationId: string;
		patientId: string;
		patient: {
			lastName: string;
			firstName: string;
			sexe: "F" | "M";
			ddn: string;
		};
	};
}

export interface ConsultationListRegisterPatientResponseData {
	mainDb_registerPatient: string;
}

export interface ConsultationListTodayConsultationResponseData {
	mainDb_findFirstConsultation?: {
		id: string;
		allowedEventTypes: (
			| "BIOLOGY"
			| "CERTIFICAT"
			| "CLINICALEXAM"
			| "DIAGNOSTIC"
			| "ECG"
			| "HISTORY"
			| "MEDICAL_REPORT"
			| "PRESCRIPTION"
			| "SONOGRAPHY"
		)[];
		ConsultationList: {
			id: string;
			active: boolean;
			consultationId: string;
			patientId: string;
			patient: {
				lastName: string;
				firstName: string;
				sexe: "F" | "M";
				ddn: string;
			};
		}[];
	};
}

export interface ConsultationListTodayListsResponseData {
	mainDb_consultationLists: {
		id: string;
		active: boolean;
		consultationId: string;
		patientId: string;
		patient: {
			lastName: string;
			firstName: string;
			sexe: "F" | "M";
			ddn: string;
		};
	}[];
}

export interface ConsultationListToggleActivePatientResponseData {
	mainDb_updateOneConsultationList?: {
		id: string;
	};
}

export interface ConsultationListUnregisterPatientResponseData {
	mainDb_deleteOneConsultationList?: {
		id: string;
	};
}

export interface MobileDevicesMobileDevicesQueryResponseData {
	mainDb_mobileDevices: {
		id: string;
		accessToken: string;
		connected: boolean;
		expireAt: string;
		mobileDeviceType: "DOCTOR" | "SECRETARY";
		uuid: string;
	}[];
}

export interface MobileDevicesAddMobileDeviceMutationResponseData {
	mainDb_createOneMobileDevice: {
		id: string;
	};
}

export interface MobileDevicesRegisterOneMobileDeviceResponseData {
	mainDb_registerOneMobileDevice?: {
		uuid: string;
	};
}

export interface MobileDevicesRemoveMobileDeviceResponseData {
	mainDb_deleteOneMobileDevice?: {
		id: string;
	};
}

export interface MobileDevicesResetMobileDeviceResponseData {
	mainDb_updateOneMobileDevice?: {
		id: string;
	};
}

export interface MobileDevicesSwitchMobileDeviceResponseData {
	mainDb_switchMobileDevice?: boolean;
}

export interface MobileDevicesUpdateMobileDeviceExpirationResponseData {
	mainDb_changeExpirationMobileDeviceResolver?: boolean;
}

export interface PatientsMovePatientFolderToTrashResponseData {
	mainDb_movePatientFolderToTrash?: {
		id: string;
	};
}

export interface PatientsAdd_One_patient_to_indexResponseData {
	mainDb_AddOnePatientToIndex: {
		id: string;
	};
}

export interface PatientsGetDocumentHeadersResponseData {
	mainDb_getDocumentHeaders?: boolean;
}

export interface PatientsGetOnTrashPatientsResponseData {
	mainDb_patients: {
		id: string;
		firstName: string;
		lastName: string;
		sexe: "F" | "M";
		ddn: string;
		deleted: boolean;
		onTrash: boolean;
		patientFullName: string;
		informationsConfirmed: boolean;
		nTel?: string;
		weight?: number;
		height?: number;
		address?: string;
		updated: string;
	}[];
}

export interface PatientsGetOnePatientResponseData {
	mainDb_getPatient?: {
		id: string;
		firstName: string;
		lastName: string;
		sexe: "F" | "M";
		ddn: string;
		deleted: boolean;
		onTrash: boolean;
		patientFullName: string;
		informationsConfirmed: boolean;
		nTel?: string;
		updated: string;
		DocumentStore: {
			textContent?: string;
			patientDocumentType: "document" | "folder";
		}[];
	};
}

export interface PatientsGetOnePatientInfoResponseData {
	mainDb_getPatient?: {
		id: string;
		firstName: string;
		lastName: string;
		sexe: "F" | "M";
		ddn: string;
		deleted: boolean;
		onTrash: boolean;
		patientFullName: string;
		informationsConfirmed: boolean;
		nTel?: string;
		weight?: number;
		height?: number;
		address?: string;
		updated: string;
	};
}

export interface PatientsIndex_patientsResponseData {
	mainDb_indexPatients?: boolean;
}

export interface PatientsToggleSelectedTrashPatientResponseData {
	mainDb_toggleSelectedTrashMutation: {
		count: number;
	};
}

export interface PatientsUpdateOnePatientResponseData {
	mainDb_updateOnePatient?: {
		id: string;
		firstName: string;
		lastName: string;
		sexe: "F" | "M";
		ddn: string;
		deleted: boolean;
		onTrash: boolean;
		patientFullName: string;
		informationsConfirmed: boolean;
		nTel?: string;
		updated: string;
		DocumentStore: {
			textContent?: string;
			patientDocumentType: "document" | "folder";
		}[];
	};
}

export interface TemplatesFetchTemplateResponseData {
	mainDb_documentTemplate?: {
		template: string;
		eventType:
			| "BIOLOGY"
			| "CERTIFICAT"
			| "CLINICALEXAM"
			| "DIAGNOSTIC"
			| "ECG"
			| "HISTORY"
			| "MEDICAL_REPORT"
			| "PRESCRIPTION"
			| "SONOGRAPHY";
		id: string;
	};
}

export interface TemplatesGetTemplatesResponseData {
	mainDb_documentTemplates: {
		eventType:
			| "BIOLOGY"
			| "CERTIFICAT"
			| "CLINICALEXAM"
			| "DIAGNOSTIC"
			| "ECG"
			| "HISTORY"
			| "MEDICAL_REPORT"
			| "PRESCRIPTION"
			| "SONOGRAPHY";
		id: string;
		empty: boolean;
	}[];
}

export interface TemplatesUpdateTemplateResponseData {
	mainDb_updateOneDocumentTemplate?: {
		id: string;
	};
}

export interface UsersGetUserResponseData {
	mainDb_user?: {
		lastName?: string;
		firstName?: string;
		fullName?: string;
		avatarUrl?: string;
		searchApiKey: string;
		editorApiKey: string;
	};
}

export interface UsersInternalGetUserResponseData {
	mainDb_user?: {
		avatarUrl?: string;
		searchApiKey: string;
		searchApiKeyId?: number;
	};
}

export interface UsersInternalUpdateAuthenticatedUserResponseData {
	mainDb_upsertOneUser: {
		id: string;
		avatarUrl?: string;
	};
}

export type WorkingListsLinkExamResponseData = ExtractResponse<typeof function_WorkingListsLinkExam>;

export type WorkingListsRefreshLinkExamResponseData = ExtractResponse<typeof function_WorkingListsRefreshLinkExam>;

export type UsersGetResponseData = ExtractResponse<typeof function_UsersGet>;

export type UsersSubscribeResponseData = ExtractResponse<typeof function_UsersSubscribe>;

export type UsersUpdateResponseData = ExtractResponse<typeof function_UsersUpdate>;
